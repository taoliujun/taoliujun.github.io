{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","path":"js/jquery-3.6.4.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"aa7880376b6cad61751285fbcd390d89617cd751","modified":1688528145531},{"_id":"node_modules/hexo-theme-landscape/package.json","hash":"4bf95d52f77edf811f23f6d264a7493311a8d078","modified":1688521653727},{"_id":"node_modules/hexo-theme-landscape/README.md","hash":"1a9b279e6dd29fd19245f913f0c4a316ffaa62db","modified":1688521653721},{"_id":"node_modules/hexo-theme-landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1688521653293},{"_id":"node_modules/hexo-theme-landscape/_config.yml","hash":"b608c1f1322760dce9805285a602a95832730a2e","modified":1688521653727},{"_id":"node_modules/hexo-theme-landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1688521653291},{"_id":"node_modules/hexo-theme-landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1688521653400},{"_id":"node_modules/hexo-theme-landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1688521653399},{"_id":"node_modules/hexo-theme-landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1688521653400},{"_id":"node_modules/hexo-theme-landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1688521653397},{"_id":"node_modules/hexo-theme-landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1688521653402},{"_id":"node_modules/hexo-theme-landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1688521653731},{"_id":"node_modules/hexo-theme-landscape/languages/de-DE.yml","hash":"d29d1c4256b7ed9df42f511c2ff0a23ad5fd6c1f","modified":1688521653730},{"_id":"node_modules/hexo-theme-landscape/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1688521653730},{"_id":"node_modules/hexo-theme-landscape/languages/en.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1688521653733},{"_id":"node_modules/hexo-theme-landscape/languages/en-GB.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1688521653730},{"_id":"node_modules/hexo-theme-landscape/languages/en-US.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1688521653730},{"_id":"node_modules/hexo-theme-landscape/languages/fr-FR.yml","hash":"8d09dbdab00a30a2870b56f7c0a7ca7deafa7b88","modified":1688521653728},{"_id":"node_modules/hexo-theme-landscape/languages/es-ES.yml","hash":"7008a8fc91f18d2a735864817b8ebda30c7a2c66","modified":1688521653729},{"_id":"node_modules/hexo-theme-landscape/languages/hu.yml","hash":"284d557130bf54a74e7dcef9d42096130e4d9550","modified":1688521653733},{"_id":"node_modules/hexo-theme-landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1688521653733},{"_id":"node_modules/hexo-theme-landscape/languages/hu-HU.yml","hash":"712d18664898fa21ba38d4973e90ef41a324ea25","modified":1688521653729},{"_id":"node_modules/hexo-theme-landscape/languages/it-IT.yml","hash":"2cb6dc2fab9bd2dbe1c8bb869a9e8bf85a564fdd","modified":1688521653733},{"_id":"node_modules/hexo-theme-landscape/languages/it.yml","hash":"89b7d91306b2c1a0f3ac023b657bf974f798a1e8","modified":1688521653733},{"_id":"node_modules/hexo-theme-landscape/layout/layout.ejs","hash":"0d1765036e4874500e68256fedb7470e96eeb6ee","modified":1688521653399},{"_id":"node_modules/hexo-theme-landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1688521653728},{"_id":"node_modules/hexo-theme-landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1688521653733},{"_id":"node_modules/hexo-theme-landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1688521653733},{"_id":"node_modules/hexo-theme-landscape/languages/mn-MN.yml","hash":"b9e5f3e7c0c2f779cf2cfded6db847b5941637ca","modified":1688521653729},{"_id":"node_modules/hexo-theme-landscape/languages/mn.yml","hash":"2e7523951072a9403ead3840ad823edd1084c116","modified":1688521653733},{"_id":"node_modules/hexo-theme-landscape/languages/nl-NL.yml","hash":"5ebbc30021f05d99938f96dfff280392df7f91f0","modified":1688521653733},{"_id":"node_modules/hexo-theme-landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1688521653730},{"_id":"node_modules/hexo-theme-landscape/languages/ko-KR.yml","hash":"19209ad8f9d4057e8df808937f950eb265e1db69","modified":1688521653733},{"_id":"node_modules/hexo-theme-landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1688521653729},{"_id":"node_modules/hexo-theme-landscape/languages/pt-PT.yml","hash":"0f852b6b228e6ea59aa3540574bb89b233f2a098","modified":1688521653734},{"_id":"node_modules/hexo-theme-landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1688521653734},{"_id":"node_modules/hexo-theme-landscape/languages/ja-JP.yml","hash":"08481267e0c112e1f6855620f2837ec4c4a98bbd","modified":1688521653733},{"_id":"node_modules/hexo-theme-landscape/languages/th.yml","hash":"84a55b00aa01f03982be294e43c33a20e6d32862","modified":1688521653735},{"_id":"node_modules/hexo-theme-landscape/scripts/fancybox.js","hash":"c857d7a5e4a5d71c743a009c5932bf84229db428","modified":1688521653712},{"_id":"node_modules/hexo-theme-landscape/languages/ru-RU.yml","hash":"360d11a28bb768afb1dd15f63fa7fd3a8cc547ee","modified":1688521653734},{"_id":"node_modules/hexo-theme-landscape/languages/tr.yml","hash":"a1cdbfa17682d7a971de8ab8588bf57c74224b5b","modified":1688521653736},{"_id":"node_modules/hexo-theme-landscape/languages/th-TH.yml","hash":"ebfdba9bc4842c829473c1e6e4544344f182724d","modified":1688521653735},{"_id":"node_modules/hexo-theme-landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1688521653735},{"_id":"node_modules/hexo-theme-landscape/languages/zh-CN.yml","hash":"1efd95774f401c80193eac6ee3f1794bfe93dc5a","modified":1688521653735},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1688521653293},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1688521653402},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/after-footer.ejs","hash":"377d257d5d16e0158a4405c72401517b074fd7ff","modified":1688521653293},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1688521653397},{"_id":"node_modules/hexo-theme-landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1688521653735},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive.ejs","hash":"7cb70a7a54f8c7ae49b10d1f37c0a9b74eab8826","modified":1688521653293},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/article.ejs","hash":"56597e951203dd662a6d2c817c7c4f1c920d4a25","modified":1688521653397},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1688521653293},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/head.ejs","hash":"f05bced793b0314d4f2ef0c993b3a51d0b7d203a","modified":1688521653400},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/google-analytics.ejs","hash":"2ea7442ea1e1a8ab4e41e26c563f58413b59a3d0","modified":1688521653399},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/footer.ejs","hash":"3656eb692254346671abc03cb3ba1459829e0dce","modified":1688521653397},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/gauges-analytics.ejs","hash":"21a1e2a3907d1a3dad1cd0ab855fe6735f233c74","modified":1688521653394},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1688521653399},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1688521653400},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/header.ejs","hash":"6a5033d189554c9a6d42e2ef7952ae5c9742648e","modified":1688521653399},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","hash":"e55a1d92954ed20f6887f92dc727bb995a010a43","modified":1688521653730},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1688521653293},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/recent_posts.ejs","hash":"60c4b012dcc656438ff59997e60367e5a21ab746","modified":1688521653399},{"_id":"node_modules/hexo-theme-landscape/source/css/_variables.styl","hash":"ca28281423ae57d76b6c1eb91cd845fd4e518bd6","modified":1688521653727},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1688521653397},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1688521653727},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1688521653397},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1688521653401},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/date.ejs","hash":"f1458584b679545830b75bef2526e2f3eb931045","modified":1688521653397},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1688521653397},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/title.ejs","hash":"4d7e62574ddf46de9b41605fe3140d77b5ddb26d","modified":1688521653404},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1688521653727},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1688521653730},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/article.styl","hash":"2d1f6f79ebf9cb55ebdb3865a2474437eb2b37c6","modified":1688521653729},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1688521653729},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/highlight.styl","hash":"9cc3b2927d814f2f6e8e188f9d3657b94f4c6ef3","modified":1688521653724},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/header.styl","hash":"268d2989acb06e2ddd06cc36a6918c6cd865476b","modified":1688521653729},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1688521653726},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1688521653727},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1688521653731},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1688521653399},{"_id":"node_modules/hexo-theme-landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1688521653727},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1688521653730},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1688521653729},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1688521653726},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1688521653718},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1688521653714},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1688521653712},{"_id":"public/hello-world/index.html","hash":"def472d51b021c39f800c885d0161d1beffb3ea1","modified":1688525064640},{"_id":"public/archives/index.html","hash":"064e17114353686c30a82e2c6397641767f2efd3","modified":1688536937136},{"_id":"public/archives/2023/index.html","hash":"7027bc9085b50db267700955315261138c1925ee","modified":1688525064640},{"_id":"public/archives/2023/07/index.html","hash":"7a3efcbb32a716336db1cc88a48e9f8274b03c13","modified":1688525064640},{"_id":"public/index.html","hash":"4d7c264b6ab517b7fb51adb3261f30acfc9bfd21","modified":1688536937136},{"_id":"public/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1688525064640},{"_id":"public/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1688525064640},{"_id":"public/css/style.css","hash":"ddb3792605d744ab3d9f0a649c82b62e9b16daa6","modified":1688525064640},{"_id":"public/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1688525064640},{"_id":"public/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1688525064640},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1688525064640},{"_id":"source/_posts/你好.md","hash":"57fc9b165d2b5081ca83269f7b79e3a5fb0c20c0","modified":1688528539097},{"_id":"themes/bmw/.gitignore","hash":"249186d37752b254b54734e92f6bf242deda1c3a","modified":1582098347000},{"_id":"themes/bmw/_config.yml","hash":"11e9353b5200299a478b1c7f55b9043a56e0a134","modified":1582098347000},{"_id":"themes/bmw/demo._config.yml","hash":"24b088ae4975cf17705e173deea711f1fcc9c3eb","modified":1582098347000},{"_id":"themes/bmw/LICENSE","hash":"ecd7addf36fdeb14bcef981bfbe7aa121810ac30","modified":1582098347000},{"_id":"themes/bmw/docs/中文文档.md","hash":"198b7eb8150772d4752baec770f3aea67687ac1e","modified":1582098347000},{"_id":"themes/bmw/layout/category.ejs","hash":"c770c490af2ac726a905fca7ba8a7ffcf49468e7","modified":1582098347000},{"_id":"themes/bmw/README.md","hash":"c6143c44538c9d6d293af94095dc4b6364a21c3f","modified":1582098347000},{"_id":"themes/bmw/layout/archive.ejs","hash":"c770c490af2ac726a905fca7ba8a7ffcf49468e7","modified":1582098347000},{"_id":"themes/bmw/layout/layout.ejs","hash":"d54e37533cabb21d3ad98f2f44a53030550fb8ec","modified":1582098347000},{"_id":"themes/bmw/layout/index.ejs","hash":"fea34b0179ec6b7cf91273ba61f853a544d60284","modified":1582098347000},{"_id":"themes/bmw/layout/tag.ejs","hash":"c770c490af2ac726a905fca7ba8a7ffcf49468e7","modified":1582098347000},{"_id":"themes/bmw/layout/post.ejs","hash":"fb5ba7d8910aaf4f6ae811d1cada93aa03a2dc56","modified":1582098347000},{"_id":"themes/bmw/layout/_partial/comment.ejs","hash":"9d82642448abbd30dc00ae906821968a27f92148","modified":1582098347000},{"_id":"themes/bmw/layout/_partial/footer.ejs","hash":"32e451b87c1a2faf17a04c8750284e3d7bfd774b","modified":1582098347000},{"_id":"themes/bmw/layout/_partial/header.ejs","hash":"511350a1c2f77821a9b7a231c7340ac9fb4ce21f","modified":1582098347000},{"_id":"themes/bmw/layout/_partial/navigation.ejs","hash":"021c84bfeb638c71bbd39868601d3c9f39658209","modified":1582098347000},{"_id":"themes/bmw/layout/_partial/fancybox.ejs","hash":"be6f655a475098bf3fa1da218c352b8c07e5df90","modified":1582098347000},{"_id":"themes/bmw/layout/_partial/player.ejs","hash":"55f4e5edd194ad7f793d91325e69c0bf2c0ba0a9","modified":1582098347000},{"_id":"themes/bmw/layout/_partial/reward.ejs","hash":"9189965b71044de79e633d365be07ccd796b520b","modified":1582098347000},{"_id":"themes/bmw/layout/_partial/mathjax.ejs","hash":"1c71755c63ae74fafb633bfe383ad0a584843259","modified":1582098347000},{"_id":"themes/bmw/layout/_partial/social.ejs","hash":"c37342ff555f67b199e265b5678517d1bfbe7d80","modified":1582098347000},{"_id":"themes/bmw/layout/_partial/timer.ejs","hash":"bfca7a62af6aa01f2dd3ad660392d68a2c68e62c","modified":1582098347000},{"_id":"themes/bmw/layout/component/back-to-up.ejs","hash":"dbe8fc9f58da9d7b6622bb0c652d41c1c8acfb1f","modified":1582098347000},{"_id":"themes/bmw/source/css/base.css.map","hash":"96f74f144960dc1af4f7eda0edb955fde4a78ed5","modified":1582098347000},{"_id":"themes/bmw/layout/component/timeline.ejs","hash":"a5e3ea8779f22250edbcf06e6d4873ba056ee8a3","modified":1582098347000},{"_id":"themes/bmw/layout/component/passage-viewer.ejs","hash":"907d2ef218a9a9935c06e0434e89275f9548de17","modified":1582098347000},{"_id":"themes/bmw/source/css/base.css","hash":"b35e69a6af1078f8ce3f5ec01d48bba9af142d14","modified":1582098347000},{"_id":"themes/bmw/source/css/highlight.css","hash":"ce8f7a91da7e2980e3778cef0bcff2a5e4b66b75","modified":1582098347000},{"_id":"themes/bmw/source/css/prism.css","hash":"a3acad3ed1d1d0a4f265d772f6cb190107d72e55","modified":1582098347000},{"_id":"themes/bmw/source/icon/iconfont.css","hash":"7c38a344145825ed80bc1e4da757a4733fb50652","modified":1582098347000},{"_id":"themes/bmw/source/css/github-markdown.css","hash":"0410ba978d226febee6d3236e8c5147689771299","modified":1582098347000},{"_id":"themes/bmw/source/icon/demo_fontclass.html","hash":"52e0e3bb43e5fab3245cd6dbee11a2bf6fe8a46e","modified":1582098347000},{"_id":"themes/bmw/source/icon/iconfont.eot","hash":"adc3cc9072b4d2f3939fb2f177ddcf7bd4ab009a","modified":1582098347000},{"_id":"themes/bmw/source/icon/iconfont.js","hash":"c5e9d861865c112c1b9971e0409503ed95c815c0","modified":1582098347000},{"_id":"themes/bmw/source/icon/iconfont.ttf","hash":"0a3b2a7882c61d6b4c85fe4e72f9f26948c6758d","modified":1582098347000},{"_id":"themes/bmw/source/icon/iconfont.woff","hash":"6dd1f927e13de5db063a4898e563a70a14e13b80","modified":1582098347000},{"_id":"themes/bmw/source/icon/iconfont.svg","hash":"f169491400b047eae7108fcd600b2dae5e457ad3","modified":1582098347000},{"_id":"themes/bmw/source/images/touch-icon.png","hash":"df5a490c2e8d549ca767505fbe46eed3cbe3df43","modified":1582098347000},{"_id":"themes/bmw/source/images/favicon.ico","hash":"cc7c201861748e92f4809507096df74a40ef496a","modified":1582098347000},{"_id":"themes/bmw/source/images/alipay.png","hash":"d58434f2543e983ecb2e2240d92bdc825e40fa60","modified":1582098347000},{"_id":"themes/bmw/source/scss/animation.scss","hash":"263f223b4977350635f91a3dfbc522885ee7a1a1","modified":1582098347000},{"_id":"themes/bmw/source/images/wechat.png","hash":"4742a2f020b5be1d9b12681faaeace8a7c91c570","modified":1582098347000},{"_id":"themes/bmw/source/js/util.js","hash":"e934cc45e3f7e5f5be3618ba9e9a1f4637482a7b","modified":1582098347000},{"_id":"themes/bmw/source/scss/article.scss","hash":"ed53f9ee14f84c651fd6b3deb864d4362508e64a","modified":1582098347000},{"_id":"themes/bmw/source/scss/base.scss","hash":"dc8ece1d059dc3669690bfd9feda866bd590e71c","modified":1582098347000},{"_id":"themes/bmw/source/scss/vcomments.scss","hash":"6f0d9b22aa0988831c1700b8c5ef55bc655f4b50","modified":1582098347000},{"_id":"themes/bmw/source/scss/mathjax.scss","hash":"1c505af96fa77d65ad5d13081c71a612e2f9587f","modified":1582098347000},{"_id":"themes/bmw/source/scss/layout/about.scss","hash":"b5530f7eba54053a504014e3d13d6c4fddfca65e","modified":1582098347000},{"_id":"themes/bmw/source/stylus/highlight.styl","hash":"8061950ee824c1b91bee01bd3373d858dc9296a9","modified":1582098347000},{"_id":"themes/bmw/source/scss/layout/friend.scss","hash":"d722788163872ac59bd138c5bd5ffe0ac5b75459","modified":1582098347000},{"_id":"themes/bmw/source/scss/layout/home.scss","hash":"0b3905cf565219cf970c512351c1b918ab802a02","modified":1582098347000},{"_id":"themes/bmw/source/scss/layout/category.scss","hash":"71e35eee5232fb33b5ea40d64d2f1073db798838","modified":1582098347000},{"_id":"themes/bmw/source/scss/layout/index.scss","hash":"21f96d488fe8b64ff2ab016fab9e8a1c02a87d30","modified":1582098347000},{"_id":"themes/bmw/source/scss/partial/navigation.scss","hash":"29dafd5e8a8cfa45f7069ef40f5ef3e499b60124","modified":1582098347000},{"_id":"themes/bmw/source/scss/layout/tag.scss","hash":"46611ae788ed3cc5185f909864da26f012c1c978","modified":1582098347000},{"_id":"themes/bmw/source/scss/layout/post.scss","hash":"1ed149bf23774237c90f68610336a43c190d98e2","modified":1582098347000},{"_id":"themes/bmw/source/scss/partial/reward.scss","hash":"32e04d72f58098affa010e59f8f1f63da06374e2","modified":1582098347000},{"_id":"themes/bmw/source/scss/partial/timeline.scss","hash":"066c1e7a8e3a956d5885c104b8236c9803123b72","modified":1582098347000},{"_id":"themes/bmw/source/scss/partial/footer.scss","hash":"f3d5d39f7b630fa8edba26bd996599ddd860a445","modified":1582098347000},{"_id":"themes/bmw/source/js/valine.min.js","hash":"ede5d4e0bc808cc8d9852b176237dc9b951a7045","modified":1582098347000},{"_id":"source/_posts/Github Actions/0-GitHub-Actions.md","hash":"e1f1497db7fd3004b6cc1b28948d516c356d14e9","modified":1688534742465},{"_id":"source/_posts/Github Actions/1. Quickstart - GitHub Actions.md","hash":"890828d565acbd715da0717a096b101e2723bf11","modified":1688534886353},{"_id":"source/_posts/Github Actions/4. Using workflows.md","hash":"cf4e4a13f55176336b8d86e8791d6d174e8f435e","modified":1688535474883},{"_id":"source/_posts/Github Actions/1. Quickstart.md","hash":"48c77dc26b484763ae8b55baa6ecf97f94cc5f97","modified":1688535168169},{"_id":"source/_posts/Github Actions/0. Intro.md","hash":"594d09117b2c8704c2247afa27a12ae1dff522ad","modified":1688535093956},{"_id":"source/_posts/Github Actions/5. Using jobs.md","hash":"660214b527d31365053c240ab1cb5d5e9fd4972e","modified":1688535518222},{"_id":"source/_posts/Github Actions/6. Managing workflow runs.md","hash":"4b8cc930d606fe4f2ee72e3ab7ca8157563b11fe","modified":1688535562718},{"_id":"source/_posts/Github Actions/2. Learn GitHub Actions.md","hash":"7ed8ffe8c768d91d472022b181f713727e22b2b5","modified":1688535281755},{"_id":"source/_posts/Github Actions/3. Examples.md","hash":"3fe6afc22c4687f6692790ee8ef72ec2fbf08a58","modified":1688535428938},{"_id":"public/github-actions-managing-workflow-runs/index.html","hash":"15e86a40ac93e4c741cff9a271345fb71f70ee23","modified":1688536937136},{"_id":"public/github-actions-using-jobs/index.html","hash":"666d2e03ca743a87b5a1cbf8102cf44d778e7b36","modified":1688536937136},{"_id":"public/github-actions-using-workflows/index.html","hash":"ee2453919826b7ecc321bd5de22d69c83f6ba773","modified":1688536937136},{"_id":"public/github-actions-examples/index.html","hash":"833c07703c36ce11c3d8e3553c66401e0a762e31","modified":1688536937136},{"_id":"public/github-actions-intro/index.html","hash":"4266fa267f3472f4eea5c4ee644d9ef5f1fa171d","modified":1688536937136},{"_id":"public/tags/github-actions/index.html","hash":"ffca150a9cff23fff0ec8a84a87bdc0061d7f75d","modified":1688536937136},{"_id":"public/tags/ci/index.html","hash":"842410a7fef535922779886a4cdbba4046357f00","modified":1688536937136},{"_id":"public/archives/2022/index.html","hash":"8acf68c7e858d25de270f668611631f2b424a338","modified":1688536937136},{"_id":"public/archives/2022/07/index.html","hash":"5748d676a4ea357aa106e35e82235a93409493de","modified":1688536937136},{"_id":"public/categories/架构/index.html","hash":"6a66cf3c5831c30698e6a9263eddcfef07d151df","modified":1688536937136},{"_id":"public/github-actions-learn/index.html","hash":"5790c253dadae8f676fccc51361f7df1cd8f44dc","modified":1688536937136},{"_id":"public/github-actions-quickStart/index.html","hash":"24b2c89e720c04c3907b862b4bf843565c7cb73a","modified":1688536937136},{"_id":"source/_posts/React/useDeferredValue在性能优化中的使用.md","hash":"cd5dce074b2b6d355b4066594ac66fc53fc2639e","modified":1688536912133},{"_id":"source/_posts/React/useTransition在性能优化中的使用.md","hash":"3c8504baace3f5aab65d6c0aa5b5f38f4c7963b7","modified":1688536916244},{"_id":"public/archives/2022/09/index.html","hash":"e117b74c243a5b5b08de88aefd3395c82552c457","modified":1688536937136},{"_id":"public/tags/react/index.html","hash":"af81c9aa5e7d6978c3ecc678ebf5ee81511497a7","modified":1688536937136},{"_id":"public/categories/react/index.html","hash":"608f0b22cc956be7bcff7a8b61120f1a13303267","modified":1688536937136},{"_id":"public/react-useDeferredValue/index.html","hash":"9cdc53f01702ccfff932ae5f753ebc98b94b3264","modified":1688536937136},{"_id":"public/react-useTransition/index.html","hash":"bfc8a723c64570b99c6df98d04f3ebfe0235fbea","modified":1688536937136}],"Category":[{"name":"test1","_id":"cljp5okxh00002trre4eo0a89"},{"name":"随想","_id":"cljp69k7b00016brr0tb6fusq"},{"name":"架构","_id":"cljp9zm1s0002aarre3mzetj7"},{"name":"react","_id":"cljpbangr0002sorr2onk7pdx"}],"Data":[],"Page":[],"Post":[{"title":"0. Intro - GitHub Actions","title_url":"github-actions-intro","date":"2022-07-02T16:00:00.000Z","_content":"\n官方文档：https://docs.github.com/en/actions\n\n之前依葫芦画瓢使用了 CI，并未对此做系统的了解，近期通读了一遍 Github Actions 文档，本系列文章是个人在 https://docs.github.com/en/actions 学习过程的杂乱记录，它是这样的：\n\n- 本文章系列不同于官方文档的中文翻译，只是加入个人理解的学习日记，内容不会完全覆盖。\n- 时间背景是 2022 年 7 月份。\n- 按照官方文档的顺序做了笔记，但忽略了个人认为不重要的部分。\n- 都是经验主义的理解，并且由于本人英文水平有限，会有理解出错的地方。\n- 部分理解也未基于代码实际运行结果，纯属经验和猜测。\n- 因为文档术语翻译往往词不达意，所以会有很多中英参杂。\n\n## 是什么？\n\n既然你搜索到本文，想必是知道它是干什么的。我概括为：\n\n> GitHub Actions 允许你在某些行为（比如 push master 分支）后，利用特定机器，执行脚本（比如 eslint check），并反馈结果形成一个 job。job 可以串起来，以完成更复杂的自动化操作。\n\n## 和 CI 的关系\n\nCI/CD 是执行自动化工作流的持续发布策略，它存在于 gitlab、github、jekins，甚至你在服务器上写了一个简单的计划任务拉取仓库代码后进行打包的脚本，也可以称之为 CI。\n\n在 github.com 上的 CI 就是 GitHub Actions，它提供了一组特定的环境变量、上下文、宿主机器。\n","source":"_posts/Github Actions/0. Intro.md","raw":"---\ntitle: 0. Intro - GitHub Actions\ntitle_url: github-actions-intro\ndate: 2022-07-03\ntags:\n  - github actions\n  - ci\ncategories:\n  - 架构\n---\n\n官方文档：https://docs.github.com/en/actions\n\n之前依葫芦画瓢使用了 CI，并未对此做系统的了解，近期通读了一遍 Github Actions 文档，本系列文章是个人在 https://docs.github.com/en/actions 学习过程的杂乱记录，它是这样的：\n\n- 本文章系列不同于官方文档的中文翻译，只是加入个人理解的学习日记，内容不会完全覆盖。\n- 时间背景是 2022 年 7 月份。\n- 按照官方文档的顺序做了笔记，但忽略了个人认为不重要的部分。\n- 都是经验主义的理解，并且由于本人英文水平有限，会有理解出错的地方。\n- 部分理解也未基于代码实际运行结果，纯属经验和猜测。\n- 因为文档术语翻译往往词不达意，所以会有很多中英参杂。\n\n## 是什么？\n\n既然你搜索到本文，想必是知道它是干什么的。我概括为：\n\n> GitHub Actions 允许你在某些行为（比如 push master 分支）后，利用特定机器，执行脚本（比如 eslint check），并反馈结果形成一个 job。job 可以串起来，以完成更复杂的自动化操作。\n\n## 和 CI 的关系\n\nCI/CD 是执行自动化工作流的持续发布策略，它存在于 gitlab、github、jekins，甚至你在服务器上写了一个简单的计划任务拉取仓库代码后进行打包的脚本，也可以称之为 CI。\n\n在 github.com 上的 CI 就是 GitHub Actions，它提供了一组特定的环境变量、上下文、宿主机器。\n","slug":"Github Actions/0. Intro","published":1,"updated":"2023-07-05T05:31:33.956Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cljpap0250000xbrr3far57p7","content":"<p>官方文档：<a href=\"https://docs.github.com/en/actions\">https://docs.github.com/en/actions</a></p>\n<p>之前依葫芦画瓢使用了 CI，并未对此做系统的了解，近期通读了一遍 Github Actions 文档，本系列文章是个人在 <a href=\"https://docs.github.com/en/actions\">https://docs.github.com/en/actions</a> 学习过程的杂乱记录，它是这样的：</p>\n<ul>\n<li>本文章系列不同于官方文档的中文翻译，只是加入个人理解的学习日记，内容不会完全覆盖。</li>\n<li>时间背景是 2022 年 7 月份。</li>\n<li>按照官方文档的顺序做了笔记，但忽略了个人认为不重要的部分。</li>\n<li>都是经验主义的理解，并且由于本人英文水平有限，会有理解出错的地方。</li>\n<li>部分理解也未基于代码实际运行结果，纯属经验和猜测。</li>\n<li>因为文档术语翻译往往词不达意，所以会有很多中英参杂。</li>\n</ul>\n<h2 id=\"是什么？\"><a href=\"#是什么？\" class=\"headerlink\" title=\"是什么？\"></a>是什么？</h2><p>既然你搜索到本文，想必是知道它是干什么的。我概括为：</p>\n<blockquote>\n<p>GitHub Actions 允许你在某些行为（比如 push master 分支）后，利用特定机器，执行脚本（比如 eslint check），并反馈结果形成一个 job。job 可以串起来，以完成更复杂的自动化操作。</p>\n</blockquote>\n<h2 id=\"和-CI-的关系\"><a href=\"#和-CI-的关系\" class=\"headerlink\" title=\"和 CI 的关系\"></a>和 CI 的关系</h2><p>CI&#x2F;CD 是执行自动化工作流的持续发布策略，它存在于 gitlab、github、jekins，甚至你在服务器上写了一个简单的计划任务拉取仓库代码后进行打包的脚本，也可以称之为 CI。</p>\n<p>在 github.com 上的 CI 就是 GitHub Actions，它提供了一组特定的环境变量、上下文、宿主机器。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>官方文档：<a href=\"https://docs.github.com/en/actions\">https://docs.github.com/en/actions</a></p>\n<p>之前依葫芦画瓢使用了 CI，并未对此做系统的了解，近期通读了一遍 Github Actions 文档，本系列文章是个人在 <a href=\"https://docs.github.com/en/actions\">https://docs.github.com/en/actions</a> 学习过程的杂乱记录，它是这样的：</p>\n<ul>\n<li>本文章系列不同于官方文档的中文翻译，只是加入个人理解的学习日记，内容不会完全覆盖。</li>\n<li>时间背景是 2022 年 7 月份。</li>\n<li>按照官方文档的顺序做了笔记，但忽略了个人认为不重要的部分。</li>\n<li>都是经验主义的理解，并且由于本人英文水平有限，会有理解出错的地方。</li>\n<li>部分理解也未基于代码实际运行结果，纯属经验和猜测。</li>\n<li>因为文档术语翻译往往词不达意，所以会有很多中英参杂。</li>\n</ul>\n<h2 id=\"是什么？\"><a href=\"#是什么？\" class=\"headerlink\" title=\"是什么？\"></a>是什么？</h2><p>既然你搜索到本文，想必是知道它是干什么的。我概括为：</p>\n<blockquote>\n<p>GitHub Actions 允许你在某些行为（比如 push master 分支）后，利用特定机器，执行脚本（比如 eslint check），并反馈结果形成一个 job。job 可以串起来，以完成更复杂的自动化操作。</p>\n</blockquote>\n<h2 id=\"和-CI-的关系\"><a href=\"#和-CI-的关系\" class=\"headerlink\" title=\"和 CI 的关系\"></a>和 CI 的关系</h2><p>CI&#x2F;CD 是执行自动化工作流的持续发布策略，它存在于 gitlab、github、jekins，甚至你在服务器上写了一个简单的计划任务拉取仓库代码后进行打包的脚本，也可以称之为 CI。</p>\n<p>在 github.com 上的 CI 就是 GitHub Actions，它提供了一组特定的环境变量、上下文、宿主机器。</p>\n"},{"title":"1. Quickstart - GitHub Actions","title_url":"github-actions-quickStart","date":"2022-07-03T16:00:00.000Z","_content":"\n官方文档：https://docs.github.com/en/actions/quickstart\n\n本文里，因为还没有讲术语的意思，所以用中文描述了基本的执行过程，后续的文章里会用原术语来表达，以防理解不一。\n\n文档说，只要有仓库，就可以使用 Actions。\n\n依葫芦画瓢，在本地创建 `.github/workflows` 目录，在目录里创建任意文件，以.yml 结尾，我创建了 `lint.yml`：\n\n```yaml\nname: lint\non: [push]\njobs:\n  eslint:\n    runs-on: ubuntu-latest\n    steps:\n      - run: echo \"The job was automatically triggered by a ${{ github.event_name }} event.\"\n      - name: Check out repository code\n        uses: actions/checkout@v3\n      - name: List files in the repository\n        run: ls ${{ github.workspace }}\n      - run: echo \"  This job's status is ${{ job.status }}.\"\n```\n\n配置文件有很多术语在后面的笔记中讲解，对于上面的配置简单的解释下：\n\n```yaml\n# 这个工作流的名字: lint\nname: lint\n# 在分支push的时候触发\non: [push]\n# 工作列表，例子里只做一个eslint工作\njobs:\n  # 这一步工作名叫做eslint\n  eslint:\n    # 代码执行在ubuntu-latest的宿主里，注：ubuntu-latest是github提供的免费的宿主。\n    runs-on: ubuntu-latest\n    # 执行哪些代码\n    steps:\n      # 执行一个普通的shell脚本，就是 echo '巴拉巴拉巴拉巴拉一段话'，这段话里的${{github.event_name}}\n      # 是一个变量，这个变量由actions上下文提供，望文生义，event_name是事件名称的意思\n      - run: echo \"  The job was automatically triggered by a ${{ github.event_name }} event.\"\n      # 为这一步脚本定一个名字，叫做 巴拉巴拉\n      - name: Check out repository code\n        # 我们使用别人提供的封装好的脚本，这里的意思是使用官方提供的 actions/checkout 的脚本的v3版本\n        uses: actions/checkout@v3\n      # 又定义一个名字，叫做 巴拉巴拉\n      - name: List files in the repository\n        # 再一次运行自定义的脚本，列出目录结构，这儿又使用了一个变量\n        run: ls ${{ github.workspace }}\n      # 最后再执行一个自定义脚本，输出一段话，包含了当前工作的执行状态\n      - run: echo \"  This job's status is ${{ job.status }}.\"\n```\n\n而后，将代码推送到 github 仓库，我们进入仓库页面，点击 Actions 面板，看到 workflows 记录，进入详情看到类似面板。\n\n![](https://cdn.jsdelivr.net/gh/taoliujun/taoliujun.github.io/assets/202306281119773.png)\n\n这个面板展示了 lint.yml 这个工作流的执行状态，它列出所有的工作及其状态以及执行时间。\n\n![](https://cdn.jsdelivr.net/gh/taoliujun/taoliujun.github.io/assets/202306281120264.png)\n\n进入工作流的执行详情，可以看到每个工作的每一步脚本的详细执行过程和输出结果，就不一一表述了，后续会讲到。\n","source":"_posts/Github Actions/1. Quickstart.md","raw":"---\ntitle: 1. Quickstart - GitHub Actions\ntitle_url: github-actions-quickStart\ndate: 2022-07-04\ntags:\n  - github actions\n  - ci\ncategories:\n  - 架构\n---\n\n官方文档：https://docs.github.com/en/actions/quickstart\n\n本文里，因为还没有讲术语的意思，所以用中文描述了基本的执行过程，后续的文章里会用原术语来表达，以防理解不一。\n\n文档说，只要有仓库，就可以使用 Actions。\n\n依葫芦画瓢，在本地创建 `.github/workflows` 目录，在目录里创建任意文件，以.yml 结尾，我创建了 `lint.yml`：\n\n```yaml\nname: lint\non: [push]\njobs:\n  eslint:\n    runs-on: ubuntu-latest\n    steps:\n      - run: echo \"The job was automatically triggered by a ${{ github.event_name }} event.\"\n      - name: Check out repository code\n        uses: actions/checkout@v3\n      - name: List files in the repository\n        run: ls ${{ github.workspace }}\n      - run: echo \"  This job's status is ${{ job.status }}.\"\n```\n\n配置文件有很多术语在后面的笔记中讲解，对于上面的配置简单的解释下：\n\n```yaml\n# 这个工作流的名字: lint\nname: lint\n# 在分支push的时候触发\non: [push]\n# 工作列表，例子里只做一个eslint工作\njobs:\n  # 这一步工作名叫做eslint\n  eslint:\n    # 代码执行在ubuntu-latest的宿主里，注：ubuntu-latest是github提供的免费的宿主。\n    runs-on: ubuntu-latest\n    # 执行哪些代码\n    steps:\n      # 执行一个普通的shell脚本，就是 echo '巴拉巴拉巴拉巴拉一段话'，这段话里的${{github.event_name}}\n      # 是一个变量，这个变量由actions上下文提供，望文生义，event_name是事件名称的意思\n      - run: echo \"  The job was automatically triggered by a ${{ github.event_name }} event.\"\n      # 为这一步脚本定一个名字，叫做 巴拉巴拉\n      - name: Check out repository code\n        # 我们使用别人提供的封装好的脚本，这里的意思是使用官方提供的 actions/checkout 的脚本的v3版本\n        uses: actions/checkout@v3\n      # 又定义一个名字，叫做 巴拉巴拉\n      - name: List files in the repository\n        # 再一次运行自定义的脚本，列出目录结构，这儿又使用了一个变量\n        run: ls ${{ github.workspace }}\n      # 最后再执行一个自定义脚本，输出一段话，包含了当前工作的执行状态\n      - run: echo \"  This job's status is ${{ job.status }}.\"\n```\n\n而后，将代码推送到 github 仓库，我们进入仓库页面，点击 Actions 面板，看到 workflows 记录，进入详情看到类似面板。\n\n![](https://cdn.jsdelivr.net/gh/taoliujun/taoliujun.github.io/assets/202306281119773.png)\n\n这个面板展示了 lint.yml 这个工作流的执行状态，它列出所有的工作及其状态以及执行时间。\n\n![](https://cdn.jsdelivr.net/gh/taoliujun/taoliujun.github.io/assets/202306281120264.png)\n\n进入工作流的执行详情，可以看到每个工作的每一步脚本的详细执行过程和输出结果，就不一一表述了，后续会讲到。\n","slug":"Github Actions/1. Quickstart","published":1,"updated":"2023-07-05T05:32:48.169Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cljpap0290001xbrrhwwa0hdt","content":"<p>官方文档：<a href=\"https://docs.github.com/en/actions/quickstart\">https://docs.github.com/en/actions/quickstart</a></p>\n<p>本文里，因为还没有讲术语的意思，所以用中文描述了基本的执行过程，后续的文章里会用原术语来表达，以防理解不一。</p>\n<p>文档说，只要有仓库，就可以使用 Actions。</p>\n<p>依葫芦画瓢，在本地创建 <code>.github/workflows</code> 目录，在目录里创建任意文件，以.yml 结尾，我创建了 <code>lint.yml</code>：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">lint</span></span><br><span class=\"line\"><span class=\"attr\">on:</span> [<span class=\"string\">push</span>]</span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">eslint:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">run:</span> <span class=\"string\">echo</span> <span class=\"string\">&quot;The job was automatically triggered by a $<span class=\"template-variable\">&#123;&#123; github.event_name &#125;&#125;</span> event.&quot;</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Check</span> <span class=\"string\">out</span> <span class=\"string\">repository</span> <span class=\"string\">code</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v3</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">List</span> <span class=\"string\">files</span> <span class=\"string\">in</span> <span class=\"string\">the</span> <span class=\"string\">repository</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">ls</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">github.workspace</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">run:</span> <span class=\"string\">echo</span> <span class=\"string\">&quot;  This job&#x27;s status is $<span class=\"template-variable\">&#123;&#123; job.status &#125;&#125;</span>.&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>配置文件有很多术语在后面的笔记中讲解，对于上面的配置简单的解释下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 这个工作流的名字: lint</span></span><br><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">lint</span></span><br><span class=\"line\"><span class=\"comment\"># 在分支push的时候触发</span></span><br><span class=\"line\"><span class=\"attr\">on:</span> [<span class=\"string\">push</span>]</span><br><span class=\"line\"><span class=\"comment\"># 工作列表，例子里只做一个eslint工作</span></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"comment\"># 这一步工作名叫做eslint</span></span><br><span class=\"line\">  <span class=\"attr\">eslint:</span></span><br><span class=\"line\">    <span class=\"comment\"># 代码执行在ubuntu-latest的宿主里，注：ubuntu-latest是github提供的免费的宿主。</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"comment\"># 执行哪些代码</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"comment\"># 执行一个普通的shell脚本，就是 echo &#x27;巴拉巴拉巴拉巴拉一段话&#x27;，这段话里的$&#123;&#123;github.event_name&#125;&#125;</span></span><br><span class=\"line\">      <span class=\"comment\"># 是一个变量，这个变量由actions上下文提供，望文生义，event_name是事件名称的意思</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">run:</span> <span class=\"string\">echo</span> <span class=\"string\">&quot;  The job was automatically triggered by a $<span class=\"template-variable\">&#123;&#123; github.event_name &#125;&#125;</span> event.&quot;</span></span><br><span class=\"line\">      <span class=\"comment\"># 为这一步脚本定一个名字，叫做 巴拉巴拉</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Check</span> <span class=\"string\">out</span> <span class=\"string\">repository</span> <span class=\"string\">code</span></span><br><span class=\"line\">        <span class=\"comment\"># 我们使用别人提供的封装好的脚本，这里的意思是使用官方提供的 actions/checkout 的脚本的v3版本</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v3</span></span><br><span class=\"line\">      <span class=\"comment\"># 又定义一个名字，叫做 巴拉巴拉</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">List</span> <span class=\"string\">files</span> <span class=\"string\">in</span> <span class=\"string\">the</span> <span class=\"string\">repository</span></span><br><span class=\"line\">        <span class=\"comment\"># 再一次运行自定义的脚本，列出目录结构，这儿又使用了一个变量</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">ls</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">github.workspace</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">      <span class=\"comment\"># 最后再执行一个自定义脚本，输出一段话，包含了当前工作的执行状态</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">run:</span> <span class=\"string\">echo</span> <span class=\"string\">&quot;  This job&#x27;s status is $<span class=\"template-variable\">&#123;&#123; job.status &#125;&#125;</span>.&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>而后，将代码推送到 github 仓库，我们进入仓库页面，点击 Actions 面板，看到 workflows 记录，进入详情看到类似面板。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/taoliujun/taoliujun.github.io/assets/202306281119773.png\"></p>\n<p>这个面板展示了 lint.yml 这个工作流的执行状态，它列出所有的工作及其状态以及执行时间。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/taoliujun/taoliujun.github.io/assets/202306281120264.png\"></p>\n<p>进入工作流的执行详情，可以看到每个工作的每一步脚本的详细执行过程和输出结果，就不一一表述了，后续会讲到。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>官方文档：<a href=\"https://docs.github.com/en/actions/quickstart\">https://docs.github.com/en/actions/quickstart</a></p>\n<p>本文里，因为还没有讲术语的意思，所以用中文描述了基本的执行过程，后续的文章里会用原术语来表达，以防理解不一。</p>\n<p>文档说，只要有仓库，就可以使用 Actions。</p>\n<p>依葫芦画瓢，在本地创建 <code>.github/workflows</code> 目录，在目录里创建任意文件，以.yml 结尾，我创建了 <code>lint.yml</code>：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">lint</span></span><br><span class=\"line\"><span class=\"attr\">on:</span> [<span class=\"string\">push</span>]</span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">eslint:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">run:</span> <span class=\"string\">echo</span> <span class=\"string\">&quot;The job was automatically triggered by a $<span class=\"template-variable\">&#123;&#123; github.event_name &#125;&#125;</span> event.&quot;</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Check</span> <span class=\"string\">out</span> <span class=\"string\">repository</span> <span class=\"string\">code</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v3</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">List</span> <span class=\"string\">files</span> <span class=\"string\">in</span> <span class=\"string\">the</span> <span class=\"string\">repository</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">ls</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">github.workspace</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">run:</span> <span class=\"string\">echo</span> <span class=\"string\">&quot;  This job&#x27;s status is $<span class=\"template-variable\">&#123;&#123; job.status &#125;&#125;</span>.&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>配置文件有很多术语在后面的笔记中讲解，对于上面的配置简单的解释下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 这个工作流的名字: lint</span></span><br><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">lint</span></span><br><span class=\"line\"><span class=\"comment\"># 在分支push的时候触发</span></span><br><span class=\"line\"><span class=\"attr\">on:</span> [<span class=\"string\">push</span>]</span><br><span class=\"line\"><span class=\"comment\"># 工作列表，例子里只做一个eslint工作</span></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"comment\"># 这一步工作名叫做eslint</span></span><br><span class=\"line\">  <span class=\"attr\">eslint:</span></span><br><span class=\"line\">    <span class=\"comment\"># 代码执行在ubuntu-latest的宿主里，注：ubuntu-latest是github提供的免费的宿主。</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"comment\"># 执行哪些代码</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"comment\"># 执行一个普通的shell脚本，就是 echo &#x27;巴拉巴拉巴拉巴拉一段话&#x27;，这段话里的$&#123;&#123;github.event_name&#125;&#125;</span></span><br><span class=\"line\">      <span class=\"comment\"># 是一个变量，这个变量由actions上下文提供，望文生义，event_name是事件名称的意思</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">run:</span> <span class=\"string\">echo</span> <span class=\"string\">&quot;  The job was automatically triggered by a $<span class=\"template-variable\">&#123;&#123; github.event_name &#125;&#125;</span> event.&quot;</span></span><br><span class=\"line\">      <span class=\"comment\"># 为这一步脚本定一个名字，叫做 巴拉巴拉</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Check</span> <span class=\"string\">out</span> <span class=\"string\">repository</span> <span class=\"string\">code</span></span><br><span class=\"line\">        <span class=\"comment\"># 我们使用别人提供的封装好的脚本，这里的意思是使用官方提供的 actions/checkout 的脚本的v3版本</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v3</span></span><br><span class=\"line\">      <span class=\"comment\"># 又定义一个名字，叫做 巴拉巴拉</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">List</span> <span class=\"string\">files</span> <span class=\"string\">in</span> <span class=\"string\">the</span> <span class=\"string\">repository</span></span><br><span class=\"line\">        <span class=\"comment\"># 再一次运行自定义的脚本，列出目录结构，这儿又使用了一个变量</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">ls</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">github.workspace</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">      <span class=\"comment\"># 最后再执行一个自定义脚本，输出一段话，包含了当前工作的执行状态</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">run:</span> <span class=\"string\">echo</span> <span class=\"string\">&quot;  This job&#x27;s status is $<span class=\"template-variable\">&#123;&#123; job.status &#125;&#125;</span>.&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>而后，将代码推送到 github 仓库，我们进入仓库页面，点击 Actions 面板，看到 workflows 记录，进入详情看到类似面板。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/taoliujun/taoliujun.github.io/assets/202306281119773.png\"></p>\n<p>这个面板展示了 lint.yml 这个工作流的执行状态，它列出所有的工作及其状态以及执行时间。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/taoliujun/taoliujun.github.io/assets/202306281120264.png\"></p>\n<p>进入工作流的执行详情，可以看到每个工作的每一步脚本的详细执行过程和输出结果，就不一一表述了，后续会讲到。</p>\n"},{"title":"5. Using jobs - GitHub Actions","title_url":"github-actions-using-jobs","date":"2022-07-07T16:00:00.000Z","_content":"\n官方文档：https://docs.github.com/en/actions/using-jobs/using-jobs-in-a-workflow\n\n## 使用 jobs\n\n- jobs 组成 workflow，jobs 默认并行执行，使用 needs 管理依赖执行。\n- job id 命名要唯一，由字母、数字、-、\\_组成。\n\n## 使用 runner\n\n可以使用 github 提供的机器，也可以自建机器，没啥其他重要的。\n\n## 执行条件\n\n执行 if 表达式的结果，决定是否执行本 job。举例：\n\n```yaml\nname: example-workflow\non: [push]\njobs:\n  production-deploy:\n    if: github.repository == 'octo-org/octo-repo-prod'\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: \"14\"\n      - run: npm install -g bats\n```\n\n## 矩阵\n\n晦涩的词语，理解为遍历变量创建重复执行的 job，如下，该 job 将执行 6 次，在两个 runner 上分别执行 3 种 node 版本的 job。\n\n```yaml\njobs:\n  example_matrix:\n    strategy:\n      matrix:\n        os: [ubuntu-22.04, ubuntu-20.04]\n        version: [10, 12, 14]\n    runs-on: ${{ matrix.os }}\n    steps:\n      - uses: actions/setup-node@v3\n        with:\n          node-version: ${{ matrix.version }}\n```\n\n也可以使用上下文创建 matrix 变量。\n\nmatrix 还支持自身简单的覆盖扩展，参考文档即可。\n\n## 并发策略\n\n同时只能运行一个符合策略的 job 或 workflow，并决定是否终止同组的 job 或 workflow。\n\n## 环境\n\n无\n\n## 容器\n\n暂时用不到，无\n\n## 默认值\n\n可以在 workflow 和 job 级别分别设置默认值，目前支持设置`shell`、`working-directory`。\n","source":"_posts/Github Actions/5. Using jobs.md","raw":"---\ntitle: 5. Using jobs - GitHub Actions\ntitle_url: github-actions-using-jobs\ndate: 2022-07-08\ntags:\n  - github actions\n  - ci\ncategories:\n  - 架构\n---\n\n官方文档：https://docs.github.com/en/actions/using-jobs/using-jobs-in-a-workflow\n\n## 使用 jobs\n\n- jobs 组成 workflow，jobs 默认并行执行，使用 needs 管理依赖执行。\n- job id 命名要唯一，由字母、数字、-、\\_组成。\n\n## 使用 runner\n\n可以使用 github 提供的机器，也可以自建机器，没啥其他重要的。\n\n## 执行条件\n\n执行 if 表达式的结果，决定是否执行本 job。举例：\n\n```yaml\nname: example-workflow\non: [push]\njobs:\n  production-deploy:\n    if: github.repository == 'octo-org/octo-repo-prod'\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: \"14\"\n      - run: npm install -g bats\n```\n\n## 矩阵\n\n晦涩的词语，理解为遍历变量创建重复执行的 job，如下，该 job 将执行 6 次，在两个 runner 上分别执行 3 种 node 版本的 job。\n\n```yaml\njobs:\n  example_matrix:\n    strategy:\n      matrix:\n        os: [ubuntu-22.04, ubuntu-20.04]\n        version: [10, 12, 14]\n    runs-on: ${{ matrix.os }}\n    steps:\n      - uses: actions/setup-node@v3\n        with:\n          node-version: ${{ matrix.version }}\n```\n\n也可以使用上下文创建 matrix 变量。\n\nmatrix 还支持自身简单的覆盖扩展，参考文档即可。\n\n## 并发策略\n\n同时只能运行一个符合策略的 job 或 workflow，并决定是否终止同组的 job 或 workflow。\n\n## 环境\n\n无\n\n## 容器\n\n暂时用不到，无\n\n## 默认值\n\n可以在 workflow 和 job 级别分别设置默认值，目前支持设置`shell`、`working-directory`。\n","slug":"Github Actions/5. Using jobs","published":1,"updated":"2023-07-05T05:38:38.222Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cljpap02a0003xbrrh0tkbbvj","content":"<p>官方文档：<a href=\"https://docs.github.com/en/actions/using-jobs/using-jobs-in-a-workflow\">https://docs.github.com/en/actions/using-jobs/using-jobs-in-a-workflow</a></p>\n<h2 id=\"使用-jobs\"><a href=\"#使用-jobs\" class=\"headerlink\" title=\"使用 jobs\"></a>使用 jobs</h2><ul>\n<li>jobs 组成 workflow，jobs 默认并行执行，使用 needs 管理依赖执行。</li>\n<li>job id 命名要唯一，由字母、数字、-、_组成。</li>\n</ul>\n<h2 id=\"使用-runner\"><a href=\"#使用-runner\" class=\"headerlink\" title=\"使用 runner\"></a>使用 runner</h2><p>可以使用 github 提供的机器，也可以自建机器，没啥其他重要的。</p>\n<h2 id=\"执行条件\"><a href=\"#执行条件\" class=\"headerlink\" title=\"执行条件\"></a>执行条件</h2><p>执行 if 表达式的结果，决定是否执行本 job。举例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">example-workflow</span></span><br><span class=\"line\"><span class=\"attr\">on:</span> [<span class=\"string\">push</span>]</span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">production-deploy:</span></span><br><span class=\"line\">    <span class=\"attr\">if:</span> <span class=\"string\">github.repository</span> <span class=\"string\">==</span> <span class=\"string\">&#x27;octo-org/octo-repo-prod&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v3</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v3</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">node-version:</span> <span class=\"string\">&quot;14&quot;</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">run:</span> <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">-g</span> <span class=\"string\">bats</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"矩阵\"><a href=\"#矩阵\" class=\"headerlink\" title=\"矩阵\"></a>矩阵</h2><p>晦涩的词语，理解为遍历变量创建重复执行的 job，如下，该 job 将执行 6 次，在两个 runner 上分别执行 3 种 node 版本的 job。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">example_matrix:</span></span><br><span class=\"line\">    <span class=\"attr\">strategy:</span></span><br><span class=\"line\">      <span class=\"attr\">matrix:</span></span><br><span class=\"line\">        <span class=\"attr\">os:</span> [<span class=\"string\">ubuntu-22.04</span>, <span class=\"string\">ubuntu-20.04</span>]</span><br><span class=\"line\">        <span class=\"attr\">version:</span> [<span class=\"number\">10</span>, <span class=\"number\">12</span>, <span class=\"number\">14</span>]</span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">matrix.os</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v3</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">node-version:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">matrix.version</span> <span class=\"string\">&#125;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>也可以使用上下文创建 matrix 变量。</p>\n<p>matrix 还支持自身简单的覆盖扩展，参考文档即可。</p>\n<h2 id=\"并发策略\"><a href=\"#并发策略\" class=\"headerlink\" title=\"并发策略\"></a>并发策略</h2><p>同时只能运行一个符合策略的 job 或 workflow，并决定是否终止同组的 job 或 workflow。</p>\n<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><p>无</p>\n<h2 id=\"容器\"><a href=\"#容器\" class=\"headerlink\" title=\"容器\"></a>容器</h2><p>暂时用不到，无</p>\n<h2 id=\"默认值\"><a href=\"#默认值\" class=\"headerlink\" title=\"默认值\"></a>默认值</h2><p>可以在 workflow 和 job 级别分别设置默认值，目前支持设置<code>shell</code>、<code>working-directory</code>。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>官方文档：<a href=\"https://docs.github.com/en/actions/using-jobs/using-jobs-in-a-workflow\">https://docs.github.com/en/actions/using-jobs/using-jobs-in-a-workflow</a></p>\n<h2 id=\"使用-jobs\"><a href=\"#使用-jobs\" class=\"headerlink\" title=\"使用 jobs\"></a>使用 jobs</h2><ul>\n<li>jobs 组成 workflow，jobs 默认并行执行，使用 needs 管理依赖执行。</li>\n<li>job id 命名要唯一，由字母、数字、-、_组成。</li>\n</ul>\n<h2 id=\"使用-runner\"><a href=\"#使用-runner\" class=\"headerlink\" title=\"使用 runner\"></a>使用 runner</h2><p>可以使用 github 提供的机器，也可以自建机器，没啥其他重要的。</p>\n<h2 id=\"执行条件\"><a href=\"#执行条件\" class=\"headerlink\" title=\"执行条件\"></a>执行条件</h2><p>执行 if 表达式的结果，决定是否执行本 job。举例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">example-workflow</span></span><br><span class=\"line\"><span class=\"attr\">on:</span> [<span class=\"string\">push</span>]</span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">production-deploy:</span></span><br><span class=\"line\">    <span class=\"attr\">if:</span> <span class=\"string\">github.repository</span> <span class=\"string\">==</span> <span class=\"string\">&#x27;octo-org/octo-repo-prod&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v3</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v3</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">node-version:</span> <span class=\"string\">&quot;14&quot;</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">run:</span> <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">-g</span> <span class=\"string\">bats</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"矩阵\"><a href=\"#矩阵\" class=\"headerlink\" title=\"矩阵\"></a>矩阵</h2><p>晦涩的词语，理解为遍历变量创建重复执行的 job，如下，该 job 将执行 6 次，在两个 runner 上分别执行 3 种 node 版本的 job。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">example_matrix:</span></span><br><span class=\"line\">    <span class=\"attr\">strategy:</span></span><br><span class=\"line\">      <span class=\"attr\">matrix:</span></span><br><span class=\"line\">        <span class=\"attr\">os:</span> [<span class=\"string\">ubuntu-22.04</span>, <span class=\"string\">ubuntu-20.04</span>]</span><br><span class=\"line\">        <span class=\"attr\">version:</span> [<span class=\"number\">10</span>, <span class=\"number\">12</span>, <span class=\"number\">14</span>]</span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">matrix.os</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v3</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">node-version:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">matrix.version</span> <span class=\"string\">&#125;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>也可以使用上下文创建 matrix 变量。</p>\n<p>matrix 还支持自身简单的覆盖扩展，参考文档即可。</p>\n<h2 id=\"并发策略\"><a href=\"#并发策略\" class=\"headerlink\" title=\"并发策略\"></a>并发策略</h2><p>同时只能运行一个符合策略的 job 或 workflow，并决定是否终止同组的 job 或 workflow。</p>\n<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><p>无</p>\n<h2 id=\"容器\"><a href=\"#容器\" class=\"headerlink\" title=\"容器\"></a>容器</h2><p>暂时用不到，无</p>\n<h2 id=\"默认值\"><a href=\"#默认值\" class=\"headerlink\" title=\"默认值\"></a>默认值</h2><p>可以在 workflow 和 job 级别分别设置默认值，目前支持设置<code>shell</code>、<code>working-directory</code>。</p>\n"},{"title":"4. Using workflows - GitHub Actions","title_url":"github-actions-using-workflows","date":"2022-07-06T16:00:00.000Z","_content":"\n官方文档：https://docs.github.com/en/actions/using-workflows/about-workflows\n\n原文很长，但随着对 Github Actions 的了解，笔记也会越来越短。\n\n## 介绍\n\n更详细介绍了 workflow 的构成，没啥特别重要点。\n\n## 触发\n\n再次复习下触发的几种情况：github、计划任务、手动。\n\n### Branches 过滤\n\n可以通过 branches 、branches-ignore 过滤或排除分支，支持 glob patterns。还可以在 branches 前面用!修饰为“非”。比如：\n\n```yaml\non:\n  pull_request:\n    branches:\n      - \"releases/**\"\n      - \"!releases/**-alpha\"\n```\n\n### Tags 过滤\n\n对于 tags 的过滤处理和 branches 是一致的，只是修改了名字为 tags、tags-ignore。\n\n### Types 过滤\n\n可以理解为事件的具体行为，比如 issue_commot 事件的 created 行为。\n\n### Paths 过滤\n\n文件路径过滤也是基本功能了，使用 paths、paths-ignore 处理，举例：\n\n```yaml\non:\n  push:\n    paths:\n      - '**.js\n```\n\n注意，一些过滤场景并不允许 a 和 a-ignore 一起使用，需要注意的。\n\n### 其他\n\n- 还可以对 input 进行参数过滤，以满足更丰富的触发条件配置。\n- 对 github 的属性，如 pull request 发起人的名字进行过滤。\n\n## 事件\n\n列举了常见的 30 几种事件，大部分事件包含多种行为。\n\n## 语法\n\n涵盖了 workflow 的大部分配置项。\n\n## 命令行\n\nactions 如何和 bash 交换变量，使用 actions/toolkit 可以简单做到。\n\n## 复用\n\n注意复用的上下文\n\n## 缓存\n\n可以缓存 npm 的依赖以节省 install 的时间，注意缓存的跨分支适用策略。\n","source":"_posts/Github Actions/4. Using workflows.md","raw":"---\ntitle: 4. Using workflows - GitHub Actions\ntitle_url: github-actions-using-workflows\ndate: 2022-07-07\ntags:\n  - github actions\n  - ci\ncategories:\n  - 架构\n---\n\n官方文档：https://docs.github.com/en/actions/using-workflows/about-workflows\n\n原文很长，但随着对 Github Actions 的了解，笔记也会越来越短。\n\n## 介绍\n\n更详细介绍了 workflow 的构成，没啥特别重要点。\n\n## 触发\n\n再次复习下触发的几种情况：github、计划任务、手动。\n\n### Branches 过滤\n\n可以通过 branches 、branches-ignore 过滤或排除分支，支持 glob patterns。还可以在 branches 前面用!修饰为“非”。比如：\n\n```yaml\non:\n  pull_request:\n    branches:\n      - \"releases/**\"\n      - \"!releases/**-alpha\"\n```\n\n### Tags 过滤\n\n对于 tags 的过滤处理和 branches 是一致的，只是修改了名字为 tags、tags-ignore。\n\n### Types 过滤\n\n可以理解为事件的具体行为，比如 issue_commot 事件的 created 行为。\n\n### Paths 过滤\n\n文件路径过滤也是基本功能了，使用 paths、paths-ignore 处理，举例：\n\n```yaml\non:\n  push:\n    paths:\n      - '**.js\n```\n\n注意，一些过滤场景并不允许 a 和 a-ignore 一起使用，需要注意的。\n\n### 其他\n\n- 还可以对 input 进行参数过滤，以满足更丰富的触发条件配置。\n- 对 github 的属性，如 pull request 发起人的名字进行过滤。\n\n## 事件\n\n列举了常见的 30 几种事件，大部分事件包含多种行为。\n\n## 语法\n\n涵盖了 workflow 的大部分配置项。\n\n## 命令行\n\nactions 如何和 bash 交换变量，使用 actions/toolkit 可以简单做到。\n\n## 复用\n\n注意复用的上下文\n\n## 缓存\n\n可以缓存 npm 的依赖以节省 install 的时间，注意缓存的跨分支适用策略。\n","slug":"Github Actions/4. Using workflows","published":1,"updated":"2023-07-05T05:37:54.883Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cljpap02c0005xbrre1gg0q6s","content":"<p>官方文档：<a href=\"https://docs.github.com/en/actions/using-workflows/about-workflows\">https://docs.github.com/en/actions/using-workflows/about-workflows</a></p>\n<p>原文很长，但随着对 Github Actions 的了解，笔记也会越来越短。</p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>更详细介绍了 workflow 的构成，没啥特别重要点。</p>\n<h2 id=\"触发\"><a href=\"#触发\" class=\"headerlink\" title=\"触发\"></a>触发</h2><p>再次复习下触发的几种情况：github、计划任务、手动。</p>\n<h3 id=\"Branches-过滤\"><a href=\"#Branches-过滤\" class=\"headerlink\" title=\"Branches 过滤\"></a>Branches 过滤</h3><p>可以通过 branches 、branches-ignore 过滤或排除分支，支持 glob patterns。还可以在 branches 前面用!修饰为“非”。比如：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">pull_request:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;releases/**&quot;</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;!releases/**-alpha&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Tags-过滤\"><a href=\"#Tags-过滤\" class=\"headerlink\" title=\"Tags 过滤\"></a>Tags 过滤</h3><p>对于 tags 的过滤处理和 branches 是一致的，只是修改了名字为 tags、tags-ignore。</p>\n<h3 id=\"Types-过滤\"><a href=\"#Types-过滤\" class=\"headerlink\" title=\"Types 过滤\"></a>Types 过滤</h3><p>可以理解为事件的具体行为，比如 issue_commot 事件的 created 行为。</p>\n<h3 id=\"Paths-过滤\"><a href=\"#Paths-过滤\" class=\"headerlink\" title=\"Paths 过滤\"></a>Paths 过滤</h3><p>文件路径过滤也是基本功能了，使用 paths、paths-ignore 处理，举例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">paths:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&#x27;**.js</span></span><br></pre></td></tr></table></figure>\n\n<p>注意，一些过滤场景并不允许 a 和 a-ignore 一起使用，需要注意的。</p>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><ul>\n<li>还可以对 input 进行参数过滤，以满足更丰富的触发条件配置。</li>\n<li>对 github 的属性，如 pull request 发起人的名字进行过滤。</li>\n</ul>\n<h2 id=\"事件\"><a href=\"#事件\" class=\"headerlink\" title=\"事件\"></a>事件</h2><p>列举了常见的 30 几种事件，大部分事件包含多种行为。</p>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><p>涵盖了 workflow 的大部分配置项。</p>\n<h2 id=\"命令行\"><a href=\"#命令行\" class=\"headerlink\" title=\"命令行\"></a>命令行</h2><p>actions 如何和 bash 交换变量，使用 actions&#x2F;toolkit 可以简单做到。</p>\n<h2 id=\"复用\"><a href=\"#复用\" class=\"headerlink\" title=\"复用\"></a>复用</h2><p>注意复用的上下文</p>\n<h2 id=\"缓存\"><a href=\"#缓存\" class=\"headerlink\" title=\"缓存\"></a>缓存</h2><p>可以缓存 npm 的依赖以节省 install 的时间，注意缓存的跨分支适用策略。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>官方文档：<a href=\"https://docs.github.com/en/actions/using-workflows/about-workflows\">https://docs.github.com/en/actions/using-workflows/about-workflows</a></p>\n<p>原文很长，但随着对 Github Actions 的了解，笔记也会越来越短。</p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>更详细介绍了 workflow 的构成，没啥特别重要点。</p>\n<h2 id=\"触发\"><a href=\"#触发\" class=\"headerlink\" title=\"触发\"></a>触发</h2><p>再次复习下触发的几种情况：github、计划任务、手动。</p>\n<h3 id=\"Branches-过滤\"><a href=\"#Branches-过滤\" class=\"headerlink\" title=\"Branches 过滤\"></a>Branches 过滤</h3><p>可以通过 branches 、branches-ignore 过滤或排除分支，支持 glob patterns。还可以在 branches 前面用!修饰为“非”。比如：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">pull_request:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;releases/**&quot;</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;!releases/**-alpha&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Tags-过滤\"><a href=\"#Tags-过滤\" class=\"headerlink\" title=\"Tags 过滤\"></a>Tags 过滤</h3><p>对于 tags 的过滤处理和 branches 是一致的，只是修改了名字为 tags、tags-ignore。</p>\n<h3 id=\"Types-过滤\"><a href=\"#Types-过滤\" class=\"headerlink\" title=\"Types 过滤\"></a>Types 过滤</h3><p>可以理解为事件的具体行为，比如 issue_commot 事件的 created 行为。</p>\n<h3 id=\"Paths-过滤\"><a href=\"#Paths-过滤\" class=\"headerlink\" title=\"Paths 过滤\"></a>Paths 过滤</h3><p>文件路径过滤也是基本功能了，使用 paths、paths-ignore 处理，举例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">paths:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&#x27;**.js</span></span><br></pre></td></tr></table></figure>\n\n<p>注意，一些过滤场景并不允许 a 和 a-ignore 一起使用，需要注意的。</p>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><ul>\n<li>还可以对 input 进行参数过滤，以满足更丰富的触发条件配置。</li>\n<li>对 github 的属性，如 pull request 发起人的名字进行过滤。</li>\n</ul>\n<h2 id=\"事件\"><a href=\"#事件\" class=\"headerlink\" title=\"事件\"></a>事件</h2><p>列举了常见的 30 几种事件，大部分事件包含多种行为。</p>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><p>涵盖了 workflow 的大部分配置项。</p>\n<h2 id=\"命令行\"><a href=\"#命令行\" class=\"headerlink\" title=\"命令行\"></a>命令行</h2><p>actions 如何和 bash 交换变量，使用 actions&#x2F;toolkit 可以简单做到。</p>\n<h2 id=\"复用\"><a href=\"#复用\" class=\"headerlink\" title=\"复用\"></a>复用</h2><p>注意复用的上下文</p>\n<h2 id=\"缓存\"><a href=\"#缓存\" class=\"headerlink\" title=\"缓存\"></a>缓存</h2><p>可以缓存 npm 的依赖以节省 install 的时间，注意缓存的跨分支适用策略。</p>\n"},{"title":"3. Examples - GitHub Actions","title_url":"github-actions-examples","date":"2022-07-05T16:00:00.000Z","_content":"\n官方文档：https://docs.github.com/en/actions/examples/using-scripts-to-test-your-code-on-a-runner\n\n官方描述了 3 个例子，用来检测文件中的 broken，我读书少，就依葫芦画瓢写一个 eslint 检测增量文件的功能，完成以下功能：\n\n- pull_request 触发 workflow。\n- 使用 eslint 检查 pull request 的增量文件。\n- 如果检查失败，回复失败的文件和内容。\n- 如果检查成功，回复\"+LGTM by eslint\"。\n\n例子中一些术语或属性是第一次出现，先不要管，简单查阅下文档先完成功能，后续文章再研究它们。\n\n## 准备工作\n\n- `package.json`中存在`eslint`依赖。\n- 存在配置文件 `.eslintrc.js`。\n\n## 基础的配置\n\n写一个简单的 Job 让它先跑起来：\n\n```yaml\nname: pull_request\non: pull_request\njobs:\n  eslint:\n    runs-on: ubuntu-latest\n    steps:\n      - run: echo \"i am eslint\"\n```\n\n##增量检查\n\n列出 pull request 的修改、新增的 js、ts 文件，先不用管 eslint，只打印出这些文件。\n\nTODO\n\n**等我学习了后续的知识，再来补充这个例子！！！**\n\n**等我学习了后续的知识，再来补充这个例子！！！**\n\n**等我学习了后续的知识，再来补充这个例子！！！**\n","source":"_posts/Github Actions/3. Examples.md","raw":"---\ntitle: 3. Examples - GitHub Actions\ntitle_url: github-actions-examples\ndate: 2022-07-06\ntags:\n  - github actions\n  - ci\ncategories:\n  - 架构\n---\n\n官方文档：https://docs.github.com/en/actions/examples/using-scripts-to-test-your-code-on-a-runner\n\n官方描述了 3 个例子，用来检测文件中的 broken，我读书少，就依葫芦画瓢写一个 eslint 检测增量文件的功能，完成以下功能：\n\n- pull_request 触发 workflow。\n- 使用 eslint 检查 pull request 的增量文件。\n- 如果检查失败，回复失败的文件和内容。\n- 如果检查成功，回复\"+LGTM by eslint\"。\n\n例子中一些术语或属性是第一次出现，先不要管，简单查阅下文档先完成功能，后续文章再研究它们。\n\n## 准备工作\n\n- `package.json`中存在`eslint`依赖。\n- 存在配置文件 `.eslintrc.js`。\n\n## 基础的配置\n\n写一个简单的 Job 让它先跑起来：\n\n```yaml\nname: pull_request\non: pull_request\njobs:\n  eslint:\n    runs-on: ubuntu-latest\n    steps:\n      - run: echo \"i am eslint\"\n```\n\n##增量检查\n\n列出 pull request 的修改、新增的 js、ts 文件，先不用管 eslint，只打印出这些文件。\n\nTODO\n\n**等我学习了后续的知识，再来补充这个例子！！！**\n\n**等我学习了后续的知识，再来补充这个例子！！！**\n\n**等我学习了后续的知识，再来补充这个例子！！！**\n","slug":"Github Actions/3. Examples","published":1,"updated":"2023-07-05T05:37:08.938Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cljpap02c0008xbrrgcou02ym","content":"<p>官方文档：<a href=\"https://docs.github.com/en/actions/examples/using-scripts-to-test-your-code-on-a-runner\">https://docs.github.com/en/actions/examples/using-scripts-to-test-your-code-on-a-runner</a></p>\n<p>官方描述了 3 个例子，用来检测文件中的 broken，我读书少，就依葫芦画瓢写一个 eslint 检测增量文件的功能，完成以下功能：</p>\n<ul>\n<li>pull_request 触发 workflow。</li>\n<li>使用 eslint 检查 pull request 的增量文件。</li>\n<li>如果检查失败，回复失败的文件和内容。</li>\n<li>如果检查成功，回复”+LGTM by eslint”。</li>\n</ul>\n<p>例子中一些术语或属性是第一次出现，先不要管，简单查阅下文档先完成功能，后续文章再研究它们。</p>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><ul>\n<li><code>package.json</code>中存在<code>eslint</code>依赖。</li>\n<li>存在配置文件 <code>.eslintrc.js</code>。</li>\n</ul>\n<h2 id=\"基础的配置\"><a href=\"#基础的配置\" class=\"headerlink\" title=\"基础的配置\"></a>基础的配置</h2><p>写一个简单的 Job 让它先跑起来：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">pull_request</span></span><br><span class=\"line\"><span class=\"attr\">on:</span> <span class=\"string\">pull_request</span></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">eslint:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">run:</span> <span class=\"string\">echo</span> <span class=\"string\">&quot;i am eslint&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>##增量检查</p>\n<p>列出 pull request 的修改、新增的 js、ts 文件，先不用管 eslint，只打印出这些文件。</p>\n<p>TODO</p>\n<p><strong>等我学习了后续的知识，再来补充这个例子！！！</strong></p>\n<p><strong>等我学习了后续的知识，再来补充这个例子！！！</strong></p>\n<p><strong>等我学习了后续的知识，再来补充这个例子！！！</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<p>官方文档：<a href=\"https://docs.github.com/en/actions/examples/using-scripts-to-test-your-code-on-a-runner\">https://docs.github.com/en/actions/examples/using-scripts-to-test-your-code-on-a-runner</a></p>\n<p>官方描述了 3 个例子，用来检测文件中的 broken，我读书少，就依葫芦画瓢写一个 eslint 检测增量文件的功能，完成以下功能：</p>\n<ul>\n<li>pull_request 触发 workflow。</li>\n<li>使用 eslint 检查 pull request 的增量文件。</li>\n<li>如果检查失败，回复失败的文件和内容。</li>\n<li>如果检查成功，回复”+LGTM by eslint”。</li>\n</ul>\n<p>例子中一些术语或属性是第一次出现，先不要管，简单查阅下文档先完成功能，后续文章再研究它们。</p>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><ul>\n<li><code>package.json</code>中存在<code>eslint</code>依赖。</li>\n<li>存在配置文件 <code>.eslintrc.js</code>。</li>\n</ul>\n<h2 id=\"基础的配置\"><a href=\"#基础的配置\" class=\"headerlink\" title=\"基础的配置\"></a>基础的配置</h2><p>写一个简单的 Job 让它先跑起来：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">pull_request</span></span><br><span class=\"line\"><span class=\"attr\">on:</span> <span class=\"string\">pull_request</span></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">eslint:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">run:</span> <span class=\"string\">echo</span> <span class=\"string\">&quot;i am eslint&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>##增量检查</p>\n<p>列出 pull request 的修改、新增的 js、ts 文件，先不用管 eslint，只打印出这些文件。</p>\n<p>TODO</p>\n<p><strong>等我学习了后续的知识，再来补充这个例子！！！</strong></p>\n<p><strong>等我学习了后续的知识，再来补充这个例子！！！</strong></p>\n<p><strong>等我学习了后续的知识，再来补充这个例子！！！</strong></p>\n"},{"title":"2. Learn GitHub Actions - GitHub Actions","title_url":"github-actions-learn","date":"2022-07-04T16:00:00.000Z","_content":"\n官方文档：https://docs.github.com/en/actions/learn-github-actions/understanding-github-actions\n\n官方文档有点长，阅读了两天，容易让人阅读瞌睡，除了要熟知术语部分，其他部分看一遍知道有这些东西就行了，回头使用的时候翻看官方文档即可。\n\n## 理解 GitHub Actions 和术语\n\nGitHub Actions 就是通过事件触发工作流，在特定机器中执行一连串工作，每个工作中执行若干个步骤的脚本。\n\n使用人类行为来举例，我说：“老婆，你去炒个青椒炒肉丝吧。”\n\n- 口头说话（Events）会触发老婆的工作流（Workflows）：炒青椒肉丝。\n- 工作流包含了两个工作（Jobs）：配菜、炒菜。\n- 配菜工作包含多个步骤（Steps）：清洗青椒、切青椒丝、清洗猪肉、切猪肉丝。\n- 老婆有一个绞肉机（Actions），它可以完成切猪肉丝的工作而不需要关注细节。\n\n它包含了下面几个重要的术语。\n\n### Workflows（工作流）\n\n项目有若干个工作流，它们在不同的事件时机触发。比如，口头说话触发炒青椒肉丝。\n\n工作流还可以互相引用。比如，做一顿晚饭工作流，包含了炒青椒肉丝工作流。\n\n### Events（事件）\n\nGithub 提供了一系列触发工作流的事件，比如发起了 pull request，create issue，push commit。\n\n它还包括两种特殊的事件：\n\n- 手动触发，比如你想执行工作流看看全量 eslint 检测结果。\n- 计划任务，比如你想每月 30 号看看全量 eslint 检测结果。\n\n### Jobs（工作）\n\nWorkflows 由多个 Jobs 组成。\n\n每个 Job 运行在**同一机器上**，执行很多步骤的脚本，脚本可以是自定义的 shell（比如自己切肉丝，要关注细节：使用什么刀，每个肉丝有多细），也可以是封装好的 Actions（比如绞肉机）。\n\n**步骤按顺序执行**，可以共享数据，比如切青椒的步骤，可以读取到青椒清洗的农药残留数据。\n\n**工作还可以依赖**，默认情况下，工作并行执行，但有些场景工作是依赖的，比如炒菜工作，要依赖于配菜工作的完成。\n\n### Actions（脚本动作封装）\n\n顾名思义，就是将通用的动作封装起来，方便整个宇宙的程序员去使用。比如绞肉机就是将切肉丝的动作封装了起来。\n\n可以在 Github Marketplace 中找到和分享 Actions.\n\n### Runners（运行的机器）\n\n工作流不能凭空执行，它也是运行在机器上的，它可以是虚拟机、docker 容器。Github 提供了 Ubuntu Linux、Microsoft Windows、MacOS 这几种机器来执行工作流，注意一个限制：**一个机器同时只能执行一个 Job**。\n\n如果官方的机器不能满足你，也可以自动自己的机器来跑工作流，后续会讲到。\n\n## 使用 Actions\n\n上面说到 Actions 是脚本的封装，它可以是社区市场中的 Actions，也可以是自定义 Actions，甚至是一个 Docker 镜像。\n\n### Marketplace 方式\n\nGithub 提供了界面操作，让我们可以方便的在工作流中维护 Actions，只要我们在浏览器中编辑 yml 文件，右侧就出现了 Actions 市场，可以点开某个 Actions，查看它的详细配置。\n\n![](https://cdn.jsdelivr.net/gh/taoliujun/taoliujun.github.io/assets/202306281126235.png)\n​\n![](https://cdn.jsdelivr.net/gh/taoliujun/taoliujun.github.io/assets/202306281127958.png)\n\n对照着 Actions 的文档，我在 Workflow 中插入 node。现在，我的配置文件长这样：\n\n```yaml\nname: lint\non: [push]\njobs:\n  eslint:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check out repository code\n        uses: actions/checkout@v3\n      - name: use node\n        uses: actions/setup-node@v3.3.0\n        with:\n          node-version: latest\n      - run: node -v\n```\n\n然后，查看执行结果。\n​\n![](https://cdn.jsdelivr.net/gh/taoliujun/taoliujun.github.io/assets/202306281127692.png)\n\n### 自己的 Actions\n\n还可以在自己的仓库里添加 Actions，这里就贴官方原例子了。\n\n```shell\n|-- root (repository)\n|   |__ .github\n|       └── workflows\n|           └── my-first-workflow.yml\n|       └── actions\n|           |__ hello-world-action\n|               └── action.yml\n```\n\nExample workflow file:\n\n```yaml\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      # This step checks out a copy of your repository.\n      - uses: actions/checkout@v3\n      # This step references the directory that contains the action.\n      - uses: ./.github/actions/hello-world-action\n```\n\n### 公共的 Actions\n\n```yaml\nuses: actions/setup-node@v3\n```\n\n使用其他 Github 仓库的 Actions 就是如此简单，我们常使用的 actions/\\*\\*\\*，其实也属于公共仓库，它们是由官方维护的一组 Actions，比较稳定。点击此处可以看到官方的 Actions。\n\n### Docker 镜像\n\n如果 Runners 和开源 Actions 都不能满足你，可以搞 docker 来执行 Workflows。\n\n因本人的 docker 水平属于“哇，我能启动 docker，我真厉害”，就不展开讲了。\n\n### 不同版本的 Actions\n\nActions 本质上是仓库里的文件，它会有版本区分，我们有好几种方法使用它：\n\n```yaml\n# 使用tag\nuses: actions/javascript-action@v1.0.1\n# 使用commitID\nuses: actions/javascript-action@172239021f7ba04fe7327647b213799853a9eb89\n# 使用branch\nuses: actions/javascript-action@main\n```\n\n## 基本特性\n\n这部分文档看的云里雾里的，讲了一些如何使用变量，如何在 Jobs 里共享数据，不知道这些内容出现在这里的目的是什么，略过。\n\n## 表达式\n\n支持在配置中使用表达式，我简单的记录了下，实际使用需要参照官方文档，它包含了以下。\n\n### 变量\n\n支持`boolean`，`null`，`number`，`string` 类型。如下：\n\n```yaml\nenv:\n  myNull: ${{ null }}\n  myBoolean: ${{ false }}\n  myIntegerNumber: ${{ 711 }}\n  myString: Mona the Octocat\n  myStringInBraces: ${{ 'It''s open source!' }}\n```\n\n### 操作符\n\n一些如值比较、逻辑与、逻辑或的操作，不一一列举了。\n\n注意不是强类型的比较，有一些值转换的逻辑。\n\n### 内置方法\n\n提供了一些内置方法辅助表达式，比如 `contains` 判断是否包含某个字符，不一一列举了。\n\n### 状态处理\n\nJobs 的每个步骤会按顺序执行，我们可以在某个步骤中加入对“已经执行的步骤”的状态判断，来决定是否要执行当前步骤。比如，只有青椒清洗步骤成功了，才执行青椒切丝步骤。举例：\n\n```yaml\nsteps:\n  ...\n  # 前面的步骤都执行成功了，再执行该步骤\n  - name: The job has succeeded\n    if: ${{ success() }}\n```\n\n它还有以下几种状态结果：\n\n- **always**，只要执行了\n- **success**，执行成功了\n- **cancelled**，执行取消了\n- **failure**，执行失败了\n\n## 上下文（重要）\n\n上下文指工作流运行中可以访问的属性，你可以在**表达式中**访问上下文，比如访问当前仓库的地址`github.repositoryUrl`。它是**job 串起来的重要保障**。\n\n它提供了一组模块的上下文：github、env、job、steps、runner、needs 等等。\n\n如下演示了一个简单的上下文访问：\n\n```yaml\nname: CI\non: push\njobs:\n  prod-check:\n    if: ${{ github.ref == 'refs/heads/main' }}\n    runs-on: ubuntu-latest\n    steps:\n      - run: echo \"hello ${{ github.actor }}, branch is $GITHUB_REF\"\n```\n\n重要点：\n\n- 在不同的节点，上下文的可访问性有所不同，文档贴出了表格，这在使用的时候要注意。\n- env 由内往外覆盖\n\n## 环境变量\n\n还可以在 Workflows、Jobs、Steps 中设置和访问环境变量。\n\n```yaml\nname: lint\non: [push]\nenv:\n  YOUR_NAME: wang\njobs:\n  eslint:\n    runs-on: ubuntu-latest\n    env:\n      YOUR_SEX: boy\n    steps:\n      - name: test\n        env:\n          YOUR_AGE: 18\n        run: echo \"Hello, ${{ env.YOUR_NAME }}, your sex is $YOUR_SEX, your age is $YOUR_AGE\"\n```\n\n也提供一系列系统环境变量供访问，注意避开同名。\n\n## 收费和限制\n\n略\n","source":"_posts/Github Actions/2. Learn GitHub Actions.md","raw":"---\ntitle: 2. Learn GitHub Actions - GitHub Actions\ntitle_url: github-actions-learn\ndate: 2022-07-05\ntags:\n  - github actions\n  - ci\ncategories:\n  - 架构\n---\n\n官方文档：https://docs.github.com/en/actions/learn-github-actions/understanding-github-actions\n\n官方文档有点长，阅读了两天，容易让人阅读瞌睡，除了要熟知术语部分，其他部分看一遍知道有这些东西就行了，回头使用的时候翻看官方文档即可。\n\n## 理解 GitHub Actions 和术语\n\nGitHub Actions 就是通过事件触发工作流，在特定机器中执行一连串工作，每个工作中执行若干个步骤的脚本。\n\n使用人类行为来举例，我说：“老婆，你去炒个青椒炒肉丝吧。”\n\n- 口头说话（Events）会触发老婆的工作流（Workflows）：炒青椒肉丝。\n- 工作流包含了两个工作（Jobs）：配菜、炒菜。\n- 配菜工作包含多个步骤（Steps）：清洗青椒、切青椒丝、清洗猪肉、切猪肉丝。\n- 老婆有一个绞肉机（Actions），它可以完成切猪肉丝的工作而不需要关注细节。\n\n它包含了下面几个重要的术语。\n\n### Workflows（工作流）\n\n项目有若干个工作流，它们在不同的事件时机触发。比如，口头说话触发炒青椒肉丝。\n\n工作流还可以互相引用。比如，做一顿晚饭工作流，包含了炒青椒肉丝工作流。\n\n### Events（事件）\n\nGithub 提供了一系列触发工作流的事件，比如发起了 pull request，create issue，push commit。\n\n它还包括两种特殊的事件：\n\n- 手动触发，比如你想执行工作流看看全量 eslint 检测结果。\n- 计划任务，比如你想每月 30 号看看全量 eslint 检测结果。\n\n### Jobs（工作）\n\nWorkflows 由多个 Jobs 组成。\n\n每个 Job 运行在**同一机器上**，执行很多步骤的脚本，脚本可以是自定义的 shell（比如自己切肉丝，要关注细节：使用什么刀，每个肉丝有多细），也可以是封装好的 Actions（比如绞肉机）。\n\n**步骤按顺序执行**，可以共享数据，比如切青椒的步骤，可以读取到青椒清洗的农药残留数据。\n\n**工作还可以依赖**，默认情况下，工作并行执行，但有些场景工作是依赖的，比如炒菜工作，要依赖于配菜工作的完成。\n\n### Actions（脚本动作封装）\n\n顾名思义，就是将通用的动作封装起来，方便整个宇宙的程序员去使用。比如绞肉机就是将切肉丝的动作封装了起来。\n\n可以在 Github Marketplace 中找到和分享 Actions.\n\n### Runners（运行的机器）\n\n工作流不能凭空执行，它也是运行在机器上的，它可以是虚拟机、docker 容器。Github 提供了 Ubuntu Linux、Microsoft Windows、MacOS 这几种机器来执行工作流，注意一个限制：**一个机器同时只能执行一个 Job**。\n\n如果官方的机器不能满足你，也可以自动自己的机器来跑工作流，后续会讲到。\n\n## 使用 Actions\n\n上面说到 Actions 是脚本的封装，它可以是社区市场中的 Actions，也可以是自定义 Actions，甚至是一个 Docker 镜像。\n\n### Marketplace 方式\n\nGithub 提供了界面操作，让我们可以方便的在工作流中维护 Actions，只要我们在浏览器中编辑 yml 文件，右侧就出现了 Actions 市场，可以点开某个 Actions，查看它的详细配置。\n\n![](https://cdn.jsdelivr.net/gh/taoliujun/taoliujun.github.io/assets/202306281126235.png)\n​\n![](https://cdn.jsdelivr.net/gh/taoliujun/taoliujun.github.io/assets/202306281127958.png)\n\n对照着 Actions 的文档，我在 Workflow 中插入 node。现在，我的配置文件长这样：\n\n```yaml\nname: lint\non: [push]\njobs:\n  eslint:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check out repository code\n        uses: actions/checkout@v3\n      - name: use node\n        uses: actions/setup-node@v3.3.0\n        with:\n          node-version: latest\n      - run: node -v\n```\n\n然后，查看执行结果。\n​\n![](https://cdn.jsdelivr.net/gh/taoliujun/taoliujun.github.io/assets/202306281127692.png)\n\n### 自己的 Actions\n\n还可以在自己的仓库里添加 Actions，这里就贴官方原例子了。\n\n```shell\n|-- root (repository)\n|   |__ .github\n|       └── workflows\n|           └── my-first-workflow.yml\n|       └── actions\n|           |__ hello-world-action\n|               └── action.yml\n```\n\nExample workflow file:\n\n```yaml\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      # This step checks out a copy of your repository.\n      - uses: actions/checkout@v3\n      # This step references the directory that contains the action.\n      - uses: ./.github/actions/hello-world-action\n```\n\n### 公共的 Actions\n\n```yaml\nuses: actions/setup-node@v3\n```\n\n使用其他 Github 仓库的 Actions 就是如此简单，我们常使用的 actions/\\*\\*\\*，其实也属于公共仓库，它们是由官方维护的一组 Actions，比较稳定。点击此处可以看到官方的 Actions。\n\n### Docker 镜像\n\n如果 Runners 和开源 Actions 都不能满足你，可以搞 docker 来执行 Workflows。\n\n因本人的 docker 水平属于“哇，我能启动 docker，我真厉害”，就不展开讲了。\n\n### 不同版本的 Actions\n\nActions 本质上是仓库里的文件，它会有版本区分，我们有好几种方法使用它：\n\n```yaml\n# 使用tag\nuses: actions/javascript-action@v1.0.1\n# 使用commitID\nuses: actions/javascript-action@172239021f7ba04fe7327647b213799853a9eb89\n# 使用branch\nuses: actions/javascript-action@main\n```\n\n## 基本特性\n\n这部分文档看的云里雾里的，讲了一些如何使用变量，如何在 Jobs 里共享数据，不知道这些内容出现在这里的目的是什么，略过。\n\n## 表达式\n\n支持在配置中使用表达式，我简单的记录了下，实际使用需要参照官方文档，它包含了以下。\n\n### 变量\n\n支持`boolean`，`null`，`number`，`string` 类型。如下：\n\n```yaml\nenv:\n  myNull: ${{ null }}\n  myBoolean: ${{ false }}\n  myIntegerNumber: ${{ 711 }}\n  myString: Mona the Octocat\n  myStringInBraces: ${{ 'It''s open source!' }}\n```\n\n### 操作符\n\n一些如值比较、逻辑与、逻辑或的操作，不一一列举了。\n\n注意不是强类型的比较，有一些值转换的逻辑。\n\n### 内置方法\n\n提供了一些内置方法辅助表达式，比如 `contains` 判断是否包含某个字符，不一一列举了。\n\n### 状态处理\n\nJobs 的每个步骤会按顺序执行，我们可以在某个步骤中加入对“已经执行的步骤”的状态判断，来决定是否要执行当前步骤。比如，只有青椒清洗步骤成功了，才执行青椒切丝步骤。举例：\n\n```yaml\nsteps:\n  ...\n  # 前面的步骤都执行成功了，再执行该步骤\n  - name: The job has succeeded\n    if: ${{ success() }}\n```\n\n它还有以下几种状态结果：\n\n- **always**，只要执行了\n- **success**，执行成功了\n- **cancelled**，执行取消了\n- **failure**，执行失败了\n\n## 上下文（重要）\n\n上下文指工作流运行中可以访问的属性，你可以在**表达式中**访问上下文，比如访问当前仓库的地址`github.repositoryUrl`。它是**job 串起来的重要保障**。\n\n它提供了一组模块的上下文：github、env、job、steps、runner、needs 等等。\n\n如下演示了一个简单的上下文访问：\n\n```yaml\nname: CI\non: push\njobs:\n  prod-check:\n    if: ${{ github.ref == 'refs/heads/main' }}\n    runs-on: ubuntu-latest\n    steps:\n      - run: echo \"hello ${{ github.actor }}, branch is $GITHUB_REF\"\n```\n\n重要点：\n\n- 在不同的节点，上下文的可访问性有所不同，文档贴出了表格，这在使用的时候要注意。\n- env 由内往外覆盖\n\n## 环境变量\n\n还可以在 Workflows、Jobs、Steps 中设置和访问环境变量。\n\n```yaml\nname: lint\non: [push]\nenv:\n  YOUR_NAME: wang\njobs:\n  eslint:\n    runs-on: ubuntu-latest\n    env:\n      YOUR_SEX: boy\n    steps:\n      - name: test\n        env:\n          YOUR_AGE: 18\n        run: echo \"Hello, ${{ env.YOUR_NAME }}, your sex is $YOUR_SEX, your age is $YOUR_AGE\"\n```\n\n也提供一系列系统环境变量供访问，注意避开同名。\n\n## 收费和限制\n\n略\n","slug":"Github Actions/2. Learn GitHub Actions","published":1,"updated":"2023-07-05T05:34:41.755Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cljpap02d000bxbrr9ylt7zc4","content":"<p>官方文档：<a href=\"https://docs.github.com/en/actions/learn-github-actions/understanding-github-actions\">https://docs.github.com/en/actions/learn-github-actions/understanding-github-actions</a></p>\n<p>官方文档有点长，阅读了两天，容易让人阅读瞌睡，除了要熟知术语部分，其他部分看一遍知道有这些东西就行了，回头使用的时候翻看官方文档即可。</p>\n<h2 id=\"理解-GitHub-Actions-和术语\"><a href=\"#理解-GitHub-Actions-和术语\" class=\"headerlink\" title=\"理解 GitHub Actions 和术语\"></a>理解 GitHub Actions 和术语</h2><p>GitHub Actions 就是通过事件触发工作流，在特定机器中执行一连串工作，每个工作中执行若干个步骤的脚本。</p>\n<p>使用人类行为来举例，我说：“老婆，你去炒个青椒炒肉丝吧。”</p>\n<ul>\n<li>口头说话（Events）会触发老婆的工作流（Workflows）：炒青椒肉丝。</li>\n<li>工作流包含了两个工作（Jobs）：配菜、炒菜。</li>\n<li>配菜工作包含多个步骤（Steps）：清洗青椒、切青椒丝、清洗猪肉、切猪肉丝。</li>\n<li>老婆有一个绞肉机（Actions），它可以完成切猪肉丝的工作而不需要关注细节。</li>\n</ul>\n<p>它包含了下面几个重要的术语。</p>\n<h3 id=\"Workflows（工作流）\"><a href=\"#Workflows（工作流）\" class=\"headerlink\" title=\"Workflows（工作流）\"></a>Workflows（工作流）</h3><p>项目有若干个工作流，它们在不同的事件时机触发。比如，口头说话触发炒青椒肉丝。</p>\n<p>工作流还可以互相引用。比如，做一顿晚饭工作流，包含了炒青椒肉丝工作流。</p>\n<h3 id=\"Events（事件）\"><a href=\"#Events（事件）\" class=\"headerlink\" title=\"Events（事件）\"></a>Events（事件）</h3><p>Github 提供了一系列触发工作流的事件，比如发起了 pull request，create issue，push commit。</p>\n<p>它还包括两种特殊的事件：</p>\n<ul>\n<li>手动触发，比如你想执行工作流看看全量 eslint 检测结果。</li>\n<li>计划任务，比如你想每月 30 号看看全量 eslint 检测结果。</li>\n</ul>\n<h3 id=\"Jobs（工作）\"><a href=\"#Jobs（工作）\" class=\"headerlink\" title=\"Jobs（工作）\"></a>Jobs（工作）</h3><p>Workflows 由多个 Jobs 组成。</p>\n<p>每个 Job 运行在<strong>同一机器上</strong>，执行很多步骤的脚本，脚本可以是自定义的 shell（比如自己切肉丝，要关注细节：使用什么刀，每个肉丝有多细），也可以是封装好的 Actions（比如绞肉机）。</p>\n<p><strong>步骤按顺序执行</strong>，可以共享数据，比如切青椒的步骤，可以读取到青椒清洗的农药残留数据。</p>\n<p><strong>工作还可以依赖</strong>，默认情况下，工作并行执行，但有些场景工作是依赖的，比如炒菜工作，要依赖于配菜工作的完成。</p>\n<h3 id=\"Actions（脚本动作封装）\"><a href=\"#Actions（脚本动作封装）\" class=\"headerlink\" title=\"Actions（脚本动作封装）\"></a>Actions（脚本动作封装）</h3><p>顾名思义，就是将通用的动作封装起来，方便整个宇宙的程序员去使用。比如绞肉机就是将切肉丝的动作封装了起来。</p>\n<p>可以在 Github Marketplace 中找到和分享 Actions.</p>\n<h3 id=\"Runners（运行的机器）\"><a href=\"#Runners（运行的机器）\" class=\"headerlink\" title=\"Runners（运行的机器）\"></a>Runners（运行的机器）</h3><p>工作流不能凭空执行，它也是运行在机器上的，它可以是虚拟机、docker 容器。Github 提供了 Ubuntu Linux、Microsoft Windows、MacOS 这几种机器来执行工作流，注意一个限制：<strong>一个机器同时只能执行一个 Job</strong>。</p>\n<p>如果官方的机器不能满足你，也可以自动自己的机器来跑工作流，后续会讲到。</p>\n<h2 id=\"使用-Actions\"><a href=\"#使用-Actions\" class=\"headerlink\" title=\"使用 Actions\"></a>使用 Actions</h2><p>上面说到 Actions 是脚本的封装，它可以是社区市场中的 Actions，也可以是自定义 Actions，甚至是一个 Docker 镜像。</p>\n<h3 id=\"Marketplace-方式\"><a href=\"#Marketplace-方式\" class=\"headerlink\" title=\"Marketplace 方式\"></a>Marketplace 方式</h3><p>Github 提供了界面操作，让我们可以方便的在工作流中维护 Actions，只要我们在浏览器中编辑 yml 文件，右侧就出现了 Actions 市场，可以点开某个 Actions，查看它的详细配置。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/taoliujun/taoliujun.github.io/assets/202306281126235.png\"><br>​<br><img src=\"https://cdn.jsdelivr.net/gh/taoliujun/taoliujun.github.io/assets/202306281127958.png\"></p>\n<p>对照着 Actions 的文档，我在 Workflow 中插入 node。现在，我的配置文件长这样：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">lint</span></span><br><span class=\"line\"><span class=\"attr\">on:</span> [<span class=\"string\">push</span>]</span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">eslint:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Check</span> <span class=\"string\">out</span> <span class=\"string\">repository</span> <span class=\"string\">code</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v3</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">use</span> <span class=\"string\">node</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v3.3.0</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">node-version:</span> <span class=\"string\">latest</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">run:</span> <span class=\"string\">node</span> <span class=\"string\">-v</span></span><br></pre></td></tr></table></figure>\n\n<p>然后，查看执行结果。<br>​<br><img src=\"https://cdn.jsdelivr.net/gh/taoliujun/taoliujun.github.io/assets/202306281127692.png\"></p>\n<h3 id=\"自己的-Actions\"><a href=\"#自己的-Actions\" class=\"headerlink\" title=\"自己的 Actions\"></a>自己的 Actions</h3><p>还可以在自己的仓库里添加 Actions，这里就贴官方原例子了。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|-- root (repository)</span><br><span class=\"line\">|   |__ .github</span><br><span class=\"line\">|       └── workflows</span><br><span class=\"line\">|           └── my-first-workflow.yml</span><br><span class=\"line\">|       └── actions</span><br><span class=\"line\">|           |__ hello-world-action</span><br><span class=\"line\">|               └── action.yml</span><br></pre></td></tr></table></figure>\n\n<p>Example workflow file:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">build:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"comment\"># This step checks out a copy of your repository.</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v3</span></span><br><span class=\"line\">      <span class=\"comment\"># This step references the directory that contains the action.</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">uses:</span> <span class=\"string\">./.github/actions/hello-world-action</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"公共的-Actions\"><a href=\"#公共的-Actions\" class=\"headerlink\" title=\"公共的 Actions\"></a>公共的 Actions</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v3</span></span><br></pre></td></tr></table></figure>\n\n<p>使用其他 Github 仓库的 Actions 就是如此简单，我们常使用的 actions&#x2F;***，其实也属于公共仓库，它们是由官方维护的一组 Actions，比较稳定。点击此处可以看到官方的 Actions。</p>\n<h3 id=\"Docker-镜像\"><a href=\"#Docker-镜像\" class=\"headerlink\" title=\"Docker 镜像\"></a>Docker 镜像</h3><p>如果 Runners 和开源 Actions 都不能满足你，可以搞 docker 来执行 Workflows。</p>\n<p>因本人的 docker 水平属于“哇，我能启动 docker，我真厉害”，就不展开讲了。</p>\n<h3 id=\"不同版本的-Actions\"><a href=\"#不同版本的-Actions\" class=\"headerlink\" title=\"不同版本的 Actions\"></a>不同版本的 Actions</h3><p>Actions 本质上是仓库里的文件，它会有版本区分，我们有好几种方法使用它：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用tag</span></span><br><span class=\"line\"><span class=\"attr\">uses:</span> <span class=\"string\">actions/javascript-action@v1.0.1</span></span><br><span class=\"line\"><span class=\"comment\"># 使用commitID</span></span><br><span class=\"line\"><span class=\"attr\">uses:</span> <span class=\"string\">actions/javascript-action@172239021f7ba04fe7327647b213799853a9eb89</span></span><br><span class=\"line\"><span class=\"comment\"># 使用branch</span></span><br><span class=\"line\"><span class=\"attr\">uses:</span> <span class=\"string\">actions/javascript-action@main</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"基本特性\"><a href=\"#基本特性\" class=\"headerlink\" title=\"基本特性\"></a>基本特性</h2><p>这部分文档看的云里雾里的，讲了一些如何使用变量，如何在 Jobs 里共享数据，不知道这些内容出现在这里的目的是什么，略过。</p>\n<h2 id=\"表达式\"><a href=\"#表达式\" class=\"headerlink\" title=\"表达式\"></a>表达式</h2><p>支持在配置中使用表达式，我简单的记录了下，实际使用需要参照官方文档，它包含了以下。</p>\n<h3 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h3><p>支持<code>boolean</code>，<code>null</code>，<code>number</code>，<code>string</code> 类型。如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">env:</span></span><br><span class=\"line\">  <span class=\"attr\">myNull:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"literal\">null</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">  <span class=\"attr\">myBoolean:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"literal\">false</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">  <span class=\"attr\">myIntegerNumber:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"number\">711</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">  <span class=\"attr\">myString:</span> <span class=\"string\">Mona</span> <span class=\"string\">the</span> <span class=\"string\">Octocat</span></span><br><span class=\"line\">  <span class=\"attr\">myStringInBraces:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">&#x27;It&#x27;</span><span class=\"string\">&#x27;s open source!&#x27;</span> <span class=\"string\">&#125;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"操作符\"><a href=\"#操作符\" class=\"headerlink\" title=\"操作符\"></a>操作符</h3><p>一些如值比较、逻辑与、逻辑或的操作，不一一列举了。</p>\n<p>注意不是强类型的比较，有一些值转换的逻辑。</p>\n<h3 id=\"内置方法\"><a href=\"#内置方法\" class=\"headerlink\" title=\"内置方法\"></a>内置方法</h3><p>提供了一些内置方法辅助表达式，比如 <code>contains</code> 判断是否包含某个字符，不一一列举了。</p>\n<h3 id=\"状态处理\"><a href=\"#状态处理\" class=\"headerlink\" title=\"状态处理\"></a>状态处理</h3><p>Jobs 的每个步骤会按顺序执行，我们可以在某个步骤中加入对“已经执行的步骤”的状态判断，来决定是否要执行当前步骤。比如，只有青椒清洗步骤成功了，才执行青椒切丝步骤。举例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">steps:</span></span><br><span class=\"line\">  <span class=\"string\">...</span></span><br><span class=\"line\">  <span class=\"comment\"># 前面的步骤都执行成功了，再执行该步骤</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">The</span> <span class=\"string\">job</span> <span class=\"string\">has</span> <span class=\"string\">succeeded</span></span><br><span class=\"line\">    <span class=\"attr\">if:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">success()</span> <span class=\"string\">&#125;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>它还有以下几种状态结果：</p>\n<ul>\n<li><strong>always</strong>，只要执行了</li>\n<li><strong>success</strong>，执行成功了</li>\n<li><strong>cancelled</strong>，执行取消了</li>\n<li><strong>failure</strong>，执行失败了</li>\n</ul>\n<h2 id=\"上下文（重要）\"><a href=\"#上下文（重要）\" class=\"headerlink\" title=\"上下文（重要）\"></a>上下文（重要）</h2><p>上下文指工作流运行中可以访问的属性，你可以在<strong>表达式中</strong>访问上下文，比如访问当前仓库的地址<code>github.repositoryUrl</code>。它是<strong>job 串起来的重要保障</strong>。</p>\n<p>它提供了一组模块的上下文：github、env、job、steps、runner、needs 等等。</p>\n<p>如下演示了一个简单的上下文访问：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">CI</span></span><br><span class=\"line\"><span class=\"attr\">on:</span> <span class=\"string\">push</span></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">prod-check:</span></span><br><span class=\"line\">    <span class=\"attr\">if:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">github.ref</span> <span class=\"string\">==</span> <span class=\"string\">&#x27;refs/heads/main&#x27;</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">run:</span> <span class=\"string\">echo</span> <span class=\"string\">&quot;hello $<span class=\"template-variable\">&#123;&#123; github.actor &#125;&#125;</span>, branch is $GITHUB_REF&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>重要点：</p>\n<ul>\n<li>在不同的节点，上下文的可访问性有所不同，文档贴出了表格，这在使用的时候要注意。</li>\n<li>env 由内往外覆盖</li>\n</ul>\n<h2 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h2><p>还可以在 Workflows、Jobs、Steps 中设置和访问环境变量。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">lint</span></span><br><span class=\"line\"><span class=\"attr\">on:</span> [<span class=\"string\">push</span>]</span><br><span class=\"line\"><span class=\"attr\">env:</span></span><br><span class=\"line\">  <span class=\"attr\">YOUR_NAME:</span> <span class=\"string\">wang</span></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">eslint:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">env:</span></span><br><span class=\"line\">      <span class=\"attr\">YOUR_SEX:</span> <span class=\"string\">boy</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">test</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"attr\">YOUR_AGE:</span> <span class=\"number\">18</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">echo</span> <span class=\"string\">&quot;Hello, $<span class=\"template-variable\">&#123;&#123; env.YOUR_NAME &#125;&#125;</span>, your sex is $YOUR_SEX, your age is $YOUR_AGE&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>也提供一系列系统环境变量供访问，注意避开同名。</p>\n<h2 id=\"收费和限制\"><a href=\"#收费和限制\" class=\"headerlink\" title=\"收费和限制\"></a>收费和限制</h2><p>略</p>\n","site":{"data":{}},"excerpt":"","more":"<p>官方文档：<a href=\"https://docs.github.com/en/actions/learn-github-actions/understanding-github-actions\">https://docs.github.com/en/actions/learn-github-actions/understanding-github-actions</a></p>\n<p>官方文档有点长，阅读了两天，容易让人阅读瞌睡，除了要熟知术语部分，其他部分看一遍知道有这些东西就行了，回头使用的时候翻看官方文档即可。</p>\n<h2 id=\"理解-GitHub-Actions-和术语\"><a href=\"#理解-GitHub-Actions-和术语\" class=\"headerlink\" title=\"理解 GitHub Actions 和术语\"></a>理解 GitHub Actions 和术语</h2><p>GitHub Actions 就是通过事件触发工作流，在特定机器中执行一连串工作，每个工作中执行若干个步骤的脚本。</p>\n<p>使用人类行为来举例，我说：“老婆，你去炒个青椒炒肉丝吧。”</p>\n<ul>\n<li>口头说话（Events）会触发老婆的工作流（Workflows）：炒青椒肉丝。</li>\n<li>工作流包含了两个工作（Jobs）：配菜、炒菜。</li>\n<li>配菜工作包含多个步骤（Steps）：清洗青椒、切青椒丝、清洗猪肉、切猪肉丝。</li>\n<li>老婆有一个绞肉机（Actions），它可以完成切猪肉丝的工作而不需要关注细节。</li>\n</ul>\n<p>它包含了下面几个重要的术语。</p>\n<h3 id=\"Workflows（工作流）\"><a href=\"#Workflows（工作流）\" class=\"headerlink\" title=\"Workflows（工作流）\"></a>Workflows（工作流）</h3><p>项目有若干个工作流，它们在不同的事件时机触发。比如，口头说话触发炒青椒肉丝。</p>\n<p>工作流还可以互相引用。比如，做一顿晚饭工作流，包含了炒青椒肉丝工作流。</p>\n<h3 id=\"Events（事件）\"><a href=\"#Events（事件）\" class=\"headerlink\" title=\"Events（事件）\"></a>Events（事件）</h3><p>Github 提供了一系列触发工作流的事件，比如发起了 pull request，create issue，push commit。</p>\n<p>它还包括两种特殊的事件：</p>\n<ul>\n<li>手动触发，比如你想执行工作流看看全量 eslint 检测结果。</li>\n<li>计划任务，比如你想每月 30 号看看全量 eslint 检测结果。</li>\n</ul>\n<h3 id=\"Jobs（工作）\"><a href=\"#Jobs（工作）\" class=\"headerlink\" title=\"Jobs（工作）\"></a>Jobs（工作）</h3><p>Workflows 由多个 Jobs 组成。</p>\n<p>每个 Job 运行在<strong>同一机器上</strong>，执行很多步骤的脚本，脚本可以是自定义的 shell（比如自己切肉丝，要关注细节：使用什么刀，每个肉丝有多细），也可以是封装好的 Actions（比如绞肉机）。</p>\n<p><strong>步骤按顺序执行</strong>，可以共享数据，比如切青椒的步骤，可以读取到青椒清洗的农药残留数据。</p>\n<p><strong>工作还可以依赖</strong>，默认情况下，工作并行执行，但有些场景工作是依赖的，比如炒菜工作，要依赖于配菜工作的完成。</p>\n<h3 id=\"Actions（脚本动作封装）\"><a href=\"#Actions（脚本动作封装）\" class=\"headerlink\" title=\"Actions（脚本动作封装）\"></a>Actions（脚本动作封装）</h3><p>顾名思义，就是将通用的动作封装起来，方便整个宇宙的程序员去使用。比如绞肉机就是将切肉丝的动作封装了起来。</p>\n<p>可以在 Github Marketplace 中找到和分享 Actions.</p>\n<h3 id=\"Runners（运行的机器）\"><a href=\"#Runners（运行的机器）\" class=\"headerlink\" title=\"Runners（运行的机器）\"></a>Runners（运行的机器）</h3><p>工作流不能凭空执行，它也是运行在机器上的，它可以是虚拟机、docker 容器。Github 提供了 Ubuntu Linux、Microsoft Windows、MacOS 这几种机器来执行工作流，注意一个限制：<strong>一个机器同时只能执行一个 Job</strong>。</p>\n<p>如果官方的机器不能满足你，也可以自动自己的机器来跑工作流，后续会讲到。</p>\n<h2 id=\"使用-Actions\"><a href=\"#使用-Actions\" class=\"headerlink\" title=\"使用 Actions\"></a>使用 Actions</h2><p>上面说到 Actions 是脚本的封装，它可以是社区市场中的 Actions，也可以是自定义 Actions，甚至是一个 Docker 镜像。</p>\n<h3 id=\"Marketplace-方式\"><a href=\"#Marketplace-方式\" class=\"headerlink\" title=\"Marketplace 方式\"></a>Marketplace 方式</h3><p>Github 提供了界面操作，让我们可以方便的在工作流中维护 Actions，只要我们在浏览器中编辑 yml 文件，右侧就出现了 Actions 市场，可以点开某个 Actions，查看它的详细配置。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/taoliujun/taoliujun.github.io/assets/202306281126235.png\"><br>​<br><img src=\"https://cdn.jsdelivr.net/gh/taoliujun/taoliujun.github.io/assets/202306281127958.png\"></p>\n<p>对照着 Actions 的文档，我在 Workflow 中插入 node。现在，我的配置文件长这样：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">lint</span></span><br><span class=\"line\"><span class=\"attr\">on:</span> [<span class=\"string\">push</span>]</span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">eslint:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Check</span> <span class=\"string\">out</span> <span class=\"string\">repository</span> <span class=\"string\">code</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v3</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">use</span> <span class=\"string\">node</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v3.3.0</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">node-version:</span> <span class=\"string\">latest</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">run:</span> <span class=\"string\">node</span> <span class=\"string\">-v</span></span><br></pre></td></tr></table></figure>\n\n<p>然后，查看执行结果。<br>​<br><img src=\"https://cdn.jsdelivr.net/gh/taoliujun/taoliujun.github.io/assets/202306281127692.png\"></p>\n<h3 id=\"自己的-Actions\"><a href=\"#自己的-Actions\" class=\"headerlink\" title=\"自己的 Actions\"></a>自己的 Actions</h3><p>还可以在自己的仓库里添加 Actions，这里就贴官方原例子了。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|-- root (repository)</span><br><span class=\"line\">|   |__ .github</span><br><span class=\"line\">|       └── workflows</span><br><span class=\"line\">|           └── my-first-workflow.yml</span><br><span class=\"line\">|       └── actions</span><br><span class=\"line\">|           |__ hello-world-action</span><br><span class=\"line\">|               └── action.yml</span><br></pre></td></tr></table></figure>\n\n<p>Example workflow file:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">build:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"comment\"># This step checks out a copy of your repository.</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v3</span></span><br><span class=\"line\">      <span class=\"comment\"># This step references the directory that contains the action.</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">uses:</span> <span class=\"string\">./.github/actions/hello-world-action</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"公共的-Actions\"><a href=\"#公共的-Actions\" class=\"headerlink\" title=\"公共的 Actions\"></a>公共的 Actions</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v3</span></span><br></pre></td></tr></table></figure>\n\n<p>使用其他 Github 仓库的 Actions 就是如此简单，我们常使用的 actions&#x2F;***，其实也属于公共仓库，它们是由官方维护的一组 Actions，比较稳定。点击此处可以看到官方的 Actions。</p>\n<h3 id=\"Docker-镜像\"><a href=\"#Docker-镜像\" class=\"headerlink\" title=\"Docker 镜像\"></a>Docker 镜像</h3><p>如果 Runners 和开源 Actions 都不能满足你，可以搞 docker 来执行 Workflows。</p>\n<p>因本人的 docker 水平属于“哇，我能启动 docker，我真厉害”，就不展开讲了。</p>\n<h3 id=\"不同版本的-Actions\"><a href=\"#不同版本的-Actions\" class=\"headerlink\" title=\"不同版本的 Actions\"></a>不同版本的 Actions</h3><p>Actions 本质上是仓库里的文件，它会有版本区分，我们有好几种方法使用它：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用tag</span></span><br><span class=\"line\"><span class=\"attr\">uses:</span> <span class=\"string\">actions/javascript-action@v1.0.1</span></span><br><span class=\"line\"><span class=\"comment\"># 使用commitID</span></span><br><span class=\"line\"><span class=\"attr\">uses:</span> <span class=\"string\">actions/javascript-action@172239021f7ba04fe7327647b213799853a9eb89</span></span><br><span class=\"line\"><span class=\"comment\"># 使用branch</span></span><br><span class=\"line\"><span class=\"attr\">uses:</span> <span class=\"string\">actions/javascript-action@main</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"基本特性\"><a href=\"#基本特性\" class=\"headerlink\" title=\"基本特性\"></a>基本特性</h2><p>这部分文档看的云里雾里的，讲了一些如何使用变量，如何在 Jobs 里共享数据，不知道这些内容出现在这里的目的是什么，略过。</p>\n<h2 id=\"表达式\"><a href=\"#表达式\" class=\"headerlink\" title=\"表达式\"></a>表达式</h2><p>支持在配置中使用表达式，我简单的记录了下，实际使用需要参照官方文档，它包含了以下。</p>\n<h3 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h3><p>支持<code>boolean</code>，<code>null</code>，<code>number</code>，<code>string</code> 类型。如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">env:</span></span><br><span class=\"line\">  <span class=\"attr\">myNull:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"literal\">null</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">  <span class=\"attr\">myBoolean:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"literal\">false</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">  <span class=\"attr\">myIntegerNumber:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"number\">711</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">  <span class=\"attr\">myString:</span> <span class=\"string\">Mona</span> <span class=\"string\">the</span> <span class=\"string\">Octocat</span></span><br><span class=\"line\">  <span class=\"attr\">myStringInBraces:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">&#x27;It&#x27;</span><span class=\"string\">&#x27;s open source!&#x27;</span> <span class=\"string\">&#125;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"操作符\"><a href=\"#操作符\" class=\"headerlink\" title=\"操作符\"></a>操作符</h3><p>一些如值比较、逻辑与、逻辑或的操作，不一一列举了。</p>\n<p>注意不是强类型的比较，有一些值转换的逻辑。</p>\n<h3 id=\"内置方法\"><a href=\"#内置方法\" class=\"headerlink\" title=\"内置方法\"></a>内置方法</h3><p>提供了一些内置方法辅助表达式，比如 <code>contains</code> 判断是否包含某个字符，不一一列举了。</p>\n<h3 id=\"状态处理\"><a href=\"#状态处理\" class=\"headerlink\" title=\"状态处理\"></a>状态处理</h3><p>Jobs 的每个步骤会按顺序执行，我们可以在某个步骤中加入对“已经执行的步骤”的状态判断，来决定是否要执行当前步骤。比如，只有青椒清洗步骤成功了，才执行青椒切丝步骤。举例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">steps:</span></span><br><span class=\"line\">  <span class=\"string\">...</span></span><br><span class=\"line\">  <span class=\"comment\"># 前面的步骤都执行成功了，再执行该步骤</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">The</span> <span class=\"string\">job</span> <span class=\"string\">has</span> <span class=\"string\">succeeded</span></span><br><span class=\"line\">    <span class=\"attr\">if:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">success()</span> <span class=\"string\">&#125;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>它还有以下几种状态结果：</p>\n<ul>\n<li><strong>always</strong>，只要执行了</li>\n<li><strong>success</strong>，执行成功了</li>\n<li><strong>cancelled</strong>，执行取消了</li>\n<li><strong>failure</strong>，执行失败了</li>\n</ul>\n<h2 id=\"上下文（重要）\"><a href=\"#上下文（重要）\" class=\"headerlink\" title=\"上下文（重要）\"></a>上下文（重要）</h2><p>上下文指工作流运行中可以访问的属性，你可以在<strong>表达式中</strong>访问上下文，比如访问当前仓库的地址<code>github.repositoryUrl</code>。它是<strong>job 串起来的重要保障</strong>。</p>\n<p>它提供了一组模块的上下文：github、env、job、steps、runner、needs 等等。</p>\n<p>如下演示了一个简单的上下文访问：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">CI</span></span><br><span class=\"line\"><span class=\"attr\">on:</span> <span class=\"string\">push</span></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">prod-check:</span></span><br><span class=\"line\">    <span class=\"attr\">if:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">github.ref</span> <span class=\"string\">==</span> <span class=\"string\">&#x27;refs/heads/main&#x27;</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">run:</span> <span class=\"string\">echo</span> <span class=\"string\">&quot;hello $<span class=\"template-variable\">&#123;&#123; github.actor &#125;&#125;</span>, branch is $GITHUB_REF&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>重要点：</p>\n<ul>\n<li>在不同的节点，上下文的可访问性有所不同，文档贴出了表格，这在使用的时候要注意。</li>\n<li>env 由内往外覆盖</li>\n</ul>\n<h2 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h2><p>还可以在 Workflows、Jobs、Steps 中设置和访问环境变量。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">lint</span></span><br><span class=\"line\"><span class=\"attr\">on:</span> [<span class=\"string\">push</span>]</span><br><span class=\"line\"><span class=\"attr\">env:</span></span><br><span class=\"line\">  <span class=\"attr\">YOUR_NAME:</span> <span class=\"string\">wang</span></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">eslint:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">env:</span></span><br><span class=\"line\">      <span class=\"attr\">YOUR_SEX:</span> <span class=\"string\">boy</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">test</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"attr\">YOUR_AGE:</span> <span class=\"number\">18</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">echo</span> <span class=\"string\">&quot;Hello, $<span class=\"template-variable\">&#123;&#123; env.YOUR_NAME &#125;&#125;</span>, your sex is $YOUR_SEX, your age is $YOUR_AGE&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>也提供一系列系统环境变量供访问，注意避开同名。</p>\n<h2 id=\"收费和限制\"><a href=\"#收费和限制\" class=\"headerlink\" title=\"收费和限制\"></a>收费和限制</h2><p>略</p>\n"},{"title":"6. Managing workflow runs - GitHub Actions","title_url":"github-actions-managing-workflow-runs","date":"2022-07-08T16:00:00.000Z","_content":"\n官方文档：https://docs.github.com/en/actions/using-workflows/manually-running-a-workflow\n\n## 手动执行\n\n设置`event`包含`workflow_dispatch`，可以手动触发，使用 Github CLI、Browser 都可以，文档中呈现了一个流程图示例。\n\n## 重复执行\n\n无\n\n## 取消执行\n\n无\n\n## 审批执行\n\n对于 pull request，可以设置审批执行以防止浪费 actions 资源。\n\n## 审查部署\n\n无\n\n## 开关 workflow\n\n无\n\n## 跳过 workflow\n\n在 commit message 中加入关键词可以跳过 workflow，只对 push、pull_request 事件有效。关键词有：\n\n- [skip ci]\n- [ci skip]\n- [no ci]\n- [skip actions]\n- [actions skip]\n\n也可以在 message 后空两行，然后加入关键词：\n\n- skip-checks:true\n- skip-checks: true\n\n## 删除 workflow\n\n无\n\n## 下载 workflow 归档\n\n可以下载 90 天内的 workflow 归档，操作参考文档。\n","source":"_posts/Github Actions/6. Managing workflow runs.md","raw":"---\ntitle: 6. Managing workflow runs - GitHub Actions\ntitle_url: github-actions-managing-workflow-runs\ndate: 2022-07-09\ntags:\n  - github actions\n  - ci\ncategories:\n  - 架构\n---\n\n官方文档：https://docs.github.com/en/actions/using-workflows/manually-running-a-workflow\n\n## 手动执行\n\n设置`event`包含`workflow_dispatch`，可以手动触发，使用 Github CLI、Browser 都可以，文档中呈现了一个流程图示例。\n\n## 重复执行\n\n无\n\n## 取消执行\n\n无\n\n## 审批执行\n\n对于 pull request，可以设置审批执行以防止浪费 actions 资源。\n\n## 审查部署\n\n无\n\n## 开关 workflow\n\n无\n\n## 跳过 workflow\n\n在 commit message 中加入关键词可以跳过 workflow，只对 push、pull_request 事件有效。关键词有：\n\n- [skip ci]\n- [ci skip]\n- [no ci]\n- [skip actions]\n- [actions skip]\n\n也可以在 message 后空两行，然后加入关键词：\n\n- skip-checks:true\n- skip-checks: true\n\n## 删除 workflow\n\n无\n\n## 下载 workflow 归档\n\n可以下载 90 天内的 workflow 归档，操作参考文档。\n","slug":"Github Actions/6. Managing workflow runs","published":1,"updated":"2023-07-05T05:39:22.718Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cljpap02e000exbrrc80vakuy","content":"<p>官方文档：<a href=\"https://docs.github.com/en/actions/using-workflows/manually-running-a-workflow\">https://docs.github.com/en/actions/using-workflows/manually-running-a-workflow</a></p>\n<h2 id=\"手动执行\"><a href=\"#手动执行\" class=\"headerlink\" title=\"手动执行\"></a>手动执行</h2><p>设置<code>event</code>包含<code>workflow_dispatch</code>，可以手动触发，使用 Github CLI、Browser 都可以，文档中呈现了一个流程图示例。</p>\n<h2 id=\"重复执行\"><a href=\"#重复执行\" class=\"headerlink\" title=\"重复执行\"></a>重复执行</h2><p>无</p>\n<h2 id=\"取消执行\"><a href=\"#取消执行\" class=\"headerlink\" title=\"取消执行\"></a>取消执行</h2><p>无</p>\n<h2 id=\"审批执行\"><a href=\"#审批执行\" class=\"headerlink\" title=\"审批执行\"></a>审批执行</h2><p>对于 pull request，可以设置审批执行以防止浪费 actions 资源。</p>\n<h2 id=\"审查部署\"><a href=\"#审查部署\" class=\"headerlink\" title=\"审查部署\"></a>审查部署</h2><p>无</p>\n<h2 id=\"开关-workflow\"><a href=\"#开关-workflow\" class=\"headerlink\" title=\"开关 workflow\"></a>开关 workflow</h2><p>无</p>\n<h2 id=\"跳过-workflow\"><a href=\"#跳过-workflow\" class=\"headerlink\" title=\"跳过 workflow\"></a>跳过 workflow</h2><p>在 commit message 中加入关键词可以跳过 workflow，只对 push、pull_request 事件有效。关键词有：</p>\n<ul>\n<li>[skip ci]</li>\n<li>[ci skip]</li>\n<li>[no ci]</li>\n<li>[skip actions]</li>\n<li>[actions skip]</li>\n</ul>\n<p>也可以在 message 后空两行，然后加入关键词：</p>\n<ul>\n<li>skip-checks:true</li>\n<li>skip-checks: true</li>\n</ul>\n<h2 id=\"删除-workflow\"><a href=\"#删除-workflow\" class=\"headerlink\" title=\"删除 workflow\"></a>删除 workflow</h2><p>无</p>\n<h2 id=\"下载-workflow-归档\"><a href=\"#下载-workflow-归档\" class=\"headerlink\" title=\"下载 workflow 归档\"></a>下载 workflow 归档</h2><p>可以下载 90 天内的 workflow 归档，操作参考文档。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>官方文档：<a href=\"https://docs.github.com/en/actions/using-workflows/manually-running-a-workflow\">https://docs.github.com/en/actions/using-workflows/manually-running-a-workflow</a></p>\n<h2 id=\"手动执行\"><a href=\"#手动执行\" class=\"headerlink\" title=\"手动执行\"></a>手动执行</h2><p>设置<code>event</code>包含<code>workflow_dispatch</code>，可以手动触发，使用 Github CLI、Browser 都可以，文档中呈现了一个流程图示例。</p>\n<h2 id=\"重复执行\"><a href=\"#重复执行\" class=\"headerlink\" title=\"重复执行\"></a>重复执行</h2><p>无</p>\n<h2 id=\"取消执行\"><a href=\"#取消执行\" class=\"headerlink\" title=\"取消执行\"></a>取消执行</h2><p>无</p>\n<h2 id=\"审批执行\"><a href=\"#审批执行\" class=\"headerlink\" title=\"审批执行\"></a>审批执行</h2><p>对于 pull request，可以设置审批执行以防止浪费 actions 资源。</p>\n<h2 id=\"审查部署\"><a href=\"#审查部署\" class=\"headerlink\" title=\"审查部署\"></a>审查部署</h2><p>无</p>\n<h2 id=\"开关-workflow\"><a href=\"#开关-workflow\" class=\"headerlink\" title=\"开关 workflow\"></a>开关 workflow</h2><p>无</p>\n<h2 id=\"跳过-workflow\"><a href=\"#跳过-workflow\" class=\"headerlink\" title=\"跳过 workflow\"></a>跳过 workflow</h2><p>在 commit message 中加入关键词可以跳过 workflow，只对 push、pull_request 事件有效。关键词有：</p>\n<ul>\n<li>[skip ci]</li>\n<li>[ci skip]</li>\n<li>[no ci]</li>\n<li>[skip actions]</li>\n<li>[actions skip]</li>\n</ul>\n<p>也可以在 message 后空两行，然后加入关键词：</p>\n<ul>\n<li>skip-checks:true</li>\n<li>skip-checks: true</li>\n</ul>\n<h2 id=\"删除-workflow\"><a href=\"#删除-workflow\" class=\"headerlink\" title=\"删除 workflow\"></a>删除 workflow</h2><p>无</p>\n<h2 id=\"下载-workflow-归档\"><a href=\"#下载-workflow-归档\" class=\"headerlink\" title=\"下载 workflow 归档\"></a>下载 workflow 归档</h2><p>可以下载 90 天内的 workflow 归档，操作参考文档。</p>\n"},{"title":"useDeferredValue在性能优化中的使用","title_url":"react-useDeferredValue","date":"2022-08-31T16:00:00.000Z","_content":"\n## 一个卡顿场景\n\n已知浏览器在一帧时间里（默认 16.6 毫秒）要完成好多工作，其中最耗时的是 js 脚本执行和页面渲染。如果 js 脚本耗时太长，那要引起页面渲染掉帧，在用户的体验上就是卡顿。\n\n这里有一个处理用户输入的搜索词语，将结果渲染到一个 dom 列表上的场景：\n\n```tsx\nimport { FC, useMemo, useState } from \"react\";\n\nconst SearchResults: FC<{ query: string }> = ({ query }) => {\n  const datas = useMemo(() => {\n    return new Array(10000).fill(null).map(() => {\n      return `${query} ${Math.random()}`;\n    });\n  }, [query]);\n\n  if (!query) {\n    return null;\n  }\n\n  return (\n    <div>\n      <h2>search \"{query}\" list:</h2>\n      {datas.map((v, k) => {\n        return <p key={k}>{v}</p>;\n      })}\n    </div>\n  );\n};\n\nexport const Main: FC = () => {\n  const [query, setQuery] = useState(\"\");\n\n  return (\n    <>\n      Search:\n      <input\n        value={query}\n        onChange={(e) => {\n          setQuery(e.target.value);\n        }}\n      />\n      <SearchResults query={query} />\n    </>\n  );\n};\n```\n\n当用户每次输入一个字符，就会触发`SearchResults`组件的重新渲染，这个渲染包括`datas`的重新计算，和 dom 结构的重新渲染，这个时间远远超过 16 毫秒，会导致下一个输入值的处理任务一直在等待中，造成卡顿。\n\n## useDeferredValue\n\nReact 提供了`时间切片`的模式，这里不详细展开了，允许你在调度任务的过程中安排高优先级的任务，而`useDeferredValue`就是这个模式的一个 hook，它可以**延迟更新部分 UI**\n\n在之前的代码中，我们稍作修改：\n\n```tsx\n//...\n\nconst [query, setQuery] = useState(\"\");\nconst defreredQuery = useDeferredValue(query);\n\n//...\n<SearchResults query={defreredQuery} />;\n```\n\n当用户**快速**输入一个字符时，`SearchResults`组件的渲染就会被延迟，这样就尽量减少卡顿了。\n\n`useDeferredValue`通过延迟状态的更新来实现这个目的，它不同于节流或防抖的固定时间控制，而是根据一系列复杂调度算法来决定延迟的时间，这样可以尽量减少卡顿的发生。\n","source":"_posts/React/useDeferredValue在性能优化中的使用.md","raw":"---\ntitle: useDeferredValue在性能优化中的使用\ntitle_url: react-useDeferredValue\ndate: 2022-09-01\ntags:\n  - react\ncategories:\n  - react\n---\n\n## 一个卡顿场景\n\n已知浏览器在一帧时间里（默认 16.6 毫秒）要完成好多工作，其中最耗时的是 js 脚本执行和页面渲染。如果 js 脚本耗时太长，那要引起页面渲染掉帧，在用户的体验上就是卡顿。\n\n这里有一个处理用户输入的搜索词语，将结果渲染到一个 dom 列表上的场景：\n\n```tsx\nimport { FC, useMemo, useState } from \"react\";\n\nconst SearchResults: FC<{ query: string }> = ({ query }) => {\n  const datas = useMemo(() => {\n    return new Array(10000).fill(null).map(() => {\n      return `${query} ${Math.random()}`;\n    });\n  }, [query]);\n\n  if (!query) {\n    return null;\n  }\n\n  return (\n    <div>\n      <h2>search \"{query}\" list:</h2>\n      {datas.map((v, k) => {\n        return <p key={k}>{v}</p>;\n      })}\n    </div>\n  );\n};\n\nexport const Main: FC = () => {\n  const [query, setQuery] = useState(\"\");\n\n  return (\n    <>\n      Search:\n      <input\n        value={query}\n        onChange={(e) => {\n          setQuery(e.target.value);\n        }}\n      />\n      <SearchResults query={query} />\n    </>\n  );\n};\n```\n\n当用户每次输入一个字符，就会触发`SearchResults`组件的重新渲染，这个渲染包括`datas`的重新计算，和 dom 结构的重新渲染，这个时间远远超过 16 毫秒，会导致下一个输入值的处理任务一直在等待中，造成卡顿。\n\n## useDeferredValue\n\nReact 提供了`时间切片`的模式，这里不详细展开了，允许你在调度任务的过程中安排高优先级的任务，而`useDeferredValue`就是这个模式的一个 hook，它可以**延迟更新部分 UI**\n\n在之前的代码中，我们稍作修改：\n\n```tsx\n//...\n\nconst [query, setQuery] = useState(\"\");\nconst defreredQuery = useDeferredValue(query);\n\n//...\n<SearchResults query={defreredQuery} />;\n```\n\n当用户**快速**输入一个字符时，`SearchResults`组件的渲染就会被延迟，这样就尽量减少卡顿了。\n\n`useDeferredValue`通过延迟状态的更新来实现这个目的，它不同于节流或防抖的固定时间控制，而是根据一系列复杂调度算法来决定延迟的时间，这样可以尽量减少卡顿的发生。\n","slug":"React/useDeferredValue在性能优化中的使用","published":1,"updated":"2023-07-05T06:01:52.133Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cljpbangm0000sorrdtbb16t9","content":"<h2 id=\"一个卡顿场景\"><a href=\"#一个卡顿场景\" class=\"headerlink\" title=\"一个卡顿场景\"></a>一个卡顿场景</h2><p>已知浏览器在一帧时间里（默认 16.6 毫秒）要完成好多工作，其中最耗时的是 js 脚本执行和页面渲染。如果 js 脚本耗时太长，那要引起页面渲染掉帧，在用户的体验上就是卡顿。</p>\n<p>这里有一个处理用户输入的搜索词语，将结果渲染到一个 dom 列表上的场景：</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"variable constant_\">FC</span>, useMemo, useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">SearchResults</span>: <span class=\"variable constant_\">FC</span>&lt;&#123; <span class=\"attr\">query</span>: <span class=\"built_in\">string</span> &#125;&gt; = <span class=\"function\">(<span class=\"params\">&#123; query &#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> datas = <span class=\"title function_\">useMemo</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(<span class=\"number\">10000</span>).<span class=\"title function_\">fill</span>(<span class=\"literal\">null</span>).<span class=\"title function_\">map</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;query&#125;</span> <span class=\"subst\">$&#123;<span class=\"built_in\">Math</span>.random()&#125;</span>`</span>;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;, [query]);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!query) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>search &quot;&#123;query&#125;&quot; list:<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      &#123;datas.map((v, k) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">        return <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;k&#125;</span>&gt;</span>&#123;v&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span>;</span></span><br><span class=\"line\"><span class=\"language-xml\">      &#125;)&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">Main</span>: <span class=\"variable constant_\">FC</span> = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [query, setQuery] = <span class=\"title function_\">useState</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      Search:</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">input</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">value</span>=<span class=\"string\">&#123;query&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;(e)</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">          setQuery(e.target.value);</span></span><br><span class=\"line\"><span class=\"language-xml\">        &#125;&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      /&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">SearchResults</span> <span class=\"attr\">query</span>=<span class=\"string\">&#123;query&#125;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>当用户每次输入一个字符，就会触发<code>SearchResults</code>组件的重新渲染，这个渲染包括<code>datas</code>的重新计算，和 dom 结构的重新渲染，这个时间远远超过 16 毫秒，会导致下一个输入值的处理任务一直在等待中，造成卡顿。</p>\n<h2 id=\"useDeferredValue\"><a href=\"#useDeferredValue\" class=\"headerlink\" title=\"useDeferredValue\"></a>useDeferredValue</h2><p>React 提供了<code>时间切片</code>的模式，这里不详细展开了，允许你在调度任务的过程中安排高优先级的任务，而<code>useDeferredValue</code>就是这个模式的一个 hook，它可以<strong>延迟更新部分 UI</strong></p>\n<p>在之前的代码中，我们稍作修改：</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> [query, setQuery] = <span class=\"title function_\">useState</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> defreredQuery = <span class=\"title function_\">useDeferredValue</span>(query);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//...</span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">SearchResults</span> <span class=\"attr\">query</span>=<span class=\"string\">&#123;defreredQuery&#125;</span> /&gt;</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>当用户<strong>快速</strong>输入一个字符时，<code>SearchResults</code>组件的渲染就会被延迟，这样就尽量减少卡顿了。</p>\n<p><code>useDeferredValue</code>通过延迟状态的更新来实现这个目的，它不同于节流或防抖的固定时间控制，而是根据一系列复杂调度算法来决定延迟的时间，这样可以尽量减少卡顿的发生。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一个卡顿场景\"><a href=\"#一个卡顿场景\" class=\"headerlink\" title=\"一个卡顿场景\"></a>一个卡顿场景</h2><p>已知浏览器在一帧时间里（默认 16.6 毫秒）要完成好多工作，其中最耗时的是 js 脚本执行和页面渲染。如果 js 脚本耗时太长，那要引起页面渲染掉帧，在用户的体验上就是卡顿。</p>\n<p>这里有一个处理用户输入的搜索词语，将结果渲染到一个 dom 列表上的场景：</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"variable constant_\">FC</span>, useMemo, useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">SearchResults</span>: <span class=\"variable constant_\">FC</span>&lt;&#123; <span class=\"attr\">query</span>: <span class=\"built_in\">string</span> &#125;&gt; = <span class=\"function\">(<span class=\"params\">&#123; query &#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> datas = <span class=\"title function_\">useMemo</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(<span class=\"number\">10000</span>).<span class=\"title function_\">fill</span>(<span class=\"literal\">null</span>).<span class=\"title function_\">map</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;query&#125;</span> <span class=\"subst\">$&#123;<span class=\"built_in\">Math</span>.random()&#125;</span>`</span>;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;, [query]);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!query) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>search &quot;&#123;query&#125;&quot; list:<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      &#123;datas.map((v, k) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">        return <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;k&#125;</span>&gt;</span>&#123;v&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span>;</span></span><br><span class=\"line\"><span class=\"language-xml\">      &#125;)&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">Main</span>: <span class=\"variable constant_\">FC</span> = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [query, setQuery] = <span class=\"title function_\">useState</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      Search:</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">input</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">value</span>=<span class=\"string\">&#123;query&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;(e)</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">          setQuery(e.target.value);</span></span><br><span class=\"line\"><span class=\"language-xml\">        &#125;&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      /&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">SearchResults</span> <span class=\"attr\">query</span>=<span class=\"string\">&#123;query&#125;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>当用户每次输入一个字符，就会触发<code>SearchResults</code>组件的重新渲染，这个渲染包括<code>datas</code>的重新计算，和 dom 结构的重新渲染，这个时间远远超过 16 毫秒，会导致下一个输入值的处理任务一直在等待中，造成卡顿。</p>\n<h2 id=\"useDeferredValue\"><a href=\"#useDeferredValue\" class=\"headerlink\" title=\"useDeferredValue\"></a>useDeferredValue</h2><p>React 提供了<code>时间切片</code>的模式，这里不详细展开了，允许你在调度任务的过程中安排高优先级的任务，而<code>useDeferredValue</code>就是这个模式的一个 hook，它可以<strong>延迟更新部分 UI</strong></p>\n<p>在之前的代码中，我们稍作修改：</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> [query, setQuery] = <span class=\"title function_\">useState</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> defreredQuery = <span class=\"title function_\">useDeferredValue</span>(query);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//...</span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">SearchResults</span> <span class=\"attr\">query</span>=<span class=\"string\">&#123;defreredQuery&#125;</span> /&gt;</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>当用户<strong>快速</strong>输入一个字符时，<code>SearchResults</code>组件的渲染就会被延迟，这样就尽量减少卡顿了。</p>\n<p><code>useDeferredValue</code>通过延迟状态的更新来实现这个目的，它不同于节流或防抖的固定时间控制，而是根据一系列复杂调度算法来决定延迟的时间，这样可以尽量减少卡顿的发生。</p>\n"},{"title":"useTransition在性能优化中的使用","title_url":"react-useTransition","date":"2022-09-04T16:00:00.000Z","_content":"\n`useTransition` is a React Hook that lets you update the state without blocking the UI.\n\n文档中简单一句话说明`useTransition`的用途：不阻塞 UI 的情况下更新**状态**。\n\n## 解决什么问题？\n\n正常代码下，JavaScript 是单线程的，所以执行一段耗时的代码，会阻塞 UI 的渲染，导致页面卡顿。React 提供了**时间切片**的功能来尽量确保一帧中有充足的时间来渲染 UI，而`useTransition`就是在这个基础上，可以在不阻塞 UI 的情况下使用时间分片特性**更新状态**。\n\n## 一个例子\n\n先看下卡顿是如何形成的，一个简单的代码，每 500ms，更新`name`状态。另外点击按钮的时候，更新一系列状态并渲染到 dom 中。\n\n```tsx\nconst getDatas = () => {\n  const datas = [];\n  for (let i = 1; i <= 2000; i += 1) {\n    const s = Math.random() * Math.random();\n    datas.push(s);\n  }\n  return datas;\n};\n\nconst Main: FC = () => {\n  const [name, setName] = useState(\"world\");\n\n  const [datas1, setDatas1] = useState<number[]>([]);\n  const [datas2, setDatas2] = useState<number[]>([]);\n  const [datas3, setDatas3] = useState<number[]>([]);\n  const [datas4, setDatas4] = useState<number[]>([]);\n  const [datas5, setDatas5] = useState<number[]>([]);\n  const [datas6, setDatas6] = useState<number[]>([]);\n  const [datas7, setDatas7] = useState<number[]>([]);\n  const [datas8, setDatas8] = useState<number[]>([]);\n\n  const onClick1 = useCallback(() => {\n    setDatas1(getDatas());\n    setDatas2(getDatas());\n    setDatas3(getDatas());\n    setDatas4(getDatas());\n    setDatas5(getDatas());\n    setDatas6(getDatas());\n    setDatas7(getDatas());\n    setDatas8(getDatas());\n  }, []);\n\n  useEffect(() => {\n    window.setInterval(() => {\n      setName(`world ${Math.random()}`);\n    }, 500);\n  }, []);\n\n  return (\n    <div>\n      hello {name}\n      <br />\n      <button onClick={onClick1}>click me</button>\n      <br />\n      <div>\n        {datas1.map((v) => {\n          return <div key={v}>{v}</div>;\n        })}\n      </div>\n      <div>\n        {datas2.map((v) => {\n          return <div key={v}>{v}</div>;\n        })}\n      </div>\n      <div>\n        {datas3.map((v) => {\n          return <div key={v}>{v}</div>;\n        })}\n      </div>\n      <div>\n        {datas4.map((v) => {\n          return <div key={v}>{v}</div>;\n        })}\n      </div>\n      <div>\n        {datas5.map((v) => {\n          return <div key={v}>{v}</div>;\n        })}\n      </div>\n      <div>\n        {datas6.map((v) => {\n          return <div key={v}>{v}</div>;\n        })}\n      </div>\n      <div>\n        {datas7.map((v) => {\n          return <div key={v}>{v}</div>;\n        })}\n      </div>\n      <div>\n        {datas8.map((v) => {\n          return <div key={v}>{v}</div>;\n        })}\n      </div>\n    </div>\n  );\n};\n```\n\n**首先不点击按钮，观察 5 秒，没有卡顿现象，性能表现如图：**\n\n![](https://cdn.jsdelivr.net/gh/taoliujun/taoliujun.github.io/assets/202307041609217.png)\n\n可以看到有几个微微凸起的黄色点，对应着每次的`hello`状态更新和渲染，它们的执行时间都在 1ms，没有超过一帧的时间。\n\n![](https://cdn.jsdelivr.net/gh/taoliujun/taoliujun.github.io/assets/202307041610767.png)\n\n选取其中一个黄色的点，查看它的详情。React 的调度器、协调器、渲染器创建了对应的任务，分步执行了任务，具体可阅读 React 架构的相关文章。\n\n**然后连续点几次按钮，`hello`的渲染出现明显的卡顿，性能表现如图：**\n\n![](https://cdn.jsdelivr.net/gh/taoliujun/taoliujun.github.io/assets/202307041608992.png)\n\n在性能图中截取的一段时间中，黄色是脚本执行时间，灰色是 UI 渲染时间，白色是空闲时间（我停止点击了一会儿），在每帧里，要跑完所有的状态变更和 UI 渲染，`datas`系列的状态变更和渲染占据了大量的时间，基本是阻塞了`hello`的状态变更和渲染。\n\n**只点击一次，性能表现如图：**\n\n![](https://cdn.jsdelivr.net/gh/taoliujun/taoliujun.github.io/assets/202307041625903.png)\n\n可以看到几个 Task，第一个 Task 就是在更新`datas`系列状态和渲染，它占据了太多帧的时间，导致`hello`的状态变更和渲染被推迟到后面的帧。\n\n## 优化它\n\n前面说到，React 的架构中实现了**时间切片**，它允许开发者将*不重要*的变更推迟到后面的帧，这样就可以尽量保证优先执行默认任务。使用`useTransition`改下代码：\n\n```tsx\nconst [pending, startTransition] = useTransition();\n\nconst onClick1 = useCallback(() => {\n  startTransition(() => {\n    setDatas1(getDatas());\n    setDatas2(getDatas());\n    setDatas3(getDatas());\n    setDatas4(getDatas());\n    setDatas5(getDatas());\n    setDatas6(getDatas());\n    setDatas7(getDatas());\n    setDatas8(getDatas());\n  });\n}, []);\n```\n\n**再次连续点击按钮，卡顿现象明显减轻很多，性能表现如下：**\n\n![](https://cdn.jsdelivr.net/gh/taoliujun/taoliujun.github.io/assets/202307041629743.png)\n\n一看起来，执行时间还是很长，那么为什么`hello`渲染看起来不卡顿呢？\n\n**只点一次，看看性能表现：**\n\n![](https://cdn.jsdelivr.net/gh/taoliujun/taoliujun.github.io/assets/202307041631650.png)\n\n查看几个 Task 的详情，发现`datas`系列状态的更新，被分配在了多个 Task 中，中间还穿插了`hello`的状态更新的任务。这也印证了`useTransition`的实现背景：将不重要的任务通过时间切片架构，分配到多帧中，优先执行其他任务，从而实现不卡顿的目的。\n\n## 注意事项\n\n- `useTransition`是个 hook，它的返回值还包括了一个 pending 状态，用来表示是否处于时间切片的过程中，可以用来优化 UI，比如显示一个 loading。\n\n- 你也可以使用`startTransition`这个 util 函数代替 hook 的使用。\n\n- 时间切片架构是调度状态变化的，所以`startTransition`的入参函数里，将状态更新标记为可切片，普通的代码段不会被标记。所以简单的说，你还是得将一个状态变更的执行时间控制在 5ms 内。\n","source":"_posts/React/useTransition在性能优化中的使用.md","raw":"---\ntitle: useTransition在性能优化中的使用\ntitle_url: react-useTransition\ndate: 2022-09-05\ntags:\n  - react\ncategories:\n  - react\n---\n\n`useTransition` is a React Hook that lets you update the state without blocking the UI.\n\n文档中简单一句话说明`useTransition`的用途：不阻塞 UI 的情况下更新**状态**。\n\n## 解决什么问题？\n\n正常代码下，JavaScript 是单线程的，所以执行一段耗时的代码，会阻塞 UI 的渲染，导致页面卡顿。React 提供了**时间切片**的功能来尽量确保一帧中有充足的时间来渲染 UI，而`useTransition`就是在这个基础上，可以在不阻塞 UI 的情况下使用时间分片特性**更新状态**。\n\n## 一个例子\n\n先看下卡顿是如何形成的，一个简单的代码，每 500ms，更新`name`状态。另外点击按钮的时候，更新一系列状态并渲染到 dom 中。\n\n```tsx\nconst getDatas = () => {\n  const datas = [];\n  for (let i = 1; i <= 2000; i += 1) {\n    const s = Math.random() * Math.random();\n    datas.push(s);\n  }\n  return datas;\n};\n\nconst Main: FC = () => {\n  const [name, setName] = useState(\"world\");\n\n  const [datas1, setDatas1] = useState<number[]>([]);\n  const [datas2, setDatas2] = useState<number[]>([]);\n  const [datas3, setDatas3] = useState<number[]>([]);\n  const [datas4, setDatas4] = useState<number[]>([]);\n  const [datas5, setDatas5] = useState<number[]>([]);\n  const [datas6, setDatas6] = useState<number[]>([]);\n  const [datas7, setDatas7] = useState<number[]>([]);\n  const [datas8, setDatas8] = useState<number[]>([]);\n\n  const onClick1 = useCallback(() => {\n    setDatas1(getDatas());\n    setDatas2(getDatas());\n    setDatas3(getDatas());\n    setDatas4(getDatas());\n    setDatas5(getDatas());\n    setDatas6(getDatas());\n    setDatas7(getDatas());\n    setDatas8(getDatas());\n  }, []);\n\n  useEffect(() => {\n    window.setInterval(() => {\n      setName(`world ${Math.random()}`);\n    }, 500);\n  }, []);\n\n  return (\n    <div>\n      hello {name}\n      <br />\n      <button onClick={onClick1}>click me</button>\n      <br />\n      <div>\n        {datas1.map((v) => {\n          return <div key={v}>{v}</div>;\n        })}\n      </div>\n      <div>\n        {datas2.map((v) => {\n          return <div key={v}>{v}</div>;\n        })}\n      </div>\n      <div>\n        {datas3.map((v) => {\n          return <div key={v}>{v}</div>;\n        })}\n      </div>\n      <div>\n        {datas4.map((v) => {\n          return <div key={v}>{v}</div>;\n        })}\n      </div>\n      <div>\n        {datas5.map((v) => {\n          return <div key={v}>{v}</div>;\n        })}\n      </div>\n      <div>\n        {datas6.map((v) => {\n          return <div key={v}>{v}</div>;\n        })}\n      </div>\n      <div>\n        {datas7.map((v) => {\n          return <div key={v}>{v}</div>;\n        })}\n      </div>\n      <div>\n        {datas8.map((v) => {\n          return <div key={v}>{v}</div>;\n        })}\n      </div>\n    </div>\n  );\n};\n```\n\n**首先不点击按钮，观察 5 秒，没有卡顿现象，性能表现如图：**\n\n![](https://cdn.jsdelivr.net/gh/taoliujun/taoliujun.github.io/assets/202307041609217.png)\n\n可以看到有几个微微凸起的黄色点，对应着每次的`hello`状态更新和渲染，它们的执行时间都在 1ms，没有超过一帧的时间。\n\n![](https://cdn.jsdelivr.net/gh/taoliujun/taoliujun.github.io/assets/202307041610767.png)\n\n选取其中一个黄色的点，查看它的详情。React 的调度器、协调器、渲染器创建了对应的任务，分步执行了任务，具体可阅读 React 架构的相关文章。\n\n**然后连续点几次按钮，`hello`的渲染出现明显的卡顿，性能表现如图：**\n\n![](https://cdn.jsdelivr.net/gh/taoliujun/taoliujun.github.io/assets/202307041608992.png)\n\n在性能图中截取的一段时间中，黄色是脚本执行时间，灰色是 UI 渲染时间，白色是空闲时间（我停止点击了一会儿），在每帧里，要跑完所有的状态变更和 UI 渲染，`datas`系列的状态变更和渲染占据了大量的时间，基本是阻塞了`hello`的状态变更和渲染。\n\n**只点击一次，性能表现如图：**\n\n![](https://cdn.jsdelivr.net/gh/taoliujun/taoliujun.github.io/assets/202307041625903.png)\n\n可以看到几个 Task，第一个 Task 就是在更新`datas`系列状态和渲染，它占据了太多帧的时间，导致`hello`的状态变更和渲染被推迟到后面的帧。\n\n## 优化它\n\n前面说到，React 的架构中实现了**时间切片**，它允许开发者将*不重要*的变更推迟到后面的帧，这样就可以尽量保证优先执行默认任务。使用`useTransition`改下代码：\n\n```tsx\nconst [pending, startTransition] = useTransition();\n\nconst onClick1 = useCallback(() => {\n  startTransition(() => {\n    setDatas1(getDatas());\n    setDatas2(getDatas());\n    setDatas3(getDatas());\n    setDatas4(getDatas());\n    setDatas5(getDatas());\n    setDatas6(getDatas());\n    setDatas7(getDatas());\n    setDatas8(getDatas());\n  });\n}, []);\n```\n\n**再次连续点击按钮，卡顿现象明显减轻很多，性能表现如下：**\n\n![](https://cdn.jsdelivr.net/gh/taoliujun/taoliujun.github.io/assets/202307041629743.png)\n\n一看起来，执行时间还是很长，那么为什么`hello`渲染看起来不卡顿呢？\n\n**只点一次，看看性能表现：**\n\n![](https://cdn.jsdelivr.net/gh/taoliujun/taoliujun.github.io/assets/202307041631650.png)\n\n查看几个 Task 的详情，发现`datas`系列状态的更新，被分配在了多个 Task 中，中间还穿插了`hello`的状态更新的任务。这也印证了`useTransition`的实现背景：将不重要的任务通过时间切片架构，分配到多帧中，优先执行其他任务，从而实现不卡顿的目的。\n\n## 注意事项\n\n- `useTransition`是个 hook，它的返回值还包括了一个 pending 状态，用来表示是否处于时间切片的过程中，可以用来优化 UI，比如显示一个 loading。\n\n- 你也可以使用`startTransition`这个 util 函数代替 hook 的使用。\n\n- 时间切片架构是调度状态变化的，所以`startTransition`的入参函数里，将状态更新标记为可切片，普通的代码段不会被标记。所以简单的说，你还是得将一个状态变更的执行时间控制在 5ms 内。\n","slug":"React/useTransition在性能优化中的使用","published":1,"updated":"2023-07-05T06:01:56.244Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cljpbangq0001sorr21j6gtsw","content":"<p><code>useTransition</code> is a React Hook that lets you update the state without blocking the UI.</p>\n<p>文档中简单一句话说明<code>useTransition</code>的用途：不阻塞 UI 的情况下更新<strong>状态</strong>。</p>\n<h2 id=\"解决什么问题？\"><a href=\"#解决什么问题？\" class=\"headerlink\" title=\"解决什么问题？\"></a>解决什么问题？</h2><p>正常代码下，JavaScript 是单线程的，所以执行一段耗时的代码，会阻塞 UI 的渲染，导致页面卡顿。React 提供了<strong>时间切片</strong>的功能来尽量确保一帧中有充足的时间来渲染 UI，而<code>useTransition</code>就是在这个基础上，可以在不阻塞 UI 的情况下使用时间分片特性<strong>更新状态</strong>。</p>\n<h2 id=\"一个例子\"><a href=\"#一个例子\" class=\"headerlink\" title=\"一个例子\"></a>一个例子</h2><p>先看下卡顿是如何形成的，一个简单的代码，每 500ms，更新<code>name</code>状态。另外点击按钮的时候，更新一系列状态并渲染到 dom 中。</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">getDatas</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> datas = [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">2000</span>; i += <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> s = <span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() * <span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>();</span><br><span class=\"line\">    datas.<span class=\"title function_\">push</span>(s);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> datas;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Main</span>: <span class=\"variable constant_\">FC</span> = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [name, setName] = <span class=\"title function_\">useState</span>(<span class=\"string\">&quot;world&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> [datas1, setDatas1] = useState&lt;<span class=\"built_in\">number</span>[]&gt;([]);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [datas2, setDatas2] = useState&lt;<span class=\"built_in\">number</span>[]&gt;([]);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [datas3, setDatas3] = useState&lt;<span class=\"built_in\">number</span>[]&gt;([]);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [datas4, setDatas4] = useState&lt;<span class=\"built_in\">number</span>[]&gt;([]);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [datas5, setDatas5] = useState&lt;<span class=\"built_in\">number</span>[]&gt;([]);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [datas6, setDatas6] = useState&lt;<span class=\"built_in\">number</span>[]&gt;([]);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [datas7, setDatas7] = useState&lt;<span class=\"built_in\">number</span>[]&gt;([]);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [datas8, setDatas8] = useState&lt;<span class=\"built_in\">number</span>[]&gt;([]);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> onClick1 = <span class=\"title function_\">useCallback</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">setDatas1</span>(<span class=\"title function_\">getDatas</span>());</span><br><span class=\"line\">    <span class=\"title function_\">setDatas2</span>(<span class=\"title function_\">getDatas</span>());</span><br><span class=\"line\">    <span class=\"title function_\">setDatas3</span>(<span class=\"title function_\">getDatas</span>());</span><br><span class=\"line\">    <span class=\"title function_\">setDatas4</span>(<span class=\"title function_\">getDatas</span>());</span><br><span class=\"line\">    <span class=\"title function_\">setDatas5</span>(<span class=\"title function_\">getDatas</span>());</span><br><span class=\"line\">    <span class=\"title function_\">setDatas6</span>(<span class=\"title function_\">getDatas</span>());</span><br><span class=\"line\">    <span class=\"title function_\">setDatas7</span>(<span class=\"title function_\">getDatas</span>());</span><br><span class=\"line\">    <span class=\"title function_\">setDatas8</span>(<span class=\"title function_\">getDatas</span>());</span><br><span class=\"line\">  &#125;, []);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">window</span>.<span class=\"built_in\">setInterval</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">setName</span>(<span class=\"string\">`world <span class=\"subst\">$&#123;<span class=\"built_in\">Math</span>.random()&#125;</span>`</span>);</span><br><span class=\"line\">    &#125;, <span class=\"number\">500</span>);</span><br><span class=\"line\">  &#125;, []);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      hello &#123;name&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;onClick1&#125;</span>&gt;</span>click me<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        &#123;datas1.map((v) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">          return <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;v&#125;</span>&gt;</span>&#123;v&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>;</span></span><br><span class=\"line\"><span class=\"language-xml\">        &#125;)&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        &#123;datas2.map((v) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">          return <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;v&#125;</span>&gt;</span>&#123;v&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>;</span></span><br><span class=\"line\"><span class=\"language-xml\">        &#125;)&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        &#123;datas3.map((v) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">          return <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;v&#125;</span>&gt;</span>&#123;v&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>;</span></span><br><span class=\"line\"><span class=\"language-xml\">        &#125;)&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        &#123;datas4.map((v) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">          return <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;v&#125;</span>&gt;</span>&#123;v&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>;</span></span><br><span class=\"line\"><span class=\"language-xml\">        &#125;)&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        &#123;datas5.map((v) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">          return <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;v&#125;</span>&gt;</span>&#123;v&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>;</span></span><br><span class=\"line\"><span class=\"language-xml\">        &#125;)&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        &#123;datas6.map((v) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">          return <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;v&#125;</span>&gt;</span>&#123;v&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>;</span></span><br><span class=\"line\"><span class=\"language-xml\">        &#125;)&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        &#123;datas7.map((v) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">          return <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;v&#125;</span>&gt;</span>&#123;v&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>;</span></span><br><span class=\"line\"><span class=\"language-xml\">        &#125;)&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        &#123;datas8.map((v) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">          return <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;v&#125;</span>&gt;</span>&#123;v&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>;</span></span><br><span class=\"line\"><span class=\"language-xml\">        &#125;)&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>首先不点击按钮，观察 5 秒，没有卡顿现象，性能表现如图：</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/taoliujun/taoliujun.github.io/assets/202307041609217.png\"></p>\n<p>可以看到有几个微微凸起的黄色点，对应着每次的<code>hello</code>状态更新和渲染，它们的执行时间都在 1ms，没有超过一帧的时间。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/taoliujun/taoliujun.github.io/assets/202307041610767.png\"></p>\n<p>选取其中一个黄色的点，查看它的详情。React 的调度器、协调器、渲染器创建了对应的任务，分步执行了任务，具体可阅读 React 架构的相关文章。</p>\n<p><strong>然后连续点几次按钮，<code>hello</code>的渲染出现明显的卡顿，性能表现如图：</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/taoliujun/taoliujun.github.io/assets/202307041608992.png\"></p>\n<p>在性能图中截取的一段时间中，黄色是脚本执行时间，灰色是 UI 渲染时间，白色是空闲时间（我停止点击了一会儿），在每帧里，要跑完所有的状态变更和 UI 渲染，<code>datas</code>系列的状态变更和渲染占据了大量的时间，基本是阻塞了<code>hello</code>的状态变更和渲染。</p>\n<p><strong>只点击一次，性能表现如图：</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/taoliujun/taoliujun.github.io/assets/202307041625903.png\"></p>\n<p>可以看到几个 Task，第一个 Task 就是在更新<code>datas</code>系列状态和渲染，它占据了太多帧的时间，导致<code>hello</code>的状态变更和渲染被推迟到后面的帧。</p>\n<h2 id=\"优化它\"><a href=\"#优化它\" class=\"headerlink\" title=\"优化它\"></a>优化它</h2><p>前面说到，React 的架构中实现了<strong>时间切片</strong>，它允许开发者将<em>不重要</em>的变更推迟到后面的帧，这样就可以尽量保证优先执行默认任务。使用<code>useTransition</code>改下代码：</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [pending, startTransition] = <span class=\"title function_\">useTransition</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> onClick1 = <span class=\"title function_\">useCallback</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">startTransition</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">setDatas1</span>(<span class=\"title function_\">getDatas</span>());</span><br><span class=\"line\">    <span class=\"title function_\">setDatas2</span>(<span class=\"title function_\">getDatas</span>());</span><br><span class=\"line\">    <span class=\"title function_\">setDatas3</span>(<span class=\"title function_\">getDatas</span>());</span><br><span class=\"line\">    <span class=\"title function_\">setDatas4</span>(<span class=\"title function_\">getDatas</span>());</span><br><span class=\"line\">    <span class=\"title function_\">setDatas5</span>(<span class=\"title function_\">getDatas</span>());</span><br><span class=\"line\">    <span class=\"title function_\">setDatas6</span>(<span class=\"title function_\">getDatas</span>());</span><br><span class=\"line\">    <span class=\"title function_\">setDatas7</span>(<span class=\"title function_\">getDatas</span>());</span><br><span class=\"line\">    <span class=\"title function_\">setDatas8</span>(<span class=\"title function_\">getDatas</span>());</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;, []);</span><br></pre></td></tr></table></figure>\n\n<p><strong>再次连续点击按钮，卡顿现象明显减轻很多，性能表现如下：</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/taoliujun/taoliujun.github.io/assets/202307041629743.png\"></p>\n<p>一看起来，执行时间还是很长，那么为什么<code>hello</code>渲染看起来不卡顿呢？</p>\n<p><strong>只点一次，看看性能表现：</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/taoliujun/taoliujun.github.io/assets/202307041631650.png\"></p>\n<p>查看几个 Task 的详情，发现<code>datas</code>系列状态的更新，被分配在了多个 Task 中，中间还穿插了<code>hello</code>的状态更新的任务。这也印证了<code>useTransition</code>的实现背景：将不重要的任务通过时间切片架构，分配到多帧中，优先执行其他任务，从而实现不卡顿的目的。</p>\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><ul>\n<li><p><code>useTransition</code>是个 hook，它的返回值还包括了一个 pending 状态，用来表示是否处于时间切片的过程中，可以用来优化 UI，比如显示一个 loading。</p>\n</li>\n<li><p>你也可以使用<code>startTransition</code>这个 util 函数代替 hook 的使用。</p>\n</li>\n<li><p>时间切片架构是调度状态变化的，所以<code>startTransition</code>的入参函数里，将状态更新标记为可切片，普通的代码段不会被标记。所以简单的说，你还是得将一个状态变更的执行时间控制在 5ms 内。</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><code>useTransition</code> is a React Hook that lets you update the state without blocking the UI.</p>\n<p>文档中简单一句话说明<code>useTransition</code>的用途：不阻塞 UI 的情况下更新<strong>状态</strong>。</p>\n<h2 id=\"解决什么问题？\"><a href=\"#解决什么问题？\" class=\"headerlink\" title=\"解决什么问题？\"></a>解决什么问题？</h2><p>正常代码下，JavaScript 是单线程的，所以执行一段耗时的代码，会阻塞 UI 的渲染，导致页面卡顿。React 提供了<strong>时间切片</strong>的功能来尽量确保一帧中有充足的时间来渲染 UI，而<code>useTransition</code>就是在这个基础上，可以在不阻塞 UI 的情况下使用时间分片特性<strong>更新状态</strong>。</p>\n<h2 id=\"一个例子\"><a href=\"#一个例子\" class=\"headerlink\" title=\"一个例子\"></a>一个例子</h2><p>先看下卡顿是如何形成的，一个简单的代码，每 500ms，更新<code>name</code>状态。另外点击按钮的时候，更新一系列状态并渲染到 dom 中。</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">getDatas</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> datas = [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">2000</span>; i += <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> s = <span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() * <span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>();</span><br><span class=\"line\">    datas.<span class=\"title function_\">push</span>(s);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> datas;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Main</span>: <span class=\"variable constant_\">FC</span> = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [name, setName] = <span class=\"title function_\">useState</span>(<span class=\"string\">&quot;world&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> [datas1, setDatas1] = useState&lt;<span class=\"built_in\">number</span>[]&gt;([]);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [datas2, setDatas2] = useState&lt;<span class=\"built_in\">number</span>[]&gt;([]);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [datas3, setDatas3] = useState&lt;<span class=\"built_in\">number</span>[]&gt;([]);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [datas4, setDatas4] = useState&lt;<span class=\"built_in\">number</span>[]&gt;([]);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [datas5, setDatas5] = useState&lt;<span class=\"built_in\">number</span>[]&gt;([]);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [datas6, setDatas6] = useState&lt;<span class=\"built_in\">number</span>[]&gt;([]);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [datas7, setDatas7] = useState&lt;<span class=\"built_in\">number</span>[]&gt;([]);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [datas8, setDatas8] = useState&lt;<span class=\"built_in\">number</span>[]&gt;([]);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> onClick1 = <span class=\"title function_\">useCallback</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">setDatas1</span>(<span class=\"title function_\">getDatas</span>());</span><br><span class=\"line\">    <span class=\"title function_\">setDatas2</span>(<span class=\"title function_\">getDatas</span>());</span><br><span class=\"line\">    <span class=\"title function_\">setDatas3</span>(<span class=\"title function_\">getDatas</span>());</span><br><span class=\"line\">    <span class=\"title function_\">setDatas4</span>(<span class=\"title function_\">getDatas</span>());</span><br><span class=\"line\">    <span class=\"title function_\">setDatas5</span>(<span class=\"title function_\">getDatas</span>());</span><br><span class=\"line\">    <span class=\"title function_\">setDatas6</span>(<span class=\"title function_\">getDatas</span>());</span><br><span class=\"line\">    <span class=\"title function_\">setDatas7</span>(<span class=\"title function_\">getDatas</span>());</span><br><span class=\"line\">    <span class=\"title function_\">setDatas8</span>(<span class=\"title function_\">getDatas</span>());</span><br><span class=\"line\">  &#125;, []);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">window</span>.<span class=\"built_in\">setInterval</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">setName</span>(<span class=\"string\">`world <span class=\"subst\">$&#123;<span class=\"built_in\">Math</span>.random()&#125;</span>`</span>);</span><br><span class=\"line\">    &#125;, <span class=\"number\">500</span>);</span><br><span class=\"line\">  &#125;, []);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      hello &#123;name&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;onClick1&#125;</span>&gt;</span>click me<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        &#123;datas1.map((v) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">          return <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;v&#125;</span>&gt;</span>&#123;v&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>;</span></span><br><span class=\"line\"><span class=\"language-xml\">        &#125;)&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        &#123;datas2.map((v) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">          return <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;v&#125;</span>&gt;</span>&#123;v&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>;</span></span><br><span class=\"line\"><span class=\"language-xml\">        &#125;)&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        &#123;datas3.map((v) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">          return <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;v&#125;</span>&gt;</span>&#123;v&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>;</span></span><br><span class=\"line\"><span class=\"language-xml\">        &#125;)&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        &#123;datas4.map((v) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">          return <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;v&#125;</span>&gt;</span>&#123;v&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>;</span></span><br><span class=\"line\"><span class=\"language-xml\">        &#125;)&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        &#123;datas5.map((v) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">          return <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;v&#125;</span>&gt;</span>&#123;v&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>;</span></span><br><span class=\"line\"><span class=\"language-xml\">        &#125;)&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        &#123;datas6.map((v) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">          return <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;v&#125;</span>&gt;</span>&#123;v&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>;</span></span><br><span class=\"line\"><span class=\"language-xml\">        &#125;)&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        &#123;datas7.map((v) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">          return <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;v&#125;</span>&gt;</span>&#123;v&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>;</span></span><br><span class=\"line\"><span class=\"language-xml\">        &#125;)&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        &#123;datas8.map((v) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">          return <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;v&#125;</span>&gt;</span>&#123;v&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>;</span></span><br><span class=\"line\"><span class=\"language-xml\">        &#125;)&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>首先不点击按钮，观察 5 秒，没有卡顿现象，性能表现如图：</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/taoliujun/taoliujun.github.io/assets/202307041609217.png\"></p>\n<p>可以看到有几个微微凸起的黄色点，对应着每次的<code>hello</code>状态更新和渲染，它们的执行时间都在 1ms，没有超过一帧的时间。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/taoliujun/taoliujun.github.io/assets/202307041610767.png\"></p>\n<p>选取其中一个黄色的点，查看它的详情。React 的调度器、协调器、渲染器创建了对应的任务，分步执行了任务，具体可阅读 React 架构的相关文章。</p>\n<p><strong>然后连续点几次按钮，<code>hello</code>的渲染出现明显的卡顿，性能表现如图：</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/taoliujun/taoliujun.github.io/assets/202307041608992.png\"></p>\n<p>在性能图中截取的一段时间中，黄色是脚本执行时间，灰色是 UI 渲染时间，白色是空闲时间（我停止点击了一会儿），在每帧里，要跑完所有的状态变更和 UI 渲染，<code>datas</code>系列的状态变更和渲染占据了大量的时间，基本是阻塞了<code>hello</code>的状态变更和渲染。</p>\n<p><strong>只点击一次，性能表现如图：</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/taoliujun/taoliujun.github.io/assets/202307041625903.png\"></p>\n<p>可以看到几个 Task，第一个 Task 就是在更新<code>datas</code>系列状态和渲染，它占据了太多帧的时间，导致<code>hello</code>的状态变更和渲染被推迟到后面的帧。</p>\n<h2 id=\"优化它\"><a href=\"#优化它\" class=\"headerlink\" title=\"优化它\"></a>优化它</h2><p>前面说到，React 的架构中实现了<strong>时间切片</strong>，它允许开发者将<em>不重要</em>的变更推迟到后面的帧，这样就可以尽量保证优先执行默认任务。使用<code>useTransition</code>改下代码：</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [pending, startTransition] = <span class=\"title function_\">useTransition</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> onClick1 = <span class=\"title function_\">useCallback</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">startTransition</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">setDatas1</span>(<span class=\"title function_\">getDatas</span>());</span><br><span class=\"line\">    <span class=\"title function_\">setDatas2</span>(<span class=\"title function_\">getDatas</span>());</span><br><span class=\"line\">    <span class=\"title function_\">setDatas3</span>(<span class=\"title function_\">getDatas</span>());</span><br><span class=\"line\">    <span class=\"title function_\">setDatas4</span>(<span class=\"title function_\">getDatas</span>());</span><br><span class=\"line\">    <span class=\"title function_\">setDatas5</span>(<span class=\"title function_\">getDatas</span>());</span><br><span class=\"line\">    <span class=\"title function_\">setDatas6</span>(<span class=\"title function_\">getDatas</span>());</span><br><span class=\"line\">    <span class=\"title function_\">setDatas7</span>(<span class=\"title function_\">getDatas</span>());</span><br><span class=\"line\">    <span class=\"title function_\">setDatas8</span>(<span class=\"title function_\">getDatas</span>());</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;, []);</span><br></pre></td></tr></table></figure>\n\n<p><strong>再次连续点击按钮，卡顿现象明显减轻很多，性能表现如下：</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/taoliujun/taoliujun.github.io/assets/202307041629743.png\"></p>\n<p>一看起来，执行时间还是很长，那么为什么<code>hello</code>渲染看起来不卡顿呢？</p>\n<p><strong>只点一次，看看性能表现：</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/taoliujun/taoliujun.github.io/assets/202307041631650.png\"></p>\n<p>查看几个 Task 的详情，发现<code>datas</code>系列状态的更新，被分配在了多个 Task 中，中间还穿插了<code>hello</code>的状态更新的任务。这也印证了<code>useTransition</code>的实现背景：将不重要的任务通过时间切片架构，分配到多帧中，优先执行其他任务，从而实现不卡顿的目的。</p>\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><ul>\n<li><p><code>useTransition</code>是个 hook，它的返回值还包括了一个 pending 状态，用来表示是否处于时间切片的过程中，可以用来优化 UI，比如显示一个 loading。</p>\n</li>\n<li><p>你也可以使用<code>startTransition</code>这个 util 函数代替 hook 的使用。</p>\n</li>\n<li><p>时间切片架构是调度状态变化的，所以<code>startTransition</code>的入参函数里，将状态更新标记为可切片，普通的代码段不会被标记。所以简单的说，你还是得将一个状态变更的执行时间控制在 5ms 内。</p>\n</li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cljpap0250000xbrr3far57p7","category_id":"cljp9zm1s0002aarre3mzetj7","_id":"cljpap02c0006xbrreupi3r6w"},{"post_id":"cljpap0290001xbrrhwwa0hdt","category_id":"cljp9zm1s0002aarre3mzetj7","_id":"cljpap02d0009xbrr5z691xtm"},{"post_id":"cljpap02a0003xbrrh0tkbbvj","category_id":"cljp9zm1s0002aarre3mzetj7","_id":"cljpap02e000cxbrrhtf1h7f7"},{"post_id":"cljpap02c0005xbrre1gg0q6s","category_id":"cljp9zm1s0002aarre3mzetj7","_id":"cljpap02e000fxbrrhgc52as8"},{"post_id":"cljpap02c0008xbrrgcou02ym","category_id":"cljp9zm1s0002aarre3mzetj7","_id":"cljpap02f000hxbrrei7a5omg"},{"post_id":"cljpap02d000bxbrr9ylt7zc4","category_id":"cljp9zm1s0002aarre3mzetj7","_id":"cljpap02f000jxbrr5dp8aly7"},{"post_id":"cljpap02e000exbrrc80vakuy","category_id":"cljp9zm1s0002aarre3mzetj7","_id":"cljpap02f000lxbrr7nfp3l03"},{"post_id":"cljpbangm0000sorrdtbb16t9","category_id":"cljpbangr0002sorr2onk7pdx","_id":"cljpbangv0007sorr9qazh8o3"},{"post_id":"cljpbangq0001sorr21j6gtsw","category_id":"cljpbangr0002sorr2onk7pdx","_id":"cljpbangw0009sorrcfiu7ogb"}],"PostTag":[{"post_id":"cljpap0250000xbrr3far57p7","tag_id":"cljp9zm1s0003aarr9thq5pf6","_id":"cljpap02a0002xbrrhdsxabp5"},{"post_id":"cljpap0250000xbrr3far57p7","tag_id":"cljp9zm1t0004aarr7zrq1hoy","_id":"cljpap02b0004xbrr9zkbfkj4"},{"post_id":"cljpap0290001xbrrhwwa0hdt","tag_id":"cljp9zm1s0003aarr9thq5pf6","_id":"cljpap02c0007xbrr4web0z4s"},{"post_id":"cljpap0290001xbrrhwwa0hdt","tag_id":"cljp9zm1t0004aarr7zrq1hoy","_id":"cljpap02d000axbrr47g8hupe"},{"post_id":"cljpap02a0003xbrrh0tkbbvj","tag_id":"cljp9zm1s0003aarr9thq5pf6","_id":"cljpap02e000dxbrrajox4abs"},{"post_id":"cljpap02a0003xbrrh0tkbbvj","tag_id":"cljp9zm1t0004aarr7zrq1hoy","_id":"cljpap02e000gxbrr9nvv6i2o"},{"post_id":"cljpap02c0005xbrre1gg0q6s","tag_id":"cljp9zm1s0003aarr9thq5pf6","_id":"cljpap02f000ixbrremzw3mqu"},{"post_id":"cljpap02c0005xbrre1gg0q6s","tag_id":"cljp9zm1t0004aarr7zrq1hoy","_id":"cljpap02f000kxbrr0kwbbd2a"},{"post_id":"cljpap02c0008xbrrgcou02ym","tag_id":"cljp9zm1s0003aarr9thq5pf6","_id":"cljpap02f000mxbrrfgfw6k5h"},{"post_id":"cljpap02c0008xbrrgcou02ym","tag_id":"cljp9zm1t0004aarr7zrq1hoy","_id":"cljpap02f000nxbrred8f13te"},{"post_id":"cljpap02d000bxbrr9ylt7zc4","tag_id":"cljp9zm1s0003aarr9thq5pf6","_id":"cljpap02f000oxbrr6nvv8a57"},{"post_id":"cljpap02d000bxbrr9ylt7zc4","tag_id":"cljp9zm1t0004aarr7zrq1hoy","_id":"cljpap02f000pxbrr8v561mbg"},{"post_id":"cljpap02e000exbrrc80vakuy","tag_id":"cljp9zm1s0003aarr9thq5pf6","_id":"cljpap02f000qxbrrehvq65yh"},{"post_id":"cljpap02e000exbrrc80vakuy","tag_id":"cljp9zm1t0004aarr7zrq1hoy","_id":"cljpap02f000rxbrr65tg8hzf"},{"post_id":"cljpbangm0000sorrdtbb16t9","tag_id":"cljpbangt0003sorr8dai1qhm","_id":"cljpbangv0006sorr5nqq0q8r"},{"post_id":"cljpbangq0001sorr21j6gtsw","tag_id":"cljpbangt0003sorr8dai1qhm","_id":"cljpbangv0008sorrecjudn7y"}],"Tag":[{"name":"hello","_id":"cljp69k7c00026brrgfzh0vq9"},{"name":"github actions","_id":"cljp9zm1s0003aarr9thq5pf6"},{"name":"ci","_id":"cljp9zm1t0004aarr7zrq1hoy"},{"name":"react","_id":"cljpbangt0003sorr8dai1qhm"}]}}