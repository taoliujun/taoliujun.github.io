{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","path":"js/jquery-3.6.4.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/JavaScript/Map真的挺好的.md","hash":"84b8d98e35b45aea3e76b312751771f18b431e57","modified":1688543005532},{"_id":"source/_posts/JavaScript/ES6新增的运算符.md","hash":"64a0d0efbb4d65d17d0ae18b7941b0b3e6e8b19b","modified":1688542986792},{"_id":"source/_posts/JavaScript/ES6是什么.md","hash":"bf9e47b39524ccf4f7a15b87a88732395415c936","modified":1688542993673},{"_id":"source/_posts/JavaScript/ES6的解构赋值.md","hash":"812fa2abcde5a48982ef6656750f7b59504e897f","modified":1688542997881},{"_id":"source/_posts/JavaScript/Proxy的应用场景.md","hash":"3da83ca895a6376e86c3ae99b2d7e271d0a49388","modified":1688543052366},{"_id":"source/_posts/JavaScript/聊一聊Symbol.md","hash":"2ab1a5c75ce597f31dbbf3253795defcc8870da8","modified":1688543036033},{"_id":"source/_posts/JavaScript/Set真的挺好的.md","hash":"63ee064de30a6ebdcfa8b2c4eacd71b58d46a209","modified":1688543033008},{"_id":"source/_posts/JavaScript/Reflect和Object的关系.md","hash":"c2a447b3fde5ad4a3f604cdb86b725312fa27897","modified":1688543029660},{"_id":"source/_posts/JavaScript/Promise的忽略点和几个方法的区别.md","hash":"37c73ce3defd6c923c0af3074edf88f23c30d1ad","modified":1688543058025},{"_id":"source/_posts/Github Actions/1. Quickstart.md","hash":"3f57b258b3ed82b0790837e2a0880fc817146210","modified":1688542961909},{"_id":"source/_posts/Github Actions/0. Intro.md","hash":"97a3a3f8c266457a028f285b12e7030a991ba358","modified":1688542939025},{"_id":"source/_posts/React/useDeferredValue在性能优化中的使用.md","hash":"bdabbbc7d3c6f5187b369088b89730cd0c1bfcdb","modified":1688543038615},{"_id":"source/_posts/React/useTransition在性能优化中的使用.md","hash":"dafff26f289fa5bb15ed9b562be2bafc5c0584d9","modified":1688542924550},{"_id":"source/_posts/前端/从Radix看如何优雅写组件.md","hash":"fb1f66648d47716c4701174f6737a357495d6713","modified":1688542739868},{"_id":"source/_posts/Github Actions/3. Examples.md","hash":"a1d7f2f6c6ef22e38978bc4d7c3a4ecb9119a8b7","modified":1688542968645},{"_id":"source/_posts/Github Actions/4. Using workflows.md","hash":"28af86fc6b1f47799db02e340da0427eb89e5fb3","modified":1688542973367},{"_id":"source/_posts/Github Actions/5. Using jobs.md","hash":"78167bd7d54b7093097e73f23a0f385a90b0a7dc","modified":1688542978029},{"_id":"source/_posts/Github Actions/2. Learn GitHub Actions.md","hash":"487e8eb2d9f06479dbbb8f6b34918d5892fd5ea4","modified":1688542965991},{"_id":"source/_posts/Github Actions/6. Managing workflow runs.md","hash":"01111d52880e4fee1fae2939891d387763262b4e","modified":1688542982877},{"_id":"node_modules/hexo-theme-landscape/README.md","hash":"1a9b279e6dd29fd19245f913f0c4a316ffaa62db","modified":1688521653721},{"_id":"node_modules/hexo-theme-landscape/_config.yml","hash":"b608c1f1322760dce9805285a602a95832730a2e","modified":1688521653727},{"_id":"node_modules/hexo-theme-landscape/package.json","hash":"4bf95d52f77edf811f23f6d264a7493311a8d078","modified":1688521653727},{"_id":"node_modules/hexo-theme-landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1688521653731},{"_id":"node_modules/hexo-theme-landscape/languages/de-DE.yml","hash":"d29d1c4256b7ed9df42f511c2ff0a23ad5fd6c1f","modified":1688521653730},{"_id":"node_modules/hexo-theme-landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1688521653291},{"_id":"node_modules/hexo-theme-landscape/languages/en-GB.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1688521653730},{"_id":"node_modules/hexo-theme-landscape/languages/en.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1688521653733},{"_id":"node_modules/hexo-theme-landscape/languages/en-US.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1688521653730},{"_id":"node_modules/hexo-theme-landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1688521653733},{"_id":"node_modules/hexo-theme-landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1688521653728},{"_id":"node_modules/hexo-theme-landscape/languages/es-ES.yml","hash":"7008a8fc91f18d2a735864817b8ebda30c7a2c66","modified":1688521653729},{"_id":"node_modules/hexo-theme-landscape/languages/fr-FR.yml","hash":"8d09dbdab00a30a2870b56f7c0a7ca7deafa7b88","modified":1688521653728},{"_id":"node_modules/hexo-theme-landscape/languages/hu.yml","hash":"284d557130bf54a74e7dcef9d42096130e4d9550","modified":1688521653733},{"_id":"node_modules/hexo-theme-landscape/languages/hu-HU.yml","hash":"712d18664898fa21ba38d4973e90ef41a324ea25","modified":1688521653729},{"_id":"node_modules/hexo-theme-landscape/languages/it-IT.yml","hash":"2cb6dc2fab9bd2dbe1c8bb869a9e8bf85a564fdd","modified":1688521653733},{"_id":"node_modules/hexo-theme-landscape/languages/it.yml","hash":"89b7d91306b2c1a0f3ac023b657bf974f798a1e8","modified":1688521653733},{"_id":"node_modules/hexo-theme-landscape/languages/ja-JP.yml","hash":"08481267e0c112e1f6855620f2837ec4c4a98bbd","modified":1688521653733},{"_id":"node_modules/hexo-theme-landscape/languages/mn.yml","hash":"2e7523951072a9403ead3840ad823edd1084c116","modified":1688521653733},{"_id":"node_modules/hexo-theme-landscape/languages/ko-KR.yml","hash":"19209ad8f9d4057e8df808937f950eb265e1db69","modified":1688521653733},{"_id":"node_modules/hexo-theme-landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1688521653733},{"_id":"node_modules/hexo-theme-landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1688521653733},{"_id":"node_modules/hexo-theme-landscape/languages/mn-MN.yml","hash":"b9e5f3e7c0c2f779cf2cfded6db847b5941637ca","modified":1688521653729},{"_id":"node_modules/hexo-theme-landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1688521653730},{"_id":"node_modules/hexo-theme-landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1688521653729},{"_id":"node_modules/hexo-theme-landscape/languages/pt-PT.yml","hash":"0f852b6b228e6ea59aa3540574bb89b233f2a098","modified":1688521653734},{"_id":"node_modules/hexo-theme-landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1688521653734},{"_id":"node_modules/hexo-theme-landscape/languages/ru-RU.yml","hash":"360d11a28bb768afb1dd15f63fa7fd3a8cc547ee","modified":1688521653734},{"_id":"node_modules/hexo-theme-landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1688521653735},{"_id":"node_modules/hexo-theme-landscape/languages/th-TH.yml","hash":"ebfdba9bc4842c829473c1e6e4544344f182724d","modified":1688521653735},{"_id":"node_modules/hexo-theme-landscape/languages/th.yml","hash":"84a55b00aa01f03982be294e43c33a20e6d32862","modified":1688521653735},{"_id":"node_modules/hexo-theme-landscape/languages/zh-CN.yml","hash":"1efd95774f401c80193eac6ee3f1794bfe93dc5a","modified":1688521653735},{"_id":"node_modules/hexo-theme-landscape/languages/tr.yml","hash":"a1cdbfa17682d7a971de8ab8588bf57c74224b5b","modified":1688521653736},{"_id":"node_modules/hexo-theme-landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1688521653735},{"_id":"node_modules/hexo-theme-landscape/scripts/fancybox.js","hash":"c857d7a5e4a5d71c743a009c5932bf84229db428","modified":1688521653712},{"_id":"node_modules/hexo-theme-landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1688521653293},{"_id":"node_modules/hexo-theme-landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1688521653397},{"_id":"node_modules/hexo-theme-landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1688521653399},{"_id":"node_modules/hexo-theme-landscape/layout/layout.ejs","hash":"0d1765036e4874500e68256fedb7470e96eeb6ee","modified":1688521653399},{"_id":"node_modules/hexo-theme-landscape/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1688521653730},{"_id":"node_modules/hexo-theme-landscape/languages/nl-NL.yml","hash":"5ebbc30021f05d99938f96dfff280392df7f91f0","modified":1688521653733},{"_id":"node_modules/hexo-theme-landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1688521653400},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/after-footer.ejs","hash":"377d257d5d16e0158a4405c72401517b074fd7ff","modified":1688521653293},{"_id":"node_modules/hexo-theme-landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1688521653402},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1688521653293},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/article.ejs","hash":"56597e951203dd662a6d2c817c7c4f1c920d4a25","modified":1688521653397},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive.ejs","hash":"7cb70a7a54f8c7ae49b10d1f37c0a9b74eab8826","modified":1688521653293},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/footer.ejs","hash":"3656eb692254346671abc03cb3ba1459829e0dce","modified":1688521653397},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/gauges-analytics.ejs","hash":"21a1e2a3907d1a3dad1cd0ab855fe6735f233c74","modified":1688521653394},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/head.ejs","hash":"f05bced793b0314d4f2ef0c993b3a51d0b7d203a","modified":1688521653400},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/header.ejs","hash":"6a5033d189554c9a6d42e2ef7952ae5c9742648e","modified":1688521653399},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/google-analytics.ejs","hash":"2ea7442ea1e1a8ab4e41e26c563f58413b59a3d0","modified":1688521653399},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1688521653399},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1688521653293},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1688521653400},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1688521653397},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/recent_posts.ejs","hash":"60c4b012dcc656438ff59997e60367e5a21ab746","modified":1688521653399},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1688521653402},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1688521653399},{"_id":"node_modules/hexo-theme-landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1688521653727},{"_id":"node_modules/hexo-theme-landscape/source/css/_variables.styl","hash":"ca28281423ae57d76b6c1eb91cd845fd4e518bd6","modified":1688521653727},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","hash":"e55a1d92954ed20f6887f92dc727bb995a010a43","modified":1688521653730},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1688521653293},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1688521653727},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1688521653397},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/date.ejs","hash":"f1458584b679545830b75bef2526e2f3eb931045","modified":1688521653397},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1688521653397},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1688521653401},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1688521653397},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1688521653729},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/title.ejs","hash":"4d7e62574ddf46de9b41605fe3140d77b5ddb26d","modified":1688521653404},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1688521653726},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1688521653727},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/article.styl","hash":"2d1f6f79ebf9cb55ebdb3865a2474437eb2b37c6","modified":1688521653729},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1688521653730},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/header.styl","hash":"268d2989acb06e2ddd06cc36a6918c6cd865476b","modified":1688521653729},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1688521653729},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1688521653727},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1688521653726},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/highlight.styl","hash":"9cc3b2927d814f2f6e8e188f9d3657b94f4c6ef3","modified":1688521653724},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1688521653730},{"_id":"node_modules/hexo-theme-landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1688521653400},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1688521653731},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1688521653714},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1688521653718},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1688521653712},{"_id":"public/JavaScript/Reflect_And_Object/index.html","hash":"87fae7647b7a37b44a31629b23a3659baf19d1f4","modified":1688543232414},{"_id":"public/JavaScript/Map/index.html","hash":"2a7ca6e99951851807697275b98f94e437fea5d1","modified":1688543232414},{"_id":"public/JavaScript/es6_operator/index.html","hash":"fb920e636313ad544ceb8f27d6ca650617b95742","modified":1688543232414},{"_id":"public/JavaScript/Promise_ignore_points_and_methods/index.html","hash":"900f807559b8b047790e1d7b83e94037ca42728b","modified":1688543232414},{"_id":"public/JavaScript/es6_intro/index.html","hash":"47dc25466129e9bb1ccf6235d9cd622bdf5540b1","modified":1688543232414},{"_id":"public/GitHub_Actions/managing_workflow_runs/index.html","hash":"1d83ddcd15b7fe43f2e7d910268a1de9930b2150","modified":1688543232414},{"_id":"public/GitHub_Actions/using_jobs/index.html","hash":"695e847c8ea3f59dd0a7949880d7307942561170","modified":1688543232414},{"_id":"public/GitHub_Actions/using_workflows/index.html","hash":"0a357e878508daaa1311700777ea40bd1e5d8e12","modified":1688543232414},{"_id":"public/GitHub_Actions/examples/index.html","hash":"1d064628cfdfaa572f78f34ff5cea388fb9e3910","modified":1688543232414},{"_id":"public/GitHub_Actions/intro/index.html","hash":"bd8e9ef69fe4b4dd1622f7e4a9c73fc02314c18b","modified":1688543232414},{"_id":"public/archives/page/2/index.html","hash":"5857a473a318ec163dd3352fed5315d2ad622056","modified":1688543232414},{"_id":"public/archives/index.html","hash":"c3705ce87a9b520668f9b50461ef4c66a5a76e6f","modified":1688543232414},{"_id":"public/archives/2022/index.html","hash":"f8c4a641077ddb3dc3c01cb313edb739f59a8fba","modified":1688543232414},{"_id":"public/archives/2022/07/index.html","hash":"ea06e33b587fce3b9afc473f3d293f6ab1ccc330","modified":1688543232414},{"_id":"public/archives/2022/09/index.html","hash":"8f97d5da62a472aea0c5d87aabd22954d403c8be","modified":1688543232414},{"_id":"public/archives/2023/index.html","hash":"a57942b567723ac16311f1587d2567d7f45bfbcb","modified":1688543232414},{"_id":"public/archives/2023/03/index.html","hash":"6f0ed43a579ffc2c00900b501057f557ca927a05","modified":1688543232414},{"_id":"public/archives/2023/06/index.html","hash":"ffe5e0d7f1e0457e18da608275114f4f41ee49ca","modified":1688543232414},{"_id":"public/categories/JavaScript/index.html","hash":"40ca914c239fd3b7f9675ad1b1ef6396dc35855c","modified":1688543232414},{"_id":"public/categories/React/index.html","hash":"10ff7dab2a575f216a5847c635455d0f46f25802","modified":1688543232414},{"_id":"public/categories/架构/index.html","hash":"16592040d0548b6592a84b63431b455f45684478","modified":1688543232414},{"_id":"public/tags/javascript/index.html","hash":"745f82dc390c0fdb07e44ad78f893c5eb72c513d","modified":1688543232414},{"_id":"public/tags/proxy/index.html","hash":"48b15777332dbf6af1558debd6e2b6b605833cf3","modified":1688543232414},{"_id":"public/tags/set/index.html","hash":"4c71e17516d6e60721ea468a43da792b0b7867f4","modified":1688543232414},{"_id":"public/tags/reflect/index.html","hash":"fb7d9ad97319893ca21ac9665f3a740b381cbc00","modified":1688543232414},{"_id":"public/tags/promise/index.html","hash":"885b0d65f6e081e77bfc2db991912051721ef25f","modified":1688543232414},{"_id":"public/tags/symbol/index.html","hash":"f097d2938438537a3e7a5b9a20c20e0c44cdc387","modified":1688543232414},{"_id":"public/tags/react/index.html","hash":"b3f154ebe3d60a720efc7f0b1eda51d41eb9eca7","modified":1688543232414},{"_id":"public/tags/radix/index.html","hash":"e0c2ae903cdae7f8557202cf9496d98eddecbc64","modified":1688543232414},{"_id":"public/tags/组件/index.html","hash":"aa45bfbdb489e63c576188894dd466e814144d8c","modified":1688543232414},{"_id":"public/tags/github-actions/index.html","hash":"ec332f0586536adfc5470e60da92bf69a66bdf30","modified":1688543232414},{"_id":"public/tags/ci/index.html","hash":"a82235135a3e73551327dfd60b93da606e337dde","modified":1688543232414},{"_id":"public/前端/write_component_with_radix/index.html","hash":"bff8195cc476176007c7f08ac772c49989e49d56","modified":1688543232414},{"_id":"public/JavaScript/using_Proxy/index.html","hash":"e514c605bc21d810bcc9498c0d659da26b35bed9","modified":1688543232414},{"_id":"public/JavaScript/Set/index.html","hash":"13a35dfd032378549e1f11c858cc3d261782555c","modified":1688543232414},{"_id":"public/JavaScript/Symbol/index.html","hash":"e77c38b28b72f98b3149e1f9bc54c4d9a8c47c20","modified":1688543232414},{"_id":"public/JavaScript/es6_destructuring_assignment/index.html","hash":"79aa0d8f33ed20401e07b39be823a2f5e9a1318b","modified":1688543232414},{"_id":"public/React/useTransition/index.html","hash":"685d1c86e17a8780ade5cd89b64e9caa75274e0f","modified":1688543232414},{"_id":"public/React/useDeferredValue/index.html","hash":"3a3416736c68553270eaf19207d4f33c7ac284f9","modified":1688543232414},{"_id":"public/GitHub_Actions/learn/index.html","hash":"0f98ec0e8afc9b8aa1d9a288ddc14b983989835e","modified":1688543232414},{"_id":"public/GitHub_Actions/quickstart/index.html","hash":"db28a78dbae7159492eb2f967eccf981813c2dc1","modified":1688543232414},{"_id":"public/index.html","hash":"1e9bb76f8e05df35773dee24405596131069f94f","modified":1688543232414},{"_id":"public/page/2/index.html","hash":"dc824c0e7d5c8c115e70205ffa3662c1bfbefc7b","modified":1688543232414},{"_id":"public/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1688543232414},{"_id":"public/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1688543232414},{"_id":"public/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1688543232414},{"_id":"public/css/style.css","hash":"ddb3792605d744ab3d9f0a649c82b62e9b16daa6","modified":1688543232414},{"_id":"public/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1688543232414},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1688543232414}],"Category":[{"name":"JavaScript","_id":"cljpf1ktt0004mtrr5noo60up"},{"name":"React","_id":"cljpf1ku3000smtrr7pxtgcbk"},{"name":"架构","_id":"cljpf1ku60019mtrrhdnxc1ok"}],"Data":[],"Page":[],"Post":[{"title":"ES6新增的运算符","url":"JavaScript/es6_operator","date":"2023-03-03T16:00:00.000Z","_content":"\n## 链判断运算符`?.`\n\n非常方便的代替了传统的属性是否存在的判断，它有两个注意点：\n\n- 左侧的对象是否为`null`或`undefined`，如果不是，则继续运算。\n- 如果是的，就不再往下运算，而是返回`undefined`。\n\n常见用法如下：\n\n- obj?.prop // 对象属性是否存在\n- obj?.[expr] // 同上\n- func?.(...args) // 函数或对象方法是否存在\n\n## Null 判断运算符`??`\n\n如果运算结果为`null`或`undefined`，则返回右侧的值，否则返回左侧的值。\n\n```typescript\n// 老写法，如果左侧的boolean值为falsy，都会返回右侧的值\nconst headerText = response.settings.headerText || \"Hello, world!\";\n// ??写法，只有左侧的值为null或undefined时，才会返回右侧的值\nconst headerText = response.settings.headerText ?? \"Hello, world!\";\n```\n","source":"_posts/JavaScript/ES6新增的运算符.md","raw":"---\ntitle: ES6新增的运算符\nurl: JavaScript/es6_operator\ndate: 2023-03-04\ntags:\n  - javascript\ncategories:\n  - [JavaScript]\n---\n\n## 链判断运算符`?.`\n\n非常方便的代替了传统的属性是否存在的判断，它有两个注意点：\n\n- 左侧的对象是否为`null`或`undefined`，如果不是，则继续运算。\n- 如果是的，就不再往下运算，而是返回`undefined`。\n\n常见用法如下：\n\n- obj?.prop // 对象属性是否存在\n- obj?.[expr] // 同上\n- func?.(...args) // 函数或对象方法是否存在\n\n## Null 判断运算符`??`\n\n如果运算结果为`null`或`undefined`，则返回右侧的值，否则返回左侧的值。\n\n```typescript\n// 老写法，如果左侧的boolean值为falsy，都会返回右侧的值\nconst headerText = response.settings.headerText || \"Hello, world!\";\n// ??写法，只有左侧的值为null或undefined时，才会返回右侧的值\nconst headerText = response.settings.headerText ?? \"Hello, world!\";\n```\n","slug":"JavaScript/ES6新增的运算符","published":1,"updated":"2023-07-05T07:43:06.792Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cljpf1ktl0000mtrr4q7fa63p","content":"<h2 id=\"链判断运算符\"><a href=\"#链判断运算符\" class=\"headerlink\" title=\"链判断运算符?.\"></a>链判断运算符<code>?.</code></h2><p>非常方便的代替了传统的属性是否存在的判断，它有两个注意点：</p>\n<ul>\n<li>左侧的对象是否为<code>null</code>或<code>undefined</code>，如果不是，则继续运算。</li>\n<li>如果是的，就不再往下运算，而是返回<code>undefined</code>。</li>\n</ul>\n<p>常见用法如下：</p>\n<ul>\n<li>obj?.prop &#x2F;&#x2F; 对象属性是否存在</li>\n<li>obj?.[expr] &#x2F;&#x2F; 同上</li>\n<li>func?.(…args) &#x2F;&#x2F; 函数或对象方法是否存在</li>\n</ul>\n<h2 id=\"Null-判断运算符\"><a href=\"#Null-判断运算符\" class=\"headerlink\" title=\"Null 判断运算符??\"></a>Null 判断运算符<code>??</code></h2><p>如果运算结果为<code>null</code>或<code>undefined</code>，则返回右侧的值，否则返回左侧的值。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 老写法，如果左侧的boolean值为falsy，都会返回右侧的值</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> headerText = response.<span class=\"property\">settings</span>.<span class=\"property\">headerText</span> || <span class=\"string\">&quot;Hello, world!&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// ??写法，只有左侧的值为null或undefined时，才会返回右侧的值</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> headerText = response.<span class=\"property\">settings</span>.<span class=\"property\">headerText</span> ?? <span class=\"string\">&quot;Hello, world!&quot;</span>;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"链判断运算符\"><a href=\"#链判断运算符\" class=\"headerlink\" title=\"链判断运算符?.\"></a>链判断运算符<code>?.</code></h2><p>非常方便的代替了传统的属性是否存在的判断，它有两个注意点：</p>\n<ul>\n<li>左侧的对象是否为<code>null</code>或<code>undefined</code>，如果不是，则继续运算。</li>\n<li>如果是的，就不再往下运算，而是返回<code>undefined</code>。</li>\n</ul>\n<p>常见用法如下：</p>\n<ul>\n<li>obj?.prop &#x2F;&#x2F; 对象属性是否存在</li>\n<li>obj?.[expr] &#x2F;&#x2F; 同上</li>\n<li>func?.(…args) &#x2F;&#x2F; 函数或对象方法是否存在</li>\n</ul>\n<h2 id=\"Null-判断运算符\"><a href=\"#Null-判断运算符\" class=\"headerlink\" title=\"Null 判断运算符??\"></a>Null 判断运算符<code>??</code></h2><p>如果运算结果为<code>null</code>或<code>undefined</code>，则返回右侧的值，否则返回左侧的值。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 老写法，如果左侧的boolean值为falsy，都会返回右侧的值</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> headerText = response.<span class=\"property\">settings</span>.<span class=\"property\">headerText</span> || <span class=\"string\">&quot;Hello, world!&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// ??写法，只有左侧的值为null或undefined时，才会返回右侧的值</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> headerText = response.<span class=\"property\">settings</span>.<span class=\"property\">headerText</span> ?? <span class=\"string\">&quot;Hello, world!&quot;</span>;</span><br></pre></td></tr></table></figure>\n"},{"title":"ES6是什么","url":"JavaScript/es6_intro","date":"2023-02-28T16:00:00.000Z","_content":"\n## 注\n\n本系列文章不是技术教程，只是个人的知识点整理。\n\n## 第一段废话\n\n就在昨晚，我突然冒出了奇怪的心思想要对 10 年学习工作生涯做一个总结。但今早起来发现无从下手，一是没有优秀的文笔能力，不能科学优雅地整理出重点；二是实在没有牛逼的技术能力，羞于展示于众，这么多年的成长也不过是不断咀嚼大神们的产出。得益于互联网的开源精神和友善的讨论氛围，我这并不天资聪明的脑袋也算是学到了点皮毛能一直工作以温饱无忧。但是说了废话这么多，对写总结仍是没有帮助的，我翻来覆去后打算，不如抓近几年的重点，给某个技术点做一些总结，一来锻炼自己的文笔能力，二来做一次高质量的复习也是能提升自我能力。\n\n## 为什么写 ES6？\n\n我从 IE6 时代开始写 JavaScript，到 2016 年左右迎接真正的成年 JS：ES6，接下来是前端爆发时代：CoffeeScript、TypeScript、Webpack、Angular、React、Node、Eslint 等百十个技术点或框架层出不穷走向成熟。我和大部分人一样，在有限的精力里不断地消化它们，它们或成为我们工作的一部分，或像 IE6 一样一去不复返。如上所说，总有一些技术如 TypeScript 那般坚持了多年之久仍然在坚强的活着，它们如此受欢迎必然有它的闪光点。而 ES6 正是如此，用稳定优秀的迭代力，现代化的设计理念、牢牢的抓住了各大厂商和开发者的心。\n\n如果看这篇文档的人儿中有一些近几年加入的开发者，我想对大家说，ES6 并不是自古就有，它的出生并不一帆风顺，甚至在推出稳定版本后，得到了一些开发者诸如“浏览器都不支持，要你何用”的嘲笑。但得益于 polyfill(s)、浏览器厂商、github 开源等好多组织的相辅相成，ES6 才成为了现在这样。\n\n## ES6 到底是什么？\n\n大家或多或少看了 ES6 的介绍文章，正如每个人心中哈姆雷特是不一样的，我参考总结了一些文章，加上自身的工作经验，对 ES6 做以下的介绍。\n\nJavaScript 在上世纪 90 年代被提交给标准化组织 ECMA，紧接着制定出第一个该语言标准并命名为 ECMAScript 1.0，ES 便是其简称。JavaScript 是该标准的实现之一，被广泛使用，我们可以简单的认为 JavaScript 就是 ECMAScript。\n\n之后该标准不断推出新版本一直到 5.1，当要制定 6.0 标准的时候，发现要加入的语法功能太多了，要不断地推出 6.1、6.2，难以规划和命名。于是 ECMA 组织改变了策略，定于每年 6 月推出一个新版本并按年份命名，在这一年期间，若干草案得到充分讨论和经过几个草案步骤后加入到新标准中。于是 ES 6.0 摇身变成 ES2015，之后的年份一直推出 ES2016、ES2017 等。\n\n**虽然从历史上讲，ES6 单指 ES2015；但大众更容易理解的是，ES6 泛指 ES2015 及以后的新语法功能。**\n\n这些年的互联网文章在特别的介绍 ES6 的语法功能，用于与 ES5 进行对比，或许再过一些年，人们不再提起 ES6 了，那时候的文章会统一讲整个 ECMAScript，再有每年 6 月份单独的讲解 ES20xx 了吧。\n\n## ES6 的相关技术\n\n### polyfill、babel 是什么？\n\nES2015 之后每一年会发布新的语法功能，我们在代码中使用新语法和功能，但用户的浏览器、Node 客户端大概率不是最新版本，并不支持这些新语法。于是发展出两个方案解决这个问题，一是使用 babel 将新语法编译为老语法（按浏览器版本覆盖率、指定标准等配置，略过不表），二是使用 polyfill 用老语法模拟出新功能。有了这两者，我们基本可以放心的写出优雅的新代码，然后由它们编译后供浏览器解析。值的说明的是，新功能那么多，现代开发者不需要去维护 polyfill 列表了，babel 中使用 core-js 库根据 browserrc 配置项智能的去引入 polyfill 了。\n\n### 和 TypeScript 的关系？\n\nTypeScript 是对 ES 的类型补充，它存在一个配置项，来表明在 ts 检查、编译过程中去支持什么标准的 ES。\n\n## 最后，欢迎大家在此讨论\n\n积极汲取大家的讨论，补充我的文章（偷笑）。\n","source":"_posts/JavaScript/ES6是什么.md","raw":"---\ntitle: ES6是什么\nurl: JavaScript/es6_intro\ndate: 2023-03-01\ntags:\n  - javascript\ncategories:\n  - [JavaScript]\n---\n\n## 注\n\n本系列文章不是技术教程，只是个人的知识点整理。\n\n## 第一段废话\n\n就在昨晚，我突然冒出了奇怪的心思想要对 10 年学习工作生涯做一个总结。但今早起来发现无从下手，一是没有优秀的文笔能力，不能科学优雅地整理出重点；二是实在没有牛逼的技术能力，羞于展示于众，这么多年的成长也不过是不断咀嚼大神们的产出。得益于互联网的开源精神和友善的讨论氛围，我这并不天资聪明的脑袋也算是学到了点皮毛能一直工作以温饱无忧。但是说了废话这么多，对写总结仍是没有帮助的，我翻来覆去后打算，不如抓近几年的重点，给某个技术点做一些总结，一来锻炼自己的文笔能力，二来做一次高质量的复习也是能提升自我能力。\n\n## 为什么写 ES6？\n\n我从 IE6 时代开始写 JavaScript，到 2016 年左右迎接真正的成年 JS：ES6，接下来是前端爆发时代：CoffeeScript、TypeScript、Webpack、Angular、React、Node、Eslint 等百十个技术点或框架层出不穷走向成熟。我和大部分人一样，在有限的精力里不断地消化它们，它们或成为我们工作的一部分，或像 IE6 一样一去不复返。如上所说，总有一些技术如 TypeScript 那般坚持了多年之久仍然在坚强的活着，它们如此受欢迎必然有它的闪光点。而 ES6 正是如此，用稳定优秀的迭代力，现代化的设计理念、牢牢的抓住了各大厂商和开发者的心。\n\n如果看这篇文档的人儿中有一些近几年加入的开发者，我想对大家说，ES6 并不是自古就有，它的出生并不一帆风顺，甚至在推出稳定版本后，得到了一些开发者诸如“浏览器都不支持，要你何用”的嘲笑。但得益于 polyfill(s)、浏览器厂商、github 开源等好多组织的相辅相成，ES6 才成为了现在这样。\n\n## ES6 到底是什么？\n\n大家或多或少看了 ES6 的介绍文章，正如每个人心中哈姆雷特是不一样的，我参考总结了一些文章，加上自身的工作经验，对 ES6 做以下的介绍。\n\nJavaScript 在上世纪 90 年代被提交给标准化组织 ECMA，紧接着制定出第一个该语言标准并命名为 ECMAScript 1.0，ES 便是其简称。JavaScript 是该标准的实现之一，被广泛使用，我们可以简单的认为 JavaScript 就是 ECMAScript。\n\n之后该标准不断推出新版本一直到 5.1，当要制定 6.0 标准的时候，发现要加入的语法功能太多了，要不断地推出 6.1、6.2，难以规划和命名。于是 ECMA 组织改变了策略，定于每年 6 月推出一个新版本并按年份命名，在这一年期间，若干草案得到充分讨论和经过几个草案步骤后加入到新标准中。于是 ES 6.0 摇身变成 ES2015，之后的年份一直推出 ES2016、ES2017 等。\n\n**虽然从历史上讲，ES6 单指 ES2015；但大众更容易理解的是，ES6 泛指 ES2015 及以后的新语法功能。**\n\n这些年的互联网文章在特别的介绍 ES6 的语法功能，用于与 ES5 进行对比，或许再过一些年，人们不再提起 ES6 了，那时候的文章会统一讲整个 ECMAScript，再有每年 6 月份单独的讲解 ES20xx 了吧。\n\n## ES6 的相关技术\n\n### polyfill、babel 是什么？\n\nES2015 之后每一年会发布新的语法功能，我们在代码中使用新语法和功能，但用户的浏览器、Node 客户端大概率不是最新版本，并不支持这些新语法。于是发展出两个方案解决这个问题，一是使用 babel 将新语法编译为老语法（按浏览器版本覆盖率、指定标准等配置，略过不表），二是使用 polyfill 用老语法模拟出新功能。有了这两者，我们基本可以放心的写出优雅的新代码，然后由它们编译后供浏览器解析。值的说明的是，新功能那么多，现代开发者不需要去维护 polyfill 列表了，babel 中使用 core-js 库根据 browserrc 配置项智能的去引入 polyfill 了。\n\n### 和 TypeScript 的关系？\n\nTypeScript 是对 ES 的类型补充，它存在一个配置项，来表明在 ts 检查、编译过程中去支持什么标准的 ES。\n\n## 最后，欢迎大家在此讨论\n\n积极汲取大家的讨论，补充我的文章（偷笑）。\n","slug":"JavaScript/ES6是什么","published":1,"updated":"2023-07-05T07:43:13.673Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cljpf1ktp0001mtrrg0hp9fsx","content":"<h2 id=\"注\"><a href=\"#注\" class=\"headerlink\" title=\"注\"></a>注</h2><p>本系列文章不是技术教程，只是个人的知识点整理。</p>\n<h2 id=\"第一段废话\"><a href=\"#第一段废话\" class=\"headerlink\" title=\"第一段废话\"></a>第一段废话</h2><p>就在昨晚，我突然冒出了奇怪的心思想要对 10 年学习工作生涯做一个总结。但今早起来发现无从下手，一是没有优秀的文笔能力，不能科学优雅地整理出重点；二是实在没有牛逼的技术能力，羞于展示于众，这么多年的成长也不过是不断咀嚼大神们的产出。得益于互联网的开源精神和友善的讨论氛围，我这并不天资聪明的脑袋也算是学到了点皮毛能一直工作以温饱无忧。但是说了废话这么多，对写总结仍是没有帮助的，我翻来覆去后打算，不如抓近几年的重点，给某个技术点做一些总结，一来锻炼自己的文笔能力，二来做一次高质量的复习也是能提升自我能力。</p>\n<h2 id=\"为什么写-ES6？\"><a href=\"#为什么写-ES6？\" class=\"headerlink\" title=\"为什么写 ES6？\"></a>为什么写 ES6？</h2><p>我从 IE6 时代开始写 JavaScript，到 2016 年左右迎接真正的成年 JS：ES6，接下来是前端爆发时代：CoffeeScript、TypeScript、Webpack、Angular、React、Node、Eslint 等百十个技术点或框架层出不穷走向成熟。我和大部分人一样，在有限的精力里不断地消化它们，它们或成为我们工作的一部分，或像 IE6 一样一去不复返。如上所说，总有一些技术如 TypeScript 那般坚持了多年之久仍然在坚强的活着，它们如此受欢迎必然有它的闪光点。而 ES6 正是如此，用稳定优秀的迭代力，现代化的设计理念、牢牢的抓住了各大厂商和开发者的心。</p>\n<p>如果看这篇文档的人儿中有一些近几年加入的开发者，我想对大家说，ES6 并不是自古就有，它的出生并不一帆风顺，甚至在推出稳定版本后，得到了一些开发者诸如“浏览器都不支持，要你何用”的嘲笑。但得益于 polyfill(s)、浏览器厂商、github 开源等好多组织的相辅相成，ES6 才成为了现在这样。</p>\n<h2 id=\"ES6-到底是什么？\"><a href=\"#ES6-到底是什么？\" class=\"headerlink\" title=\"ES6 到底是什么？\"></a>ES6 到底是什么？</h2><p>大家或多或少看了 ES6 的介绍文章，正如每个人心中哈姆雷特是不一样的，我参考总结了一些文章，加上自身的工作经验，对 ES6 做以下的介绍。</p>\n<p>JavaScript 在上世纪 90 年代被提交给标准化组织 ECMA，紧接着制定出第一个该语言标准并命名为 ECMAScript 1.0，ES 便是其简称。JavaScript 是该标准的实现之一，被广泛使用，我们可以简单的认为 JavaScript 就是 ECMAScript。</p>\n<p>之后该标准不断推出新版本一直到 5.1，当要制定 6.0 标准的时候，发现要加入的语法功能太多了，要不断地推出 6.1、6.2，难以规划和命名。于是 ECMA 组织改变了策略，定于每年 6 月推出一个新版本并按年份命名，在这一年期间，若干草案得到充分讨论和经过几个草案步骤后加入到新标准中。于是 ES 6.0 摇身变成 ES2015，之后的年份一直推出 ES2016、ES2017 等。</p>\n<p><strong>虽然从历史上讲，ES6 单指 ES2015；但大众更容易理解的是，ES6 泛指 ES2015 及以后的新语法功能。</strong></p>\n<p>这些年的互联网文章在特别的介绍 ES6 的语法功能，用于与 ES5 进行对比，或许再过一些年，人们不再提起 ES6 了，那时候的文章会统一讲整个 ECMAScript，再有每年 6 月份单独的讲解 ES20xx 了吧。</p>\n<h2 id=\"ES6-的相关技术\"><a href=\"#ES6-的相关技术\" class=\"headerlink\" title=\"ES6 的相关技术\"></a>ES6 的相关技术</h2><h3 id=\"polyfill、babel-是什么？\"><a href=\"#polyfill、babel-是什么？\" class=\"headerlink\" title=\"polyfill、babel 是什么？\"></a>polyfill、babel 是什么？</h3><p>ES2015 之后每一年会发布新的语法功能，我们在代码中使用新语法和功能，但用户的浏览器、Node 客户端大概率不是最新版本，并不支持这些新语法。于是发展出两个方案解决这个问题，一是使用 babel 将新语法编译为老语法（按浏览器版本覆盖率、指定标准等配置，略过不表），二是使用 polyfill 用老语法模拟出新功能。有了这两者，我们基本可以放心的写出优雅的新代码，然后由它们编译后供浏览器解析。值的说明的是，新功能那么多，现代开发者不需要去维护 polyfill 列表了，babel 中使用 core-js 库根据 browserrc 配置项智能的去引入 polyfill 了。</p>\n<h3 id=\"和-TypeScript-的关系？\"><a href=\"#和-TypeScript-的关系？\" class=\"headerlink\" title=\"和 TypeScript 的关系？\"></a>和 TypeScript 的关系？</h3><p>TypeScript 是对 ES 的类型补充，它存在一个配置项，来表明在 ts 检查、编译过程中去支持什么标准的 ES。</p>\n<h2 id=\"最后，欢迎大家在此讨论\"><a href=\"#最后，欢迎大家在此讨论\" class=\"headerlink\" title=\"最后，欢迎大家在此讨论\"></a>最后，欢迎大家在此讨论</h2><p>积极汲取大家的讨论，补充我的文章（偷笑）。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"注\"><a href=\"#注\" class=\"headerlink\" title=\"注\"></a>注</h2><p>本系列文章不是技术教程，只是个人的知识点整理。</p>\n<h2 id=\"第一段废话\"><a href=\"#第一段废话\" class=\"headerlink\" title=\"第一段废话\"></a>第一段废话</h2><p>就在昨晚，我突然冒出了奇怪的心思想要对 10 年学习工作生涯做一个总结。但今早起来发现无从下手，一是没有优秀的文笔能力，不能科学优雅地整理出重点；二是实在没有牛逼的技术能力，羞于展示于众，这么多年的成长也不过是不断咀嚼大神们的产出。得益于互联网的开源精神和友善的讨论氛围，我这并不天资聪明的脑袋也算是学到了点皮毛能一直工作以温饱无忧。但是说了废话这么多，对写总结仍是没有帮助的，我翻来覆去后打算，不如抓近几年的重点，给某个技术点做一些总结，一来锻炼自己的文笔能力，二来做一次高质量的复习也是能提升自我能力。</p>\n<h2 id=\"为什么写-ES6？\"><a href=\"#为什么写-ES6？\" class=\"headerlink\" title=\"为什么写 ES6？\"></a>为什么写 ES6？</h2><p>我从 IE6 时代开始写 JavaScript，到 2016 年左右迎接真正的成年 JS：ES6，接下来是前端爆发时代：CoffeeScript、TypeScript、Webpack、Angular、React、Node、Eslint 等百十个技术点或框架层出不穷走向成熟。我和大部分人一样，在有限的精力里不断地消化它们，它们或成为我们工作的一部分，或像 IE6 一样一去不复返。如上所说，总有一些技术如 TypeScript 那般坚持了多年之久仍然在坚强的活着，它们如此受欢迎必然有它的闪光点。而 ES6 正是如此，用稳定优秀的迭代力，现代化的设计理念、牢牢的抓住了各大厂商和开发者的心。</p>\n<p>如果看这篇文档的人儿中有一些近几年加入的开发者，我想对大家说，ES6 并不是自古就有，它的出生并不一帆风顺，甚至在推出稳定版本后，得到了一些开发者诸如“浏览器都不支持，要你何用”的嘲笑。但得益于 polyfill(s)、浏览器厂商、github 开源等好多组织的相辅相成，ES6 才成为了现在这样。</p>\n<h2 id=\"ES6-到底是什么？\"><a href=\"#ES6-到底是什么？\" class=\"headerlink\" title=\"ES6 到底是什么？\"></a>ES6 到底是什么？</h2><p>大家或多或少看了 ES6 的介绍文章，正如每个人心中哈姆雷特是不一样的，我参考总结了一些文章，加上自身的工作经验，对 ES6 做以下的介绍。</p>\n<p>JavaScript 在上世纪 90 年代被提交给标准化组织 ECMA，紧接着制定出第一个该语言标准并命名为 ECMAScript 1.0，ES 便是其简称。JavaScript 是该标准的实现之一，被广泛使用，我们可以简单的认为 JavaScript 就是 ECMAScript。</p>\n<p>之后该标准不断推出新版本一直到 5.1，当要制定 6.0 标准的时候，发现要加入的语法功能太多了，要不断地推出 6.1、6.2，难以规划和命名。于是 ECMA 组织改变了策略，定于每年 6 月推出一个新版本并按年份命名，在这一年期间，若干草案得到充分讨论和经过几个草案步骤后加入到新标准中。于是 ES 6.0 摇身变成 ES2015，之后的年份一直推出 ES2016、ES2017 等。</p>\n<p><strong>虽然从历史上讲，ES6 单指 ES2015；但大众更容易理解的是，ES6 泛指 ES2015 及以后的新语法功能。</strong></p>\n<p>这些年的互联网文章在特别的介绍 ES6 的语法功能，用于与 ES5 进行对比，或许再过一些年，人们不再提起 ES6 了，那时候的文章会统一讲整个 ECMAScript，再有每年 6 月份单独的讲解 ES20xx 了吧。</p>\n<h2 id=\"ES6-的相关技术\"><a href=\"#ES6-的相关技术\" class=\"headerlink\" title=\"ES6 的相关技术\"></a>ES6 的相关技术</h2><h3 id=\"polyfill、babel-是什么？\"><a href=\"#polyfill、babel-是什么？\" class=\"headerlink\" title=\"polyfill、babel 是什么？\"></a>polyfill、babel 是什么？</h3><p>ES2015 之后每一年会发布新的语法功能，我们在代码中使用新语法和功能，但用户的浏览器、Node 客户端大概率不是最新版本，并不支持这些新语法。于是发展出两个方案解决这个问题，一是使用 babel 将新语法编译为老语法（按浏览器版本覆盖率、指定标准等配置，略过不表），二是使用 polyfill 用老语法模拟出新功能。有了这两者，我们基本可以放心的写出优雅的新代码，然后由它们编译后供浏览器解析。值的说明的是，新功能那么多，现代开发者不需要去维护 polyfill 列表了，babel 中使用 core-js 库根据 browserrc 配置项智能的去引入 polyfill 了。</p>\n<h3 id=\"和-TypeScript-的关系？\"><a href=\"#和-TypeScript-的关系？\" class=\"headerlink\" title=\"和 TypeScript 的关系？\"></a>和 TypeScript 的关系？</h3><p>TypeScript 是对 ES 的类型补充，它存在一个配置项，来表明在 ts 检查、编译过程中去支持什么标准的 ES。</p>\n<h2 id=\"最后，欢迎大家在此讨论\"><a href=\"#最后，欢迎大家在此讨论\" class=\"headerlink\" title=\"最后，欢迎大家在此讨论\"></a>最后，欢迎大家在此讨论</h2><p>积极汲取大家的讨论，补充我的文章（偷笑）。</p>\n"},{"title":"ES6的解构赋值","url":"JavaScript/es6_destructuring_assignment","date":"2023-03-02T16:00:00.000Z","_content":"\n工作中经常会使用变量的解构赋值，随便举几个例子。\n\n## 数组解构\n\n```typescript\nconst fruits = [\"apple\", \"pear\", \"orange\", \"banana\", \"peach\"];\nconst [fruit1, , fruit3, ...otherFruits] = fruits;\n\nconsole.log({\n  fruit1,\n  fruit3,\n  otherFruits,\n});\n```\n\n```shell\n> node 1.ts\n{\n  fruit1: 'apple',\n  fruit3: 'orange',\n  otherFruits: [ 'banana', 'peach' ]\n}\n```\n\n在执行结果中可以看到，`fruit1`是 apple，其后是一个空位，所以`fruit3`是 orange，`otherFruits`前面有扩展运算符，所以它读取了剩下的所有索引值。\n\n## 对象解构\n\n对象解构里记录一个概念，就是模式与变量，见下面一个嵌套结构的例子：\n\n```typescript\nconst user = {\n  base: {\n    truename: \"张三\",\n    sex: \"女\",\n  },\n  card: \"320xxx\",\n};\n\nconst {\n  base,\n  base: { truename },\n  card,\n} = user;\n\nconsole.log(\"base:\", base);\nconsole.log(\"truename:\", truename);\nconsole.log(\"card:\", card);\n```\n\n```shell\nbase: { truename: '张三', sex: '女' }\ntruename: 张三\ncard: 320xxx\n```\n\n在如上的对象解构中，第一个`base`是变量，第二个`base`是模式，它的值是`user`对象中的`base`属性，`truename`是变量，`card`也是变量。\n\n## 字符串、数组、布尔值解构\n\n因为解构的规则是将变量转为对象（数组也是对象），字符串、数字、布尔都可以转成对象。\n\n**所以字符串可以像数组**那样解构。\n\n```typescript\nconst word = \"abcdefg\";\n\nconst [, x] = word;\nconst { 3: y } = word;\n\nconsole.log({ x, y });\n```\n\n```shell\n{ x: 'b', y: 'd' }\n```\n\n## 小技巧\n\n**数组也是对象**，所以读取指定索引的值，可以这样写：\n\n```typescript\nconst fruits = [\"apple\", \"pear\", \"orange\", \"banana\", \"peach\"];\nconst { 3: fruit1 } = fruits;\n\nconsole.log(fruit1);\n```\n\n```shell\nbanana\n```\n","source":"_posts/JavaScript/ES6的解构赋值.md","raw":"---\ntitle: ES6的解构赋值\nurl: JavaScript/es6_destructuring_assignment\ndate: 2023-03-03\ntags:\n  - javascript\ncategories:\n  - [JavaScript]\n---\n\n工作中经常会使用变量的解构赋值，随便举几个例子。\n\n## 数组解构\n\n```typescript\nconst fruits = [\"apple\", \"pear\", \"orange\", \"banana\", \"peach\"];\nconst [fruit1, , fruit3, ...otherFruits] = fruits;\n\nconsole.log({\n  fruit1,\n  fruit3,\n  otherFruits,\n});\n```\n\n```shell\n> node 1.ts\n{\n  fruit1: 'apple',\n  fruit3: 'orange',\n  otherFruits: [ 'banana', 'peach' ]\n}\n```\n\n在执行结果中可以看到，`fruit1`是 apple，其后是一个空位，所以`fruit3`是 orange，`otherFruits`前面有扩展运算符，所以它读取了剩下的所有索引值。\n\n## 对象解构\n\n对象解构里记录一个概念，就是模式与变量，见下面一个嵌套结构的例子：\n\n```typescript\nconst user = {\n  base: {\n    truename: \"张三\",\n    sex: \"女\",\n  },\n  card: \"320xxx\",\n};\n\nconst {\n  base,\n  base: { truename },\n  card,\n} = user;\n\nconsole.log(\"base:\", base);\nconsole.log(\"truename:\", truename);\nconsole.log(\"card:\", card);\n```\n\n```shell\nbase: { truename: '张三', sex: '女' }\ntruename: 张三\ncard: 320xxx\n```\n\n在如上的对象解构中，第一个`base`是变量，第二个`base`是模式，它的值是`user`对象中的`base`属性，`truename`是变量，`card`也是变量。\n\n## 字符串、数组、布尔值解构\n\n因为解构的规则是将变量转为对象（数组也是对象），字符串、数字、布尔都可以转成对象。\n\n**所以字符串可以像数组**那样解构。\n\n```typescript\nconst word = \"abcdefg\";\n\nconst [, x] = word;\nconst { 3: y } = word;\n\nconsole.log({ x, y });\n```\n\n```shell\n{ x: 'b', y: 'd' }\n```\n\n## 小技巧\n\n**数组也是对象**，所以读取指定索引的值，可以这样写：\n\n```typescript\nconst fruits = [\"apple\", \"pear\", \"orange\", \"banana\", \"peach\"];\nconst { 3: fruit1 } = fruits;\n\nconsole.log(fruit1);\n```\n\n```shell\nbanana\n```\n","slug":"JavaScript/ES6的解构赋值","published":1,"updated":"2023-07-05T07:43:17.881Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cljpf1kts0003mtrr6eyu56pq","content":"<p>工作中经常会使用变量的解构赋值，随便举几个例子。</p>\n<h2 id=\"数组解构\"><a href=\"#数组解构\" class=\"headerlink\" title=\"数组解构\"></a>数组解构</h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fruits = [<span class=\"string\">&quot;apple&quot;</span>, <span class=\"string\">&quot;pear&quot;</span>, <span class=\"string\">&quot;orange&quot;</span>, <span class=\"string\">&quot;banana&quot;</span>, <span class=\"string\">&quot;peach&quot;</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> [fruit1, , fruit3, ...otherFruits] = fruits;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(&#123;</span><br><span class=\"line\">  fruit1,</span><br><span class=\"line\">  fruit3,</span><br><span class=\"line\">  otherFruits,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\">node 1.ts</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  fruit1: &#x27;apple&#x27;,</span><br><span class=\"line\">  fruit3: &#x27;orange&#x27;,</span><br><span class=\"line\">  otherFruits: [ &#x27;banana&#x27;, &#x27;peach&#x27; ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在执行结果中可以看到，<code>fruit1</code>是 apple，其后是一个空位，所以<code>fruit3</code>是 orange，<code>otherFruits</code>前面有扩展运算符，所以它读取了剩下的所有索引值。</p>\n<h2 id=\"对象解构\"><a href=\"#对象解构\" class=\"headerlink\" title=\"对象解构\"></a>对象解构</h2><p>对象解构里记录一个概念，就是模式与变量，见下面一个嵌套结构的例子：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> user = &#123;</span><br><span class=\"line\">  <span class=\"attr\">base</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">truename</span>: <span class=\"string\">&quot;张三&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">sex</span>: <span class=\"string\">&quot;女&quot;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">card</span>: <span class=\"string\">&quot;320xxx&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">  base,</span><br><span class=\"line\">  <span class=\"attr\">base</span>: &#123; truename &#125;,</span><br><span class=\"line\">  card,</span><br><span class=\"line\">&#125; = user;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;base:&quot;</span>, base);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;truename:&quot;</span>, truename);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;card:&quot;</span>, card);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">base: &#123; truename: &#x27;张三&#x27;, sex: &#x27;女&#x27; &#125;</span><br><span class=\"line\">truename: 张三</span><br><span class=\"line\">card: 320xxx</span><br></pre></td></tr></table></figure>\n\n<p>在如上的对象解构中，第一个<code>base</code>是变量，第二个<code>base</code>是模式，它的值是<code>user</code>对象中的<code>base</code>属性，<code>truename</code>是变量，<code>card</code>也是变量。</p>\n<h2 id=\"字符串、数组、布尔值解构\"><a href=\"#字符串、数组、布尔值解构\" class=\"headerlink\" title=\"字符串、数组、布尔值解构\"></a>字符串、数组、布尔值解构</h2><p>因为解构的规则是将变量转为对象（数组也是对象），字符串、数字、布尔都可以转成对象。</p>\n<p><strong>所以字符串可以像数组</strong>那样解构。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> word = <span class=\"string\">&quot;abcdefg&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> [, x] = word;</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; <span class=\"number\">3</span>: y &#125; = word;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(&#123; x, y &#125;);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; x: &#x27;b&#x27;, y: &#x27;d&#x27; &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"小技巧\"><a href=\"#小技巧\" class=\"headerlink\" title=\"小技巧\"></a>小技巧</h2><p><strong>数组也是对象</strong>，所以读取指定索引的值，可以这样写：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fruits = [<span class=\"string\">&quot;apple&quot;</span>, <span class=\"string\">&quot;pear&quot;</span>, <span class=\"string\">&quot;orange&quot;</span>, <span class=\"string\">&quot;banana&quot;</span>, <span class=\"string\">&quot;peach&quot;</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; <span class=\"number\">3</span>: fruit1 &#125; = fruits;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(fruit1);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">banana</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>工作中经常会使用变量的解构赋值，随便举几个例子。</p>\n<h2 id=\"数组解构\"><a href=\"#数组解构\" class=\"headerlink\" title=\"数组解构\"></a>数组解构</h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fruits = [<span class=\"string\">&quot;apple&quot;</span>, <span class=\"string\">&quot;pear&quot;</span>, <span class=\"string\">&quot;orange&quot;</span>, <span class=\"string\">&quot;banana&quot;</span>, <span class=\"string\">&quot;peach&quot;</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> [fruit1, , fruit3, ...otherFruits] = fruits;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(&#123;</span><br><span class=\"line\">  fruit1,</span><br><span class=\"line\">  fruit3,</span><br><span class=\"line\">  otherFruits,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\">node 1.ts</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  fruit1: &#x27;apple&#x27;,</span><br><span class=\"line\">  fruit3: &#x27;orange&#x27;,</span><br><span class=\"line\">  otherFruits: [ &#x27;banana&#x27;, &#x27;peach&#x27; ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在执行结果中可以看到，<code>fruit1</code>是 apple，其后是一个空位，所以<code>fruit3</code>是 orange，<code>otherFruits</code>前面有扩展运算符，所以它读取了剩下的所有索引值。</p>\n<h2 id=\"对象解构\"><a href=\"#对象解构\" class=\"headerlink\" title=\"对象解构\"></a>对象解构</h2><p>对象解构里记录一个概念，就是模式与变量，见下面一个嵌套结构的例子：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> user = &#123;</span><br><span class=\"line\">  <span class=\"attr\">base</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">truename</span>: <span class=\"string\">&quot;张三&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">sex</span>: <span class=\"string\">&quot;女&quot;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">card</span>: <span class=\"string\">&quot;320xxx&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">  base,</span><br><span class=\"line\">  <span class=\"attr\">base</span>: &#123; truename &#125;,</span><br><span class=\"line\">  card,</span><br><span class=\"line\">&#125; = user;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;base:&quot;</span>, base);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;truename:&quot;</span>, truename);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;card:&quot;</span>, card);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">base: &#123; truename: &#x27;张三&#x27;, sex: &#x27;女&#x27; &#125;</span><br><span class=\"line\">truename: 张三</span><br><span class=\"line\">card: 320xxx</span><br></pre></td></tr></table></figure>\n\n<p>在如上的对象解构中，第一个<code>base</code>是变量，第二个<code>base</code>是模式，它的值是<code>user</code>对象中的<code>base</code>属性，<code>truename</code>是变量，<code>card</code>也是变量。</p>\n<h2 id=\"字符串、数组、布尔值解构\"><a href=\"#字符串、数组、布尔值解构\" class=\"headerlink\" title=\"字符串、数组、布尔值解构\"></a>字符串、数组、布尔值解构</h2><p>因为解构的规则是将变量转为对象（数组也是对象），字符串、数字、布尔都可以转成对象。</p>\n<p><strong>所以字符串可以像数组</strong>那样解构。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> word = <span class=\"string\">&quot;abcdefg&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> [, x] = word;</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; <span class=\"number\">3</span>: y &#125; = word;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(&#123; x, y &#125;);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; x: &#x27;b&#x27;, y: &#x27;d&#x27; &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"小技巧\"><a href=\"#小技巧\" class=\"headerlink\" title=\"小技巧\"></a>小技巧</h2><p><strong>数组也是对象</strong>，所以读取指定索引的值，可以这样写：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fruits = [<span class=\"string\">&quot;apple&quot;</span>, <span class=\"string\">&quot;pear&quot;</span>, <span class=\"string\">&quot;orange&quot;</span>, <span class=\"string\">&quot;banana&quot;</span>, <span class=\"string\">&quot;peach&quot;</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; <span class=\"number\">3</span>: fruit1 &#125; = fruits;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(fruit1);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">banana</span><br></pre></td></tr></table></figure>\n"},{"title":"Map真的挺好的","url":"JavaScript/Map","date":"2023-03-06T16:00:00.000Z","_content":"\n在以前，想要维护一个集合去处理 dom 和其附加信息的关系，使用 Array 方式如下：\n\n```ts\nconst list = [\n  {\n    dom: dom1,\n    info: { area: 123 },\n  },\n  {\n    dom: dom2,\n    info: { area: 123 },\n  },\n];\n```\n\n如上代码有个很难受的问题，就是读取某个 dom 的时候需要遍历，而且每次都需要遍历，如果数据量大的话，性能会很差。\n\n那么改成 Object 方式：\n\n```ts\nconst list = {\n  key1: {\n    dom: dom1,\n    info: { area: 123 },\n  },\n  key2: {\n    dom: dom1,\n    info: { area: 123 },\n  },\n};\n```\n\n这种方式虽然可以快速读取，但是如何处理 key 和 dom 的关系又是一个麻烦；并且如果需要遍历的话，就需要先转成 Array，然后再遍历，这样也很麻烦。\n\n## Map 的基础用法\n\n但是使用 Map 可以方便的解决上面的问题：\n\n```ts\nconst list = new Map([\n  [dom1, { area: 123 }],\n  [dom2, { area: 123 }],\n]);\n```\n\n这样就可以快速的读取 dom 对应的信息，也可以快速的遍历。\n\n## 注意点\n\n- Map 的键是内存引用，所以两个相同值的对象实例，它们是两个键。\n- Map 采取了和 Set 一样的比较算法，所以虽然 NaN 不严格相等于自身，但 Map 将其视为同一个键。\n","source":"_posts/JavaScript/Map真的挺好的.md","raw":"---\ntitle: Map真的挺好的\nurl: JavaScript/Map\ndate: 2023-03-07\ntags:\n  - javascript\ncategories:\n  - [JavaScript]\n---\n\n在以前，想要维护一个集合去处理 dom 和其附加信息的关系，使用 Array 方式如下：\n\n```ts\nconst list = [\n  {\n    dom: dom1,\n    info: { area: 123 },\n  },\n  {\n    dom: dom2,\n    info: { area: 123 },\n  },\n];\n```\n\n如上代码有个很难受的问题，就是读取某个 dom 的时候需要遍历，而且每次都需要遍历，如果数据量大的话，性能会很差。\n\n那么改成 Object 方式：\n\n```ts\nconst list = {\n  key1: {\n    dom: dom1,\n    info: { area: 123 },\n  },\n  key2: {\n    dom: dom1,\n    info: { area: 123 },\n  },\n};\n```\n\n这种方式虽然可以快速读取，但是如何处理 key 和 dom 的关系又是一个麻烦；并且如果需要遍历的话，就需要先转成 Array，然后再遍历，这样也很麻烦。\n\n## Map 的基础用法\n\n但是使用 Map 可以方便的解决上面的问题：\n\n```ts\nconst list = new Map([\n  [dom1, { area: 123 }],\n  [dom2, { area: 123 }],\n]);\n```\n\n这样就可以快速的读取 dom 对应的信息，也可以快速的遍历。\n\n## 注意点\n\n- Map 的键是内存引用，所以两个相同值的对象实例，它们是两个键。\n- Map 采取了和 Set 一样的比较算法，所以虽然 NaN 不严格相等于自身，但 Map 将其视为同一个键。\n","slug":"JavaScript/Map真的挺好的","published":1,"updated":"2023-07-05T07:43:25.532Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cljpf1ktu0005mtrr2t1t22qw","content":"<p>在以前，想要维护一个集合去处理 dom 和其附加信息的关系，使用 Array 方式如下：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> list = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">dom</span>: dom1,</span><br><span class=\"line\">    <span class=\"attr\">info</span>: &#123; <span class=\"attr\">area</span>: <span class=\"number\">123</span> &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">dom</span>: dom2,</span><br><span class=\"line\">    <span class=\"attr\">info</span>: &#123; <span class=\"attr\">area</span>: <span class=\"number\">123</span> &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n\n<p>如上代码有个很难受的问题，就是读取某个 dom 的时候需要遍历，而且每次都需要遍历，如果数据量大的话，性能会很差。</p>\n<p>那么改成 Object 方式：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> list = &#123;</span><br><span class=\"line\">  <span class=\"attr\">key1</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">dom</span>: dom1,</span><br><span class=\"line\">    <span class=\"attr\">info</span>: &#123; <span class=\"attr\">area</span>: <span class=\"number\">123</span> &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">key2</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">dom</span>: dom1,</span><br><span class=\"line\">    <span class=\"attr\">info</span>: &#123; <span class=\"attr\">area</span>: <span class=\"number\">123</span> &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>这种方式虽然可以快速读取，但是如何处理 key 和 dom 的关系又是一个麻烦；并且如果需要遍历的话，就需要先转成 Array，然后再遍历，这样也很麻烦。</p>\n<h2 id=\"Map-的基础用法\"><a href=\"#Map-的基础用法\" class=\"headerlink\" title=\"Map 的基础用法\"></a>Map 的基础用法</h2><p>但是使用 Map 可以方便的解决上面的问题：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> list = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>([</span><br><span class=\"line\">  [dom1, &#123; <span class=\"attr\">area</span>: <span class=\"number\">123</span> &#125;],</span><br><span class=\"line\">  [dom2, &#123; <span class=\"attr\">area</span>: <span class=\"number\">123</span> &#125;],</span><br><span class=\"line\">]);</span><br></pre></td></tr></table></figure>\n\n<p>这样就可以快速的读取 dom 对应的信息，也可以快速的遍历。</p>\n<h2 id=\"注意点\"><a href=\"#注意点\" class=\"headerlink\" title=\"注意点\"></a>注意点</h2><ul>\n<li>Map 的键是内存引用，所以两个相同值的对象实例，它们是两个键。</li>\n<li>Map 采取了和 Set 一样的比较算法，所以虽然 NaN 不严格相等于自身，但 Map 将其视为同一个键。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>在以前，想要维护一个集合去处理 dom 和其附加信息的关系，使用 Array 方式如下：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> list = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">dom</span>: dom1,</span><br><span class=\"line\">    <span class=\"attr\">info</span>: &#123; <span class=\"attr\">area</span>: <span class=\"number\">123</span> &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">dom</span>: dom2,</span><br><span class=\"line\">    <span class=\"attr\">info</span>: &#123; <span class=\"attr\">area</span>: <span class=\"number\">123</span> &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n\n<p>如上代码有个很难受的问题，就是读取某个 dom 的时候需要遍历，而且每次都需要遍历，如果数据量大的话，性能会很差。</p>\n<p>那么改成 Object 方式：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> list = &#123;</span><br><span class=\"line\">  <span class=\"attr\">key1</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">dom</span>: dom1,</span><br><span class=\"line\">    <span class=\"attr\">info</span>: &#123; <span class=\"attr\">area</span>: <span class=\"number\">123</span> &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">key2</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">dom</span>: dom1,</span><br><span class=\"line\">    <span class=\"attr\">info</span>: &#123; <span class=\"attr\">area</span>: <span class=\"number\">123</span> &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>这种方式虽然可以快速读取，但是如何处理 key 和 dom 的关系又是一个麻烦；并且如果需要遍历的话，就需要先转成 Array，然后再遍历，这样也很麻烦。</p>\n<h2 id=\"Map-的基础用法\"><a href=\"#Map-的基础用法\" class=\"headerlink\" title=\"Map 的基础用法\"></a>Map 的基础用法</h2><p>但是使用 Map 可以方便的解决上面的问题：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> list = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>([</span><br><span class=\"line\">  [dom1, &#123; <span class=\"attr\">area</span>: <span class=\"number\">123</span> &#125;],</span><br><span class=\"line\">  [dom2, &#123; <span class=\"attr\">area</span>: <span class=\"number\">123</span> &#125;],</span><br><span class=\"line\">]);</span><br></pre></td></tr></table></figure>\n\n<p>这样就可以快速的读取 dom 对应的信息，也可以快速的遍历。</p>\n<h2 id=\"注意点\"><a href=\"#注意点\" class=\"headerlink\" title=\"注意点\"></a>注意点</h2><ul>\n<li>Map 的键是内存引用，所以两个相同值的对象实例，它们是两个键。</li>\n<li>Map 采取了和 Set 一样的比较算法，所以虽然 NaN 不严格相等于自身，但 Map 将其视为同一个键。</li>\n</ul>\n"},{"title":"Proxy的应用场景","url":"JavaScript/using_Proxy","date":"2023-03-07T16:00:00.000Z","_content":"\nProxy 拦截对象的操作，这些操作有 13 种：get、set、apply 等。\n\n## get、set\n\n拦截对象的读取和赋值操作。如下场景，如果用户角色是管理员，那么期望在读取姓名的时候，补充上“管理员”角色名称，并且管理员的姓名不允许被修改。\n\n```ts\nconst user = {\n  name: \"张三\",\n  sex: \"男\",\n};\n\nconst admin = new Proxy(\n  { ...user },\n  {\n    get: (target, key) => {\n      if (key === \"name\") {\n        return `管理员：${target[key]}`;\n      }\n      return target[key];\n    },\n\n    set: (target, key, value) => {\n      if (key === \"name\") {\n        throw new Error(\"不能修改管理员姓名\");\n      }\n      target[key] = value;\n      return true;\n    },\n  }\n);\n\nconsole.log(\"admin信息1：\", admin.name, admin.sex);\nadmin.sex = \"女\";\ntry {\n  admin.name = \"李四\";\n} catch (e) {\n  console.log(e);\n}\nconsole.log(\"admin信息2：\", admin.name, admin.sex);\n```\n\n```shell\nadmin信息1： 管理员：张三 男\nError: 不能修改管理员姓名\n    at Object.set (/Users/stao2/www/learn/something/1.ts:18:15)\n    at Object.<anonymous> (/Users/stao2/www/learn/something/1.ts:29:14)\n    at Module._compile (node:internal/modules/cjs/loader:1254:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1308:10)\n    at Module.load (node:internal/modules/cjs/loader:1117:32)\n    at Module._load (node:internal/modules/cjs/loader:958:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:23:47\nadmin信息2： 管理员：张三 女\n```\n\n利用这个规则，可以方便的给对象做一层扩展，而不用修改原来的对象逻辑。\n\n## apply\n\napply 可以拦截函数的调用，对用户的年龄，但是对不同的角色，校验规则不一样，而且校验代码挺多，函数里的校验就耦合了。例如：\n\n```ts\nfunction validate(role, age) {\n  if (role === \"student\") {\n    if (age < 7) {\n      return \"不满足学生年龄\";\n    }\n  }\n  if (role === \"teacher\") {\n    if (age < 24 || age > 60) {\n      return \"不满足教室年龄\";\n    }\n  }\n  // ...其他公用的代码\n  return \"validate success\";\n}\n\nconsole.log(validate(\"student\", 4), validate(\"teacher\", 123));\n```\n\n```shell\n不满足学生年龄 不满足教室年龄\n```\n\n但是利用 Proxy，可以这样做：\n\n```ts\nfunction validate(user) {\n  // ...其他公用的代码\n  return \"validate success\";\n}\n\nconst validateStudent = new Proxy(validate, {\n  apply: (target, thisArg, args) => {\n    const [user] = args;\n    if (user.age < 7) {\n      return \"不满足学生年龄\";\n    }\n    return target(args);\n  },\n});\n\nconsole.log(validateStudent({ age: 7 }), validateStudent({ age: 8 }));\n```\n\n## 其他\n\nProxy 还有`has`，`construct`等拦截，先知道有这些东西，用的时候看文档用 Proxy 实现，而不是自己两眼一抹黑写了半天自己杂乱的代码。\n\n值得一提的是，很多 MVVM 框架是用 Proxy 做数据劫持的，例如 Vue3，这样可以监听到对象的变化，从而实现响应式。\n","source":"_posts/JavaScript/Proxy的应用场景.md","raw":"---\ntitle: Proxy的应用场景\nurl: JavaScript/using_Proxy\ndate: 2023-03-08\ntags:\n  - javascript\n  - proxy\ncategories:\n  - [JavaScript]\n---\n\nProxy 拦截对象的操作，这些操作有 13 种：get、set、apply 等。\n\n## get、set\n\n拦截对象的读取和赋值操作。如下场景，如果用户角色是管理员，那么期望在读取姓名的时候，补充上“管理员”角色名称，并且管理员的姓名不允许被修改。\n\n```ts\nconst user = {\n  name: \"张三\",\n  sex: \"男\",\n};\n\nconst admin = new Proxy(\n  { ...user },\n  {\n    get: (target, key) => {\n      if (key === \"name\") {\n        return `管理员：${target[key]}`;\n      }\n      return target[key];\n    },\n\n    set: (target, key, value) => {\n      if (key === \"name\") {\n        throw new Error(\"不能修改管理员姓名\");\n      }\n      target[key] = value;\n      return true;\n    },\n  }\n);\n\nconsole.log(\"admin信息1：\", admin.name, admin.sex);\nadmin.sex = \"女\";\ntry {\n  admin.name = \"李四\";\n} catch (e) {\n  console.log(e);\n}\nconsole.log(\"admin信息2：\", admin.name, admin.sex);\n```\n\n```shell\nadmin信息1： 管理员：张三 男\nError: 不能修改管理员姓名\n    at Object.set (/Users/stao2/www/learn/something/1.ts:18:15)\n    at Object.<anonymous> (/Users/stao2/www/learn/something/1.ts:29:14)\n    at Module._compile (node:internal/modules/cjs/loader:1254:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1308:10)\n    at Module.load (node:internal/modules/cjs/loader:1117:32)\n    at Module._load (node:internal/modules/cjs/loader:958:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:23:47\nadmin信息2： 管理员：张三 女\n```\n\n利用这个规则，可以方便的给对象做一层扩展，而不用修改原来的对象逻辑。\n\n## apply\n\napply 可以拦截函数的调用，对用户的年龄，但是对不同的角色，校验规则不一样，而且校验代码挺多，函数里的校验就耦合了。例如：\n\n```ts\nfunction validate(role, age) {\n  if (role === \"student\") {\n    if (age < 7) {\n      return \"不满足学生年龄\";\n    }\n  }\n  if (role === \"teacher\") {\n    if (age < 24 || age > 60) {\n      return \"不满足教室年龄\";\n    }\n  }\n  // ...其他公用的代码\n  return \"validate success\";\n}\n\nconsole.log(validate(\"student\", 4), validate(\"teacher\", 123));\n```\n\n```shell\n不满足学生年龄 不满足教室年龄\n```\n\n但是利用 Proxy，可以这样做：\n\n```ts\nfunction validate(user) {\n  // ...其他公用的代码\n  return \"validate success\";\n}\n\nconst validateStudent = new Proxy(validate, {\n  apply: (target, thisArg, args) => {\n    const [user] = args;\n    if (user.age < 7) {\n      return \"不满足学生年龄\";\n    }\n    return target(args);\n  },\n});\n\nconsole.log(validateStudent({ age: 7 }), validateStudent({ age: 8 }));\n```\n\n## 其他\n\nProxy 还有`has`，`construct`等拦截，先知道有这些东西，用的时候看文档用 Proxy 实现，而不是自己两眼一抹黑写了半天自己杂乱的代码。\n\n值得一提的是，很多 MVVM 框架是用 Proxy 做数据劫持的，例如 Vue3，这样可以监听到对象的变化，从而实现响应式。\n","slug":"JavaScript/Proxy的应用场景","published":1,"updated":"2023-07-05T07:44:12.366Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cljpf1ktu0006mtrr3w4xcf0j","content":"<p>Proxy 拦截对象的操作，这些操作有 13 种：get、set、apply 等。</p>\n<h2 id=\"get、set\"><a href=\"#get、set\" class=\"headerlink\" title=\"get、set\"></a>get、set</h2><p>拦截对象的读取和赋值操作。如下场景，如果用户角色是管理员，那么期望在读取姓名的时候，补充上“管理员”角色名称，并且管理员的姓名不允许被修改。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> user = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;张三&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">sex</span>: <span class=\"string\">&quot;男&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> admin = <span class=\"keyword\">new</span> <span class=\"title class_\">Proxy</span>(</span><br><span class=\"line\">  &#123; ...user &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">get</span>: <span class=\"function\">(<span class=\"params\">target, key</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (key === <span class=\"string\">&quot;name&quot;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">`管理员：<span class=\"subst\">$&#123;target[key]&#125;</span>`</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> target[key];</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">set</span>: <span class=\"function\">(<span class=\"params\">target, key, value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (key === <span class=\"string\">&quot;name&quot;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&quot;不能修改管理员姓名&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      target[key] = value;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;admin信息1：&quot;</span>, admin.<span class=\"property\">name</span>, admin.<span class=\"property\">sex</span>);</span><br><span class=\"line\">admin.<span class=\"property\">sex</span> = <span class=\"string\">&quot;女&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  admin.<span class=\"property\">name</span> = <span class=\"string\">&quot;李四&quot;</span>;</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(e);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;admin信息2：&quot;</span>, admin.<span class=\"property\">name</span>, admin.<span class=\"property\">sex</span>);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">admin信息1： 管理员：张三 男</span><br><span class=\"line\">Error: 不能修改管理员姓名</span><br><span class=\"line\">    at Object.set (/Users/stao2/www/learn/something/1.ts:18:15)</span><br><span class=\"line\">    at Object.&lt;anonymous&gt; (/Users/stao2/www/learn/something/1.ts:29:14)</span><br><span class=\"line\">    at Module._compile (node:internal/modules/cjs/loader:1254:14)</span><br><span class=\"line\">    at Module._extensions..js (node:internal/modules/cjs/loader:1308:10)</span><br><span class=\"line\">    at Module.load (node:internal/modules/cjs/loader:1117:32)</span><br><span class=\"line\">    at Module._load (node:internal/modules/cjs/loader:958:12)</span><br><span class=\"line\">    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)</span><br><span class=\"line\">    at node:internal/main/run_main_module:23:47</span><br><span class=\"line\">admin信息2： 管理员：张三 女</span><br></pre></td></tr></table></figure>\n\n<p>利用这个规则，可以方便的给对象做一层扩展，而不用修改原来的对象逻辑。</p>\n<h2 id=\"apply\"><a href=\"#apply\" class=\"headerlink\" title=\"apply\"></a>apply</h2><p>apply 可以拦截函数的调用，对用户的年龄，但是对不同的角色，校验规则不一样，而且校验代码挺多，函数里的校验就耦合了。例如：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">validate</span>(<span class=\"params\">role, age</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (role === <span class=\"string\">&quot;student&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (age &lt; <span class=\"number\">7</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&quot;不满足学生年龄&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (role === <span class=\"string\">&quot;teacher&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (age &lt; <span class=\"number\">24</span> || age &gt; <span class=\"number\">60</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&quot;不满足教室年龄&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// ...其他公用的代码</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&quot;validate success&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">validate</span>(<span class=\"string\">&quot;student&quot;</span>, <span class=\"number\">4</span>), <span class=\"title function_\">validate</span>(<span class=\"string\">&quot;teacher&quot;</span>, <span class=\"number\">123</span>));</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">不满足学生年龄 不满足教室年龄</span><br></pre></td></tr></table></figure>\n\n<p>但是利用 Proxy，可以这样做：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">validate</span>(<span class=\"params\">user</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...其他公用的代码</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&quot;validate success&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> validateStudent = <span class=\"keyword\">new</span> <span class=\"title class_\">Proxy</span>(validate, &#123;</span><br><span class=\"line\">  <span class=\"attr\">apply</span>: <span class=\"function\">(<span class=\"params\">target, thisArg, args</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [user] = args;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (user.<span class=\"property\">age</span> &lt; <span class=\"number\">7</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&quot;不满足学生年龄&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">target</span>(args);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">validateStudent</span>(&#123; <span class=\"attr\">age</span>: <span class=\"number\">7</span> &#125;), <span class=\"title function_\">validateStudent</span>(&#123; <span class=\"attr\">age</span>: <span class=\"number\">8</span> &#125;));</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><p>Proxy 还有<code>has</code>，<code>construct</code>等拦截，先知道有这些东西，用的时候看文档用 Proxy 实现，而不是自己两眼一抹黑写了半天自己杂乱的代码。</p>\n<p>值得一提的是，很多 MVVM 框架是用 Proxy 做数据劫持的，例如 Vue3，这样可以监听到对象的变化，从而实现响应式。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Proxy 拦截对象的操作，这些操作有 13 种：get、set、apply 等。</p>\n<h2 id=\"get、set\"><a href=\"#get、set\" class=\"headerlink\" title=\"get、set\"></a>get、set</h2><p>拦截对象的读取和赋值操作。如下场景，如果用户角色是管理员，那么期望在读取姓名的时候，补充上“管理员”角色名称，并且管理员的姓名不允许被修改。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> user = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;张三&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">sex</span>: <span class=\"string\">&quot;男&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> admin = <span class=\"keyword\">new</span> <span class=\"title class_\">Proxy</span>(</span><br><span class=\"line\">  &#123; ...user &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">get</span>: <span class=\"function\">(<span class=\"params\">target, key</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (key === <span class=\"string\">&quot;name&quot;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">`管理员：<span class=\"subst\">$&#123;target[key]&#125;</span>`</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> target[key];</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">set</span>: <span class=\"function\">(<span class=\"params\">target, key, value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (key === <span class=\"string\">&quot;name&quot;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&quot;不能修改管理员姓名&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      target[key] = value;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;admin信息1：&quot;</span>, admin.<span class=\"property\">name</span>, admin.<span class=\"property\">sex</span>);</span><br><span class=\"line\">admin.<span class=\"property\">sex</span> = <span class=\"string\">&quot;女&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  admin.<span class=\"property\">name</span> = <span class=\"string\">&quot;李四&quot;</span>;</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(e);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;admin信息2：&quot;</span>, admin.<span class=\"property\">name</span>, admin.<span class=\"property\">sex</span>);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">admin信息1： 管理员：张三 男</span><br><span class=\"line\">Error: 不能修改管理员姓名</span><br><span class=\"line\">    at Object.set (/Users/stao2/www/learn/something/1.ts:18:15)</span><br><span class=\"line\">    at Object.&lt;anonymous&gt; (/Users/stao2/www/learn/something/1.ts:29:14)</span><br><span class=\"line\">    at Module._compile (node:internal/modules/cjs/loader:1254:14)</span><br><span class=\"line\">    at Module._extensions..js (node:internal/modules/cjs/loader:1308:10)</span><br><span class=\"line\">    at Module.load (node:internal/modules/cjs/loader:1117:32)</span><br><span class=\"line\">    at Module._load (node:internal/modules/cjs/loader:958:12)</span><br><span class=\"line\">    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)</span><br><span class=\"line\">    at node:internal/main/run_main_module:23:47</span><br><span class=\"line\">admin信息2： 管理员：张三 女</span><br></pre></td></tr></table></figure>\n\n<p>利用这个规则，可以方便的给对象做一层扩展，而不用修改原来的对象逻辑。</p>\n<h2 id=\"apply\"><a href=\"#apply\" class=\"headerlink\" title=\"apply\"></a>apply</h2><p>apply 可以拦截函数的调用，对用户的年龄，但是对不同的角色，校验规则不一样，而且校验代码挺多，函数里的校验就耦合了。例如：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">validate</span>(<span class=\"params\">role, age</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (role === <span class=\"string\">&quot;student&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (age &lt; <span class=\"number\">7</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&quot;不满足学生年龄&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (role === <span class=\"string\">&quot;teacher&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (age &lt; <span class=\"number\">24</span> || age &gt; <span class=\"number\">60</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&quot;不满足教室年龄&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// ...其他公用的代码</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&quot;validate success&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">validate</span>(<span class=\"string\">&quot;student&quot;</span>, <span class=\"number\">4</span>), <span class=\"title function_\">validate</span>(<span class=\"string\">&quot;teacher&quot;</span>, <span class=\"number\">123</span>));</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">不满足学生年龄 不满足教室年龄</span><br></pre></td></tr></table></figure>\n\n<p>但是利用 Proxy，可以这样做：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">validate</span>(<span class=\"params\">user</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...其他公用的代码</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&quot;validate success&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> validateStudent = <span class=\"keyword\">new</span> <span class=\"title class_\">Proxy</span>(validate, &#123;</span><br><span class=\"line\">  <span class=\"attr\">apply</span>: <span class=\"function\">(<span class=\"params\">target, thisArg, args</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [user] = args;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (user.<span class=\"property\">age</span> &lt; <span class=\"number\">7</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&quot;不满足学生年龄&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">target</span>(args);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">validateStudent</span>(&#123; <span class=\"attr\">age</span>: <span class=\"number\">7</span> &#125;), <span class=\"title function_\">validateStudent</span>(&#123; <span class=\"attr\">age</span>: <span class=\"number\">8</span> &#125;));</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><p>Proxy 还有<code>has</code>，<code>construct</code>等拦截，先知道有这些东西，用的时候看文档用 Proxy 实现，而不是自己两眼一抹黑写了半天自己杂乱的代码。</p>\n<p>值得一提的是，很多 MVVM 框架是用 Proxy 做数据劫持的，例如 Vue3，这样可以监听到对象的变化，从而实现响应式。</p>\n"},{"title":"Set真的挺好的","url":"JavaScript/Set","date":"2023-03-05T16:00:00.000Z","_content":"\n## 为什么用 Set\n\n```ts\n// Array\nlet arr1 = [\"a\", \"b\", \"c\", \"d\"];\n\narr1 = arr1.filter((element) => element !== \"d\");\narr1.filter((element) => element !== \"e\").push(\"e\");\nconsole.log(arr1.includes(\"b\"));\n\n// Object\nlet obj1 = { a: true, b: true, c: true, d: true };\n\ndelete obj1.d;\nobj1.e = true;\nconsole.log(\"b\" in obj1);\n\n// Set\nlet set1 = new Set([\"a\", \"b\", \"c\"]);\n\nset1.delete(\"d\");\nset1.add(\"e\");\nconsole.log(set1.has(\"b\"));\n```\n\n如上演示了 Array、Object、Set 三种数据结构的基本操作，Set 提供了更为便捷的方式：\n\n1. 相比 Array 有更简单的语法，在运算复杂度上有很大提升。\n1. 相比 Object 的命令式操作，Set 提供了方法式的操作。\n\n## 唯一特性\n\n在工作中，要用到集合唯一特性的场景有很多，用 Array 实现的时候，需要自己写很多代码来保证唯一性，而用 Object 实现，又不能保证元素的访问顺序。\n\n举几个例子。\n\n```ts\n// 历史搜索记录唯一\nconst s1 = new Set();\n\ns1.add(\"长江\");\ns1.add(\"黄河\");\ns1.add(\"故宫\");\ns1.add(\"长江\");\ns1.add(\"圆明园\");\n\nconsole.log(s1);\n```\n\n```ts\n// 移除输入的重复数据ID\nconst a = [23, 58, 23, 19, 96];\nconst s1 = new Set(a);\n\nconsole.log(Array.from(s1));\n```\n\n## 注意点\n\n- Set 为了保持元素的唯一，内部使用了`SameValueZero`算法，这意味着`NaN`和`NaN`是相等的，`+0`和`-0`是相等的。\n","source":"_posts/JavaScript/Set真的挺好的.md","raw":"---\ntitle: Set真的挺好的\nurl: JavaScript/Set\ndate: 2023-03-06\ntags:\n  - javascript\n  - set\ncategories:\n  - [JavaScript]\n---\n\n## 为什么用 Set\n\n```ts\n// Array\nlet arr1 = [\"a\", \"b\", \"c\", \"d\"];\n\narr1 = arr1.filter((element) => element !== \"d\");\narr1.filter((element) => element !== \"e\").push(\"e\");\nconsole.log(arr1.includes(\"b\"));\n\n// Object\nlet obj1 = { a: true, b: true, c: true, d: true };\n\ndelete obj1.d;\nobj1.e = true;\nconsole.log(\"b\" in obj1);\n\n// Set\nlet set1 = new Set([\"a\", \"b\", \"c\"]);\n\nset1.delete(\"d\");\nset1.add(\"e\");\nconsole.log(set1.has(\"b\"));\n```\n\n如上演示了 Array、Object、Set 三种数据结构的基本操作，Set 提供了更为便捷的方式：\n\n1. 相比 Array 有更简单的语法，在运算复杂度上有很大提升。\n1. 相比 Object 的命令式操作，Set 提供了方法式的操作。\n\n## 唯一特性\n\n在工作中，要用到集合唯一特性的场景有很多，用 Array 实现的时候，需要自己写很多代码来保证唯一性，而用 Object 实现，又不能保证元素的访问顺序。\n\n举几个例子。\n\n```ts\n// 历史搜索记录唯一\nconst s1 = new Set();\n\ns1.add(\"长江\");\ns1.add(\"黄河\");\ns1.add(\"故宫\");\ns1.add(\"长江\");\ns1.add(\"圆明园\");\n\nconsole.log(s1);\n```\n\n```ts\n// 移除输入的重复数据ID\nconst a = [23, 58, 23, 19, 96];\nconst s1 = new Set(a);\n\nconsole.log(Array.from(s1));\n```\n\n## 注意点\n\n- Set 为了保持元素的唯一，内部使用了`SameValueZero`算法，这意味着`NaN`和`NaN`是相等的，`+0`和`-0`是相等的。\n","slug":"JavaScript/Set真的挺好的","published":1,"updated":"2023-07-05T07:43:53.008Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cljpf1ktw000amtrr6a1h4aqp","content":"<h2 id=\"为什么用-Set\"><a href=\"#为什么用-Set\" class=\"headerlink\" title=\"为什么用 Set\"></a>为什么用 Set</h2><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Array</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr1 = [<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;c&quot;</span>, <span class=\"string\">&quot;d&quot;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">arr1 = arr1.<span class=\"title function_\">filter</span>(<span class=\"function\">(<span class=\"params\">element</span>) =&gt;</span> element !== <span class=\"string\">&quot;d&quot;</span>);</span><br><span class=\"line\">arr1.<span class=\"title function_\">filter</span>(<span class=\"function\">(<span class=\"params\">element</span>) =&gt;</span> element !== <span class=\"string\">&quot;e&quot;</span>).<span class=\"title function_\">push</span>(<span class=\"string\">&quot;e&quot;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr1.<span class=\"title function_\">includes</span>(<span class=\"string\">&quot;b&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Object</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj1 = &#123; <span class=\"attr\">a</span>: <span class=\"literal\">true</span>, <span class=\"attr\">b</span>: <span class=\"literal\">true</span>, <span class=\"attr\">c</span>: <span class=\"literal\">true</span>, <span class=\"attr\">d</span>: <span class=\"literal\">true</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">delete</span> obj1.<span class=\"property\">d</span>;</span><br><span class=\"line\">obj1.<span class=\"property\">e</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;b&quot;</span> <span class=\"keyword\">in</span> obj1);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Set</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> set1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>([<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;c&quot;</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">set1.<span class=\"title function_\">delete</span>(<span class=\"string\">&quot;d&quot;</span>);</span><br><span class=\"line\">set1.<span class=\"title function_\">add</span>(<span class=\"string\">&quot;e&quot;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(set1.<span class=\"title function_\">has</span>(<span class=\"string\">&quot;b&quot;</span>));</span><br></pre></td></tr></table></figure>\n\n<p>如上演示了 Array、Object、Set 三种数据结构的基本操作，Set 提供了更为便捷的方式：</p>\n<ol>\n<li>相比 Array 有更简单的语法，在运算复杂度上有很大提升。</li>\n<li>相比 Object 的命令式操作，Set 提供了方法式的操作。</li>\n</ol>\n<h2 id=\"唯一特性\"><a href=\"#唯一特性\" class=\"headerlink\" title=\"唯一特性\"></a>唯一特性</h2><p>在工作中，要用到集合唯一特性的场景有很多，用 Array 实现的时候，需要自己写很多代码来保证唯一性，而用 Object 实现，又不能保证元素的访问顺序。</p>\n<p>举几个例子。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 历史搜索记录唯一</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> s1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">s1.<span class=\"title function_\">add</span>(<span class=\"string\">&quot;长江&quot;</span>);</span><br><span class=\"line\">s1.<span class=\"title function_\">add</span>(<span class=\"string\">&quot;黄河&quot;</span>);</span><br><span class=\"line\">s1.<span class=\"title function_\">add</span>(<span class=\"string\">&quot;故宫&quot;</span>);</span><br><span class=\"line\">s1.<span class=\"title function_\">add</span>(<span class=\"string\">&quot;长江&quot;</span>);</span><br><span class=\"line\">s1.<span class=\"title function_\">add</span>(<span class=\"string\">&quot;圆明园&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(s1);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 移除输入的重复数据ID</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> a = [<span class=\"number\">23</span>, <span class=\"number\">58</span>, <span class=\"number\">23</span>, <span class=\"number\">19</span>, <span class=\"number\">96</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> s1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>(a);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Array</span>.<span class=\"title function_\">from</span>(s1));</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"注意点\"><a href=\"#注意点\" class=\"headerlink\" title=\"注意点\"></a>注意点</h2><ul>\n<li>Set 为了保持元素的唯一，内部使用了<code>SameValueZero</code>算法，这意味着<code>NaN</code>和<code>NaN</code>是相等的，<code>+0</code>和<code>-0</code>是相等的。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"为什么用-Set\"><a href=\"#为什么用-Set\" class=\"headerlink\" title=\"为什么用 Set\"></a>为什么用 Set</h2><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Array</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr1 = [<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;c&quot;</span>, <span class=\"string\">&quot;d&quot;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">arr1 = arr1.<span class=\"title function_\">filter</span>(<span class=\"function\">(<span class=\"params\">element</span>) =&gt;</span> element !== <span class=\"string\">&quot;d&quot;</span>);</span><br><span class=\"line\">arr1.<span class=\"title function_\">filter</span>(<span class=\"function\">(<span class=\"params\">element</span>) =&gt;</span> element !== <span class=\"string\">&quot;e&quot;</span>).<span class=\"title function_\">push</span>(<span class=\"string\">&quot;e&quot;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr1.<span class=\"title function_\">includes</span>(<span class=\"string\">&quot;b&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Object</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj1 = &#123; <span class=\"attr\">a</span>: <span class=\"literal\">true</span>, <span class=\"attr\">b</span>: <span class=\"literal\">true</span>, <span class=\"attr\">c</span>: <span class=\"literal\">true</span>, <span class=\"attr\">d</span>: <span class=\"literal\">true</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">delete</span> obj1.<span class=\"property\">d</span>;</span><br><span class=\"line\">obj1.<span class=\"property\">e</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;b&quot;</span> <span class=\"keyword\">in</span> obj1);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Set</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> set1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>([<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;c&quot;</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">set1.<span class=\"title function_\">delete</span>(<span class=\"string\">&quot;d&quot;</span>);</span><br><span class=\"line\">set1.<span class=\"title function_\">add</span>(<span class=\"string\">&quot;e&quot;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(set1.<span class=\"title function_\">has</span>(<span class=\"string\">&quot;b&quot;</span>));</span><br></pre></td></tr></table></figure>\n\n<p>如上演示了 Array、Object、Set 三种数据结构的基本操作，Set 提供了更为便捷的方式：</p>\n<ol>\n<li>相比 Array 有更简单的语法，在运算复杂度上有很大提升。</li>\n<li>相比 Object 的命令式操作，Set 提供了方法式的操作。</li>\n</ol>\n<h2 id=\"唯一特性\"><a href=\"#唯一特性\" class=\"headerlink\" title=\"唯一特性\"></a>唯一特性</h2><p>在工作中，要用到集合唯一特性的场景有很多，用 Array 实现的时候，需要自己写很多代码来保证唯一性，而用 Object 实现，又不能保证元素的访问顺序。</p>\n<p>举几个例子。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 历史搜索记录唯一</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> s1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">s1.<span class=\"title function_\">add</span>(<span class=\"string\">&quot;长江&quot;</span>);</span><br><span class=\"line\">s1.<span class=\"title function_\">add</span>(<span class=\"string\">&quot;黄河&quot;</span>);</span><br><span class=\"line\">s1.<span class=\"title function_\">add</span>(<span class=\"string\">&quot;故宫&quot;</span>);</span><br><span class=\"line\">s1.<span class=\"title function_\">add</span>(<span class=\"string\">&quot;长江&quot;</span>);</span><br><span class=\"line\">s1.<span class=\"title function_\">add</span>(<span class=\"string\">&quot;圆明园&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(s1);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 移除输入的重复数据ID</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> a = [<span class=\"number\">23</span>, <span class=\"number\">58</span>, <span class=\"number\">23</span>, <span class=\"number\">19</span>, <span class=\"number\">96</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> s1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>(a);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Array</span>.<span class=\"title function_\">from</span>(s1));</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"注意点\"><a href=\"#注意点\" class=\"headerlink\" title=\"注意点\"></a>注意点</h2><ul>\n<li>Set 为了保持元素的唯一，内部使用了<code>SameValueZero</code>算法，这意味着<code>NaN</code>和<code>NaN</code>是相等的，<code>+0</code>和<code>-0</code>是相等的。</li>\n</ul>\n"},{"title":"Reflect和Object的关系","url":"JavaScript/Reflect_And_Object","date":"2023-03-08T16:00:00.000Z","_content":"\n## Reflect 是什么\n\n在我若干年前阅读 Reflect 文档的那几天，我常闷被里自问，这是个什么玩意？随着时间的推移，我对它的理解越来越深刻，也越来越喜欢它。我想，这是一个值得深入研究的东西。(这句话是 Copilot 补充的，我觉得很有道理，就留下来了)\n\nReflect 是操作对象用的，我觉得 Reflect 最大的用处有两个。\n\n一是将 Object 的命令式、函数式混用行为，统一成函数式行为。比如`delete obj.key`，`key in obj`对应为`Reflect.deleteProperty(obj, key)`和`Reflect.has(obj, key)`。\n\n二是 Reflect 的方法和 Proxy 的拦截器一一对应，这样就可以用 Reflect 来实现 Proxy 的拦截器，而不用再写一遍拦截器的逻辑。比如`Reflect.get(obj, key)`对应为`get`拦截器，`Reflect.set(obj, key, value)`对应为`set`拦截器。\n\n**它拥有的静态方法和 Proxy 一样多**\n\n## get\n\n```ts\nconst user = {\n  name: \"张三\",\n  age: 20,\n};\n// user.age\nconsole.log(Reflect.get(user, \"age\"));\n```\n\n```shell\n20\n```\n\n代码很好理解，不一一表述了。\n\n## set\n\n```ts\nconst user = {\n  name: \"张三\",\n  age: 20,\n};\n// user.name = '李四'\nReflect.set(user, \"name\", \"李四\");\nconsole.log(user);\n```\n\n```shell\n{ name: '李四', age: 20 }\n```\n\n## delete\n\n```ts\nconst user = {\n  name: \"张三\",\n  age: 20,\n};\n\nReflect.deleteProperty(user, \"name\");\nconsole.log(user);\n```\n\n```shell\n{ age: 20 }\n```\n\n更多的方法见 MDN 即可。\n","source":"_posts/JavaScript/Reflect和Object的关系.md","raw":"---\ntitle: Reflect和Object的关系\nurl: JavaScript/Reflect_And_Object\ndate: 2023-03-09\ntags:\n  - javascript\n  - reflect\ncategories:\n  - [JavaScript]\n---\n\n## Reflect 是什么\n\n在我若干年前阅读 Reflect 文档的那几天，我常闷被里自问，这是个什么玩意？随着时间的推移，我对它的理解越来越深刻，也越来越喜欢它。我想，这是一个值得深入研究的东西。(这句话是 Copilot 补充的，我觉得很有道理，就留下来了)\n\nReflect 是操作对象用的，我觉得 Reflect 最大的用处有两个。\n\n一是将 Object 的命令式、函数式混用行为，统一成函数式行为。比如`delete obj.key`，`key in obj`对应为`Reflect.deleteProperty(obj, key)`和`Reflect.has(obj, key)`。\n\n二是 Reflect 的方法和 Proxy 的拦截器一一对应，这样就可以用 Reflect 来实现 Proxy 的拦截器，而不用再写一遍拦截器的逻辑。比如`Reflect.get(obj, key)`对应为`get`拦截器，`Reflect.set(obj, key, value)`对应为`set`拦截器。\n\n**它拥有的静态方法和 Proxy 一样多**\n\n## get\n\n```ts\nconst user = {\n  name: \"张三\",\n  age: 20,\n};\n// user.age\nconsole.log(Reflect.get(user, \"age\"));\n```\n\n```shell\n20\n```\n\n代码很好理解，不一一表述了。\n\n## set\n\n```ts\nconst user = {\n  name: \"张三\",\n  age: 20,\n};\n// user.name = '李四'\nReflect.set(user, \"name\", \"李四\");\nconsole.log(user);\n```\n\n```shell\n{ name: '李四', age: 20 }\n```\n\n## delete\n\n```ts\nconst user = {\n  name: \"张三\",\n  age: 20,\n};\n\nReflect.deleteProperty(user, \"name\");\nconsole.log(user);\n```\n\n```shell\n{ age: 20 }\n```\n\n更多的方法见 MDN 即可。\n","slug":"JavaScript/Reflect和Object的关系","published":1,"updated":"2023-07-05T07:43:49.660Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cljpf1ktx000cmtrr2jm28h0l","content":"<h2 id=\"Reflect-是什么\"><a href=\"#Reflect-是什么\" class=\"headerlink\" title=\"Reflect 是什么\"></a>Reflect 是什么</h2><p>在我若干年前阅读 Reflect 文档的那几天，我常闷被里自问，这是个什么玩意？随着时间的推移，我对它的理解越来越深刻，也越来越喜欢它。我想，这是一个值得深入研究的东西。(这句话是 Copilot 补充的，我觉得很有道理，就留下来了)</p>\n<p>Reflect 是操作对象用的，我觉得 Reflect 最大的用处有两个。</p>\n<p>一是将 Object 的命令式、函数式混用行为，统一成函数式行为。比如<code>delete obj.key</code>，<code>key in obj</code>对应为<code>Reflect.deleteProperty(obj, key)</code>和<code>Reflect.has(obj, key)</code>。</p>\n<p>二是 Reflect 的方法和 Proxy 的拦截器一一对应，这样就可以用 Reflect 来实现 Proxy 的拦截器，而不用再写一遍拦截器的逻辑。比如<code>Reflect.get(obj, key)</code>对应为<code>get</code>拦截器，<code>Reflect.set(obj, key, value)</code>对应为<code>set</code>拦截器。</p>\n<p><strong>它拥有的静态方法和 Proxy 一样多</strong></p>\n<h2 id=\"get\"><a href=\"#get\" class=\"headerlink\" title=\"get\"></a>get</h2><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> user = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;张三&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">20</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// user.age</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Reflect</span>.<span class=\"title function_\">get</span>(user, <span class=\"string\">&quot;age&quot;</span>));</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">20</span><br></pre></td></tr></table></figure>\n\n<p>代码很好理解，不一一表述了。</p>\n<h2 id=\"set\"><a href=\"#set\" class=\"headerlink\" title=\"set\"></a>set</h2><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> user = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;张三&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">20</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// user.name = &#x27;李四&#x27;</span></span><br><span class=\"line\"><span class=\"title class_\">Reflect</span>.<span class=\"title function_\">set</span>(user, <span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;李四&quot;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(user);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; name: &#x27;李四&#x27;, age: 20 &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"delete\"><a href=\"#delete\" class=\"headerlink\" title=\"delete\"></a>delete</h2><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> user = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;张三&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">20</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Reflect</span>.<span class=\"title function_\">deleteProperty</span>(user, <span class=\"string\">&quot;name&quot;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(user);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; age: 20 &#125;</span><br></pre></td></tr></table></figure>\n\n<p>更多的方法见 MDN 即可。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Reflect-是什么\"><a href=\"#Reflect-是什么\" class=\"headerlink\" title=\"Reflect 是什么\"></a>Reflect 是什么</h2><p>在我若干年前阅读 Reflect 文档的那几天，我常闷被里自问，这是个什么玩意？随着时间的推移，我对它的理解越来越深刻，也越来越喜欢它。我想，这是一个值得深入研究的东西。(这句话是 Copilot 补充的，我觉得很有道理，就留下来了)</p>\n<p>Reflect 是操作对象用的，我觉得 Reflect 最大的用处有两个。</p>\n<p>一是将 Object 的命令式、函数式混用行为，统一成函数式行为。比如<code>delete obj.key</code>，<code>key in obj</code>对应为<code>Reflect.deleteProperty(obj, key)</code>和<code>Reflect.has(obj, key)</code>。</p>\n<p>二是 Reflect 的方法和 Proxy 的拦截器一一对应，这样就可以用 Reflect 来实现 Proxy 的拦截器，而不用再写一遍拦截器的逻辑。比如<code>Reflect.get(obj, key)</code>对应为<code>get</code>拦截器，<code>Reflect.set(obj, key, value)</code>对应为<code>set</code>拦截器。</p>\n<p><strong>它拥有的静态方法和 Proxy 一样多</strong></p>\n<h2 id=\"get\"><a href=\"#get\" class=\"headerlink\" title=\"get\"></a>get</h2><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> user = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;张三&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">20</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// user.age</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Reflect</span>.<span class=\"title function_\">get</span>(user, <span class=\"string\">&quot;age&quot;</span>));</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">20</span><br></pre></td></tr></table></figure>\n\n<p>代码很好理解，不一一表述了。</p>\n<h2 id=\"set\"><a href=\"#set\" class=\"headerlink\" title=\"set\"></a>set</h2><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> user = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;张三&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">20</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// user.name = &#x27;李四&#x27;</span></span><br><span class=\"line\"><span class=\"title class_\">Reflect</span>.<span class=\"title function_\">set</span>(user, <span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;李四&quot;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(user);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; name: &#x27;李四&#x27;, age: 20 &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"delete\"><a href=\"#delete\" class=\"headerlink\" title=\"delete\"></a>delete</h2><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> user = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;张三&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">20</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Reflect</span>.<span class=\"title function_\">deleteProperty</span>(user, <span class=\"string\">&quot;name&quot;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(user);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; age: 20 &#125;</span><br></pre></td></tr></table></figure>\n\n<p>更多的方法见 MDN 即可。</p>\n"},{"title":"Promise的忽略点和几个方法的区别","url":"JavaScript/Promise_ignore_points_and_methods","date":"2023-03-01T16:00:00.000Z","_content":"\n**Promise**是业务开发中使用率最高的 ES6 方法了，但日常容易忽略几个点，以及记不得它几个方法的区别，现记录。\n\n## 容易忽略的点\n\n- `catch`是`then`的语法糖，但是`catch`可以捕获`then`中的异常，而`then`的第二个回调函数不行。\n- 如果没有使用`catch`捕获错误，那么 Promise 的错误不会传递到外层，即使外层有`try...catch`也捕获不到。\n- 因为`catch`捕获了`rejected`且返回新的实例，所以在`all`等方法中，p1 实现了`catch`方法，则 p1 的`rejected`不会触发 p 的`catch`。\n\n## 几个方法的区别\n\n| 方法       | resolved 的前提 | rejected 的前提 | 说明                                                                                                                                 |\n| ---------- | --------------- | --------------- | ------------------------------------------------------------------------------------------------------------------------------------ |\n| all        | 全部 resolved   | 任一 rejected   | -                                                                                                                                    |\n| race       | 任一 resolved   | 任一 rejected   | 任一率先改变的状态，传递给 p                                                                                                         |\n| allSettled | 全部改变        | -               | 状态全部改变，传递给 p。格式为: <br /> `{status: 'fulfilled', value: value}` <br/> 或者 <br/> `{status: 'rejected', reason: reason}` |\n| any        | 任一 resolved   | 全部 rejected   | 传递给`catch`的是一个`AggregateError`实例                                                                                            |\n","source":"_posts/JavaScript/Promise的忽略点和几个方法的区别.md","raw":"---\ntitle: Promise的忽略点和几个方法的区别\nurl: JavaScript/Promise_ignore_points_and_methods\ndate: 2023-03-02\ntags:\n  - javascript\n  - promise\ncategories:\n  - [JavaScript]\n---\n\n**Promise**是业务开发中使用率最高的 ES6 方法了，但日常容易忽略几个点，以及记不得它几个方法的区别，现记录。\n\n## 容易忽略的点\n\n- `catch`是`then`的语法糖，但是`catch`可以捕获`then`中的异常，而`then`的第二个回调函数不行。\n- 如果没有使用`catch`捕获错误，那么 Promise 的错误不会传递到外层，即使外层有`try...catch`也捕获不到。\n- 因为`catch`捕获了`rejected`且返回新的实例，所以在`all`等方法中，p1 实现了`catch`方法，则 p1 的`rejected`不会触发 p 的`catch`。\n\n## 几个方法的区别\n\n| 方法       | resolved 的前提 | rejected 的前提 | 说明                                                                                                                                 |\n| ---------- | --------------- | --------------- | ------------------------------------------------------------------------------------------------------------------------------------ |\n| all        | 全部 resolved   | 任一 rejected   | -                                                                                                                                    |\n| race       | 任一 resolved   | 任一 rejected   | 任一率先改变的状态，传递给 p                                                                                                         |\n| allSettled | 全部改变        | -               | 状态全部改变，传递给 p。格式为: <br /> `{status: 'fulfilled', value: value}` <br/> 或者 <br/> `{status: 'rejected', reason: reason}` |\n| any        | 任一 resolved   | 全部 rejected   | 传递给`catch`的是一个`AggregateError`实例                                                                                            |\n","slug":"JavaScript/Promise的忽略点和几个方法的区别","published":1,"updated":"2023-07-05T07:44:18.025Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cljpf1kty000gmtrr3cxiedq2","content":"<p><strong>Promise</strong>是业务开发中使用率最高的 ES6 方法了，但日常容易忽略几个点，以及记不得它几个方法的区别，现记录。</p>\n<h2 id=\"容易忽略的点\"><a href=\"#容易忽略的点\" class=\"headerlink\" title=\"容易忽略的点\"></a>容易忽略的点</h2><ul>\n<li><code>catch</code>是<code>then</code>的语法糖，但是<code>catch</code>可以捕获<code>then</code>中的异常，而<code>then</code>的第二个回调函数不行。</li>\n<li>如果没有使用<code>catch</code>捕获错误，那么 Promise 的错误不会传递到外层，即使外层有<code>try...catch</code>也捕获不到。</li>\n<li>因为<code>catch</code>捕获了<code>rejected</code>且返回新的实例，所以在<code>all</code>等方法中，p1 实现了<code>catch</code>方法，则 p1 的<code>rejected</code>不会触发 p 的<code>catch</code>。</li>\n</ul>\n<h2 id=\"几个方法的区别\"><a href=\"#几个方法的区别\" class=\"headerlink\" title=\"几个方法的区别\"></a>几个方法的区别</h2><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>resolved 的前提</th>\n<th>rejected 的前提</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>all</td>\n<td>全部 resolved</td>\n<td>任一 rejected</td>\n<td>-</td>\n</tr>\n<tr>\n<td>race</td>\n<td>任一 resolved</td>\n<td>任一 rejected</td>\n<td>任一率先改变的状态，传递给 p</td>\n</tr>\n<tr>\n<td>allSettled</td>\n<td>全部改变</td>\n<td>-</td>\n<td>状态全部改变，传递给 p。格式为: <br /> <code>&#123;status: &#39;fulfilled&#39;, value: value&#125;</code> <br/> 或者 <br/> <code>&#123;status: &#39;rejected&#39;, reason: reason&#125;</code></td>\n</tr>\n<tr>\n<td>any</td>\n<td>任一 resolved</td>\n<td>全部 rejected</td>\n<td>传递给<code>catch</code>的是一个<code>AggregateError</code>实例</td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>Promise</strong>是业务开发中使用率最高的 ES6 方法了，但日常容易忽略几个点，以及记不得它几个方法的区别，现记录。</p>\n<h2 id=\"容易忽略的点\"><a href=\"#容易忽略的点\" class=\"headerlink\" title=\"容易忽略的点\"></a>容易忽略的点</h2><ul>\n<li><code>catch</code>是<code>then</code>的语法糖，但是<code>catch</code>可以捕获<code>then</code>中的异常，而<code>then</code>的第二个回调函数不行。</li>\n<li>如果没有使用<code>catch</code>捕获错误，那么 Promise 的错误不会传递到外层，即使外层有<code>try...catch</code>也捕获不到。</li>\n<li>因为<code>catch</code>捕获了<code>rejected</code>且返回新的实例，所以在<code>all</code>等方法中，p1 实现了<code>catch</code>方法，则 p1 的<code>rejected</code>不会触发 p 的<code>catch</code>。</li>\n</ul>\n<h2 id=\"几个方法的区别\"><a href=\"#几个方法的区别\" class=\"headerlink\" title=\"几个方法的区别\"></a>几个方法的区别</h2><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>resolved 的前提</th>\n<th>rejected 的前提</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>all</td>\n<td>全部 resolved</td>\n<td>任一 rejected</td>\n<td>-</td>\n</tr>\n<tr>\n<td>race</td>\n<td>任一 resolved</td>\n<td>任一 rejected</td>\n<td>任一率先改变的状态，传递给 p</td>\n</tr>\n<tr>\n<td>allSettled</td>\n<td>全部改变</td>\n<td>-</td>\n<td>状态全部改变，传递给 p。格式为: <br /> <code>&#123;status: &#39;fulfilled&#39;, value: value&#125;</code> <br/> 或者 <br/> <code>&#123;status: &#39;rejected&#39;, reason: reason&#125;</code></td>\n</tr>\n<tr>\n<td>any</td>\n<td>任一 resolved</td>\n<td>全部 rejected</td>\n<td>传递给<code>catch</code>的是一个<code>AggregateError</code>实例</td>\n</tr>\n</tbody></table>\n"},{"title":"聊一聊Symbol","url":"JavaScript/Symbol","date":"2023-03-04T16:00:00.000Z","_content":"\n我在 5 年前看完`Symbol`，就将它抛之脑后，直到最近才重新研究，看看它是什么样的宝藏。\n\n先快速看下它是什么。\n\n## Symbol 基本用法\n\n```typescript\nconst a1 = Symbol();\nconst a2 = Symbol(\"i am a\");\nconst a3 = Symbol(\"i am a\");\n\nconsole.log(\"a1\", a1);\nconsole.log(\"a2\", a2);\nconsole.log(\"a2\", a2.description);\nconsole.log(\"a2 === a3\", a2 === a3);\n```\n\n```shell\na1 Symbol()\na2 Symbol(i am a)\na2 i am a\na2 === a3 false\n```\n\n- 从上可看到，`Symbol`是一个函数，它的返回值是一个`Symbol`类型的值，这个值是**唯一**的，即使传入相同的参数，也不会相等。\n- 入参的目的仅仅是为了描述它的来源。\n- `description`返回`Symbol`实例的描述。\n\n## 让我使用它\n\n假设如下代码：\n\n```typescript\nconst WOMAN = \"woman\";\nconst MAN = \"man\";\n\nfunction getSex(input) {\n  if (input === WOMAN) return 1;\n  if (input === MAN) return 2;\n}\n\nconsole.log(getSex(MAN));\n```\n\n但代码足够复杂，或出于粗心，几个常量的值设置为一样的字符串，怕是难以发现。那么用 Symbol 可以方便的保证其唯一性。\n\n```typescript\nconst WOMAN = Symbol();\nconst MAN = Symbol();\n// ...more\n```\n\n## Symbol 的全局注册\n\n直接看代码：\n\n```typescript\nfunction fn1() {\n  return Symbol(\"a\");\n}\n\nfunction fn2() {\n  return Symbol.for(\"a\");\n}\n\nconsole.log(\"fn1\", fn1() === fn1());\nconsole.log(\"fn2\", fn2() === fn2());\n```\n\n```shell\nfn1 false\nfn2 true\n```\n\n正如前面说的，`Symbol`函数的返回值肯定是不一样的，所以多次`fn1`的执行结果是不相等的。但是`Symbol.for`的执行结果是相等的，因为它是全局注册的。\n","source":"_posts/JavaScript/聊一聊Symbol.md","raw":"---\ntitle: 聊一聊Symbol\nurl: JavaScript/Symbol\ndate: 2023-03-05\ntags:\n  - javascript\n  - symbol\ncategories:\n  - [JavaScript]\n---\n\n我在 5 年前看完`Symbol`，就将它抛之脑后，直到最近才重新研究，看看它是什么样的宝藏。\n\n先快速看下它是什么。\n\n## Symbol 基本用法\n\n```typescript\nconst a1 = Symbol();\nconst a2 = Symbol(\"i am a\");\nconst a3 = Symbol(\"i am a\");\n\nconsole.log(\"a1\", a1);\nconsole.log(\"a2\", a2);\nconsole.log(\"a2\", a2.description);\nconsole.log(\"a2 === a3\", a2 === a3);\n```\n\n```shell\na1 Symbol()\na2 Symbol(i am a)\na2 i am a\na2 === a3 false\n```\n\n- 从上可看到，`Symbol`是一个函数，它的返回值是一个`Symbol`类型的值，这个值是**唯一**的，即使传入相同的参数，也不会相等。\n- 入参的目的仅仅是为了描述它的来源。\n- `description`返回`Symbol`实例的描述。\n\n## 让我使用它\n\n假设如下代码：\n\n```typescript\nconst WOMAN = \"woman\";\nconst MAN = \"man\";\n\nfunction getSex(input) {\n  if (input === WOMAN) return 1;\n  if (input === MAN) return 2;\n}\n\nconsole.log(getSex(MAN));\n```\n\n但代码足够复杂，或出于粗心，几个常量的值设置为一样的字符串，怕是难以发现。那么用 Symbol 可以方便的保证其唯一性。\n\n```typescript\nconst WOMAN = Symbol();\nconst MAN = Symbol();\n// ...more\n```\n\n## Symbol 的全局注册\n\n直接看代码：\n\n```typescript\nfunction fn1() {\n  return Symbol(\"a\");\n}\n\nfunction fn2() {\n  return Symbol.for(\"a\");\n}\n\nconsole.log(\"fn1\", fn1() === fn1());\nconsole.log(\"fn2\", fn2() === fn2());\n```\n\n```shell\nfn1 false\nfn2 true\n```\n\n正如前面说的，`Symbol`函数的返回值肯定是不一样的，所以多次`fn1`的执行结果是不相等的。但是`Symbol.for`的执行结果是相等的，因为它是全局注册的。\n","slug":"JavaScript/聊一聊Symbol","published":1,"updated":"2023-07-05T07:43:56.033Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cljpf1ktz000imtrreh3r1gj5","content":"<p>我在 5 年前看完<code>Symbol</code>，就将它抛之脑后，直到最近才重新研究，看看它是什么样的宝藏。</p>\n<p>先快速看下它是什么。</p>\n<h2 id=\"Symbol-基本用法\"><a href=\"#Symbol-基本用法\" class=\"headerlink\" title=\"Symbol 基本用法\"></a>Symbol 基本用法</h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a1 = <span class=\"title class_\">Symbol</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> a2 = <span class=\"title class_\">Symbol</span>(<span class=\"string\">&quot;i am a&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> a3 = <span class=\"title class_\">Symbol</span>(<span class=\"string\">&quot;i am a&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;a1&quot;</span>, a1);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;a2&quot;</span>, a2);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;a2&quot;</span>, a2.<span class=\"property\">description</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;a2 === a3&quot;</span>, a2 === a3);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a1 Symbol()</span><br><span class=\"line\">a2 Symbol(i am a)</span><br><span class=\"line\">a2 i am a</span><br><span class=\"line\">a2 === a3 false</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>从上可看到，<code>Symbol</code>是一个函数，它的返回值是一个<code>Symbol</code>类型的值，这个值是<strong>唯一</strong>的，即使传入相同的参数，也不会相等。</li>\n<li>入参的目的仅仅是为了描述它的来源。</li>\n<li><code>description</code>返回<code>Symbol</code>实例的描述。</li>\n</ul>\n<h2 id=\"让我使用它\"><a href=\"#让我使用它\" class=\"headerlink\" title=\"让我使用它\"></a>让我使用它</h2><p>假设如下代码：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">WOMAN</span> = <span class=\"string\">&quot;woman&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">MAN</span> = <span class=\"string\">&quot;man&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getSex</span>(<span class=\"params\">input</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (input === <span class=\"variable constant_\">WOMAN</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (input === <span class=\"variable constant_\">MAN</span>) <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">getSex</span>(<span class=\"variable constant_\">MAN</span>));</span><br></pre></td></tr></table></figure>\n\n<p>但代码足够复杂，或出于粗心，几个常量的值设置为一样的字符串，怕是难以发现。那么用 Symbol 可以方便的保证其唯一性。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">WOMAN</span> = <span class=\"title class_\">Symbol</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">MAN</span> = <span class=\"title class_\">Symbol</span>();</span><br><span class=\"line\"><span class=\"comment\">// ...more</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Symbol-的全局注册\"><a href=\"#Symbol-的全局注册\" class=\"headerlink\" title=\"Symbol 的全局注册\"></a>Symbol 的全局注册</h2><p>直接看代码：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn1</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title class_\">Symbol</span>(<span class=\"string\">&quot;a&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn2</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title class_\">Symbol</span>.<span class=\"title function_\">for</span>(<span class=\"string\">&quot;a&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;fn1&quot;</span>, <span class=\"title function_\">fn1</span>() === <span class=\"title function_\">fn1</span>());</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;fn2&quot;</span>, <span class=\"title function_\">fn2</span>() === <span class=\"title function_\">fn2</span>());</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn1 false</span><br><span class=\"line\">fn2 true</span><br></pre></td></tr></table></figure>\n\n<p>正如前面说的，<code>Symbol</code>函数的返回值肯定是不一样的，所以多次<code>fn1</code>的执行结果是不相等的。但是<code>Symbol.for</code>的执行结果是相等的，因为它是全局注册的。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>我在 5 年前看完<code>Symbol</code>，就将它抛之脑后，直到最近才重新研究，看看它是什么样的宝藏。</p>\n<p>先快速看下它是什么。</p>\n<h2 id=\"Symbol-基本用法\"><a href=\"#Symbol-基本用法\" class=\"headerlink\" title=\"Symbol 基本用法\"></a>Symbol 基本用法</h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a1 = <span class=\"title class_\">Symbol</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> a2 = <span class=\"title class_\">Symbol</span>(<span class=\"string\">&quot;i am a&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> a3 = <span class=\"title class_\">Symbol</span>(<span class=\"string\">&quot;i am a&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;a1&quot;</span>, a1);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;a2&quot;</span>, a2);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;a2&quot;</span>, a2.<span class=\"property\">description</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;a2 === a3&quot;</span>, a2 === a3);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a1 Symbol()</span><br><span class=\"line\">a2 Symbol(i am a)</span><br><span class=\"line\">a2 i am a</span><br><span class=\"line\">a2 === a3 false</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>从上可看到，<code>Symbol</code>是一个函数，它的返回值是一个<code>Symbol</code>类型的值，这个值是<strong>唯一</strong>的，即使传入相同的参数，也不会相等。</li>\n<li>入参的目的仅仅是为了描述它的来源。</li>\n<li><code>description</code>返回<code>Symbol</code>实例的描述。</li>\n</ul>\n<h2 id=\"让我使用它\"><a href=\"#让我使用它\" class=\"headerlink\" title=\"让我使用它\"></a>让我使用它</h2><p>假设如下代码：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">WOMAN</span> = <span class=\"string\">&quot;woman&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">MAN</span> = <span class=\"string\">&quot;man&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getSex</span>(<span class=\"params\">input</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (input === <span class=\"variable constant_\">WOMAN</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (input === <span class=\"variable constant_\">MAN</span>) <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">getSex</span>(<span class=\"variable constant_\">MAN</span>));</span><br></pre></td></tr></table></figure>\n\n<p>但代码足够复杂，或出于粗心，几个常量的值设置为一样的字符串，怕是难以发现。那么用 Symbol 可以方便的保证其唯一性。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">WOMAN</span> = <span class=\"title class_\">Symbol</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">MAN</span> = <span class=\"title class_\">Symbol</span>();</span><br><span class=\"line\"><span class=\"comment\">// ...more</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Symbol-的全局注册\"><a href=\"#Symbol-的全局注册\" class=\"headerlink\" title=\"Symbol 的全局注册\"></a>Symbol 的全局注册</h2><p>直接看代码：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn1</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title class_\">Symbol</span>(<span class=\"string\">&quot;a&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn2</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title class_\">Symbol</span>.<span class=\"title function_\">for</span>(<span class=\"string\">&quot;a&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;fn1&quot;</span>, <span class=\"title function_\">fn1</span>() === <span class=\"title function_\">fn1</span>());</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;fn2&quot;</span>, <span class=\"title function_\">fn2</span>() === <span class=\"title function_\">fn2</span>());</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn1 false</span><br><span class=\"line\">fn2 true</span><br></pre></td></tr></table></figure>\n\n<p>正如前面说的，<code>Symbol</code>函数的返回值肯定是不一样的，所以多次<code>fn1</code>的执行结果是不相等的。但是<code>Symbol.for</code>的执行结果是相等的，因为它是全局注册的。</p>\n"},{"title":"useDeferredValue在性能优化中的使用","url":"React/useDeferredValue","date":"2022-08-31T16:00:00.000Z","_content":"\n## 一个卡顿场景\n\n已知浏览器在一帧时间里（默认 16.6 毫秒）要完成好多工作，其中最耗时的是 js 脚本执行和页面渲染。如果 js 脚本耗时太长，那要引起页面渲染掉帧，在用户的体验上就是卡顿。\n\n这里有一个处理用户输入的搜索词语，将结果渲染到一个 dom 列表上的场景：\n\n```tsx\nimport { FC, useMemo, useState } from \"react\";\n\nconst SearchResults: FC<{ query: string }> = ({ query }) => {\n  const datas = useMemo(() => {\n    return new Array(10000).fill(null).map(() => {\n      return `${query} ${Math.random()}`;\n    });\n  }, [query]);\n\n  if (!query) {\n    return null;\n  }\n\n  return (\n    <div>\n      <h2>search \"{query}\" list:</h2>\n      {datas.map((v, k) => {\n        return <p key={k}>{v}</p>;\n      })}\n    </div>\n  );\n};\n\nexport const Main: FC = () => {\n  const [query, setQuery] = useState(\"\");\n\n  return (\n    <>\n      Search:\n      <input\n        value={query}\n        onChange={(e) => {\n          setQuery(e.target.value);\n        }}\n      />\n      <SearchResults query={query} />\n    </>\n  );\n};\n```\n\n当用户每次输入一个字符，就会触发`SearchResults`组件的重新渲染，这个渲染包括`datas`的重新计算，和 dom 结构的重新渲染，这个时间远远超过 16 毫秒，会导致下一个输入值的处理任务一直在等待中，造成卡顿。\n\n## useDeferredValue\n\nReact 提供了`时间切片`的模式，这里不详细展开了，允许你在调度任务的过程中安排高优先级的任务，而`useDeferredValue`就是这个模式的一个 hook，它可以**延迟更新部分 UI**\n\n在之前的代码中，我们稍作修改：\n\n```tsx\n//...\n\nconst [query, setQuery] = useState(\"\");\nconst defreredQuery = useDeferredValue(query);\n\n//...\n<SearchResults query={defreredQuery} />;\n```\n\n当用户**快速**输入一个字符时，`SearchResults`组件的渲染就会被延迟，这样就尽量减少卡顿了。\n\n`useDeferredValue`通过延迟状态的更新来实现这个目的，它不同于节流或防抖的固定时间控制，而是根据一系列复杂调度算法来决定延迟的时间，这样可以尽量减少卡顿的发生。\n","source":"_posts/React/useDeferredValue在性能优化中的使用.md","raw":"---\ntitle: useDeferredValue在性能优化中的使用\nurl: React/useDeferredValue\ndate: 2022-09-01\ntags:\n  - react\ncategories:\n  - [React]\n---\n\n## 一个卡顿场景\n\n已知浏览器在一帧时间里（默认 16.6 毫秒）要完成好多工作，其中最耗时的是 js 脚本执行和页面渲染。如果 js 脚本耗时太长，那要引起页面渲染掉帧，在用户的体验上就是卡顿。\n\n这里有一个处理用户输入的搜索词语，将结果渲染到一个 dom 列表上的场景：\n\n```tsx\nimport { FC, useMemo, useState } from \"react\";\n\nconst SearchResults: FC<{ query: string }> = ({ query }) => {\n  const datas = useMemo(() => {\n    return new Array(10000).fill(null).map(() => {\n      return `${query} ${Math.random()}`;\n    });\n  }, [query]);\n\n  if (!query) {\n    return null;\n  }\n\n  return (\n    <div>\n      <h2>search \"{query}\" list:</h2>\n      {datas.map((v, k) => {\n        return <p key={k}>{v}</p>;\n      })}\n    </div>\n  );\n};\n\nexport const Main: FC = () => {\n  const [query, setQuery] = useState(\"\");\n\n  return (\n    <>\n      Search:\n      <input\n        value={query}\n        onChange={(e) => {\n          setQuery(e.target.value);\n        }}\n      />\n      <SearchResults query={query} />\n    </>\n  );\n};\n```\n\n当用户每次输入一个字符，就会触发`SearchResults`组件的重新渲染，这个渲染包括`datas`的重新计算，和 dom 结构的重新渲染，这个时间远远超过 16 毫秒，会导致下一个输入值的处理任务一直在等待中，造成卡顿。\n\n## useDeferredValue\n\nReact 提供了`时间切片`的模式，这里不详细展开了，允许你在调度任务的过程中安排高优先级的任务，而`useDeferredValue`就是这个模式的一个 hook，它可以**延迟更新部分 UI**\n\n在之前的代码中，我们稍作修改：\n\n```tsx\n//...\n\nconst [query, setQuery] = useState(\"\");\nconst defreredQuery = useDeferredValue(query);\n\n//...\n<SearchResults query={defreredQuery} />;\n```\n\n当用户**快速**输入一个字符时，`SearchResults`组件的渲染就会被延迟，这样就尽量减少卡顿了。\n\n`useDeferredValue`通过延迟状态的更新来实现这个目的，它不同于节流或防抖的固定时间控制，而是根据一系列复杂调度算法来决定延迟的时间，这样可以尽量减少卡顿的发生。\n","slug":"React/useDeferredValue在性能优化中的使用","published":1,"updated":"2023-07-05T07:43:58.615Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cljpf1ku0000mmtrr1brv5qqs","content":"<h2 id=\"一个卡顿场景\"><a href=\"#一个卡顿场景\" class=\"headerlink\" title=\"一个卡顿场景\"></a>一个卡顿场景</h2><p>已知浏览器在一帧时间里（默认 16.6 毫秒）要完成好多工作，其中最耗时的是 js 脚本执行和页面渲染。如果 js 脚本耗时太长，那要引起页面渲染掉帧，在用户的体验上就是卡顿。</p>\n<p>这里有一个处理用户输入的搜索词语，将结果渲染到一个 dom 列表上的场景：</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"variable constant_\">FC</span>, useMemo, useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">SearchResults</span>: <span class=\"variable constant_\">FC</span>&lt;&#123; <span class=\"attr\">query</span>: <span class=\"built_in\">string</span> &#125;&gt; = <span class=\"function\">(<span class=\"params\">&#123; query &#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> datas = <span class=\"title function_\">useMemo</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(<span class=\"number\">10000</span>).<span class=\"title function_\">fill</span>(<span class=\"literal\">null</span>).<span class=\"title function_\">map</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;query&#125;</span> <span class=\"subst\">$&#123;<span class=\"built_in\">Math</span>.random()&#125;</span>`</span>;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;, [query]);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!query) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>search &quot;&#123;query&#125;&quot; list:<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      &#123;datas.map((v, k) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">        return <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;k&#125;</span>&gt;</span>&#123;v&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span>;</span></span><br><span class=\"line\"><span class=\"language-xml\">      &#125;)&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">Main</span>: <span class=\"variable constant_\">FC</span> = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [query, setQuery] = <span class=\"title function_\">useState</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      Search:</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">input</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">value</span>=<span class=\"string\">&#123;query&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;(e)</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">          setQuery(e.target.value);</span></span><br><span class=\"line\"><span class=\"language-xml\">        &#125;&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      /&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">SearchResults</span> <span class=\"attr\">query</span>=<span class=\"string\">&#123;query&#125;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>当用户每次输入一个字符，就会触发<code>SearchResults</code>组件的重新渲染，这个渲染包括<code>datas</code>的重新计算，和 dom 结构的重新渲染，这个时间远远超过 16 毫秒，会导致下一个输入值的处理任务一直在等待中，造成卡顿。</p>\n<h2 id=\"useDeferredValue\"><a href=\"#useDeferredValue\" class=\"headerlink\" title=\"useDeferredValue\"></a>useDeferredValue</h2><p>React 提供了<code>时间切片</code>的模式，这里不详细展开了，允许你在调度任务的过程中安排高优先级的任务，而<code>useDeferredValue</code>就是这个模式的一个 hook，它可以<strong>延迟更新部分 UI</strong></p>\n<p>在之前的代码中，我们稍作修改：</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> [query, setQuery] = <span class=\"title function_\">useState</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> defreredQuery = <span class=\"title function_\">useDeferredValue</span>(query);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//...</span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">SearchResults</span> <span class=\"attr\">query</span>=<span class=\"string\">&#123;defreredQuery&#125;</span> /&gt;</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>当用户<strong>快速</strong>输入一个字符时，<code>SearchResults</code>组件的渲染就会被延迟，这样就尽量减少卡顿了。</p>\n<p><code>useDeferredValue</code>通过延迟状态的更新来实现这个目的，它不同于节流或防抖的固定时间控制，而是根据一系列复杂调度算法来决定延迟的时间，这样可以尽量减少卡顿的发生。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一个卡顿场景\"><a href=\"#一个卡顿场景\" class=\"headerlink\" title=\"一个卡顿场景\"></a>一个卡顿场景</h2><p>已知浏览器在一帧时间里（默认 16.6 毫秒）要完成好多工作，其中最耗时的是 js 脚本执行和页面渲染。如果 js 脚本耗时太长，那要引起页面渲染掉帧，在用户的体验上就是卡顿。</p>\n<p>这里有一个处理用户输入的搜索词语，将结果渲染到一个 dom 列表上的场景：</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"variable constant_\">FC</span>, useMemo, useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">SearchResults</span>: <span class=\"variable constant_\">FC</span>&lt;&#123; <span class=\"attr\">query</span>: <span class=\"built_in\">string</span> &#125;&gt; = <span class=\"function\">(<span class=\"params\">&#123; query &#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> datas = <span class=\"title function_\">useMemo</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(<span class=\"number\">10000</span>).<span class=\"title function_\">fill</span>(<span class=\"literal\">null</span>).<span class=\"title function_\">map</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;query&#125;</span> <span class=\"subst\">$&#123;<span class=\"built_in\">Math</span>.random()&#125;</span>`</span>;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;, [query]);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!query) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>search &quot;&#123;query&#125;&quot; list:<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      &#123;datas.map((v, k) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">        return <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;k&#125;</span>&gt;</span>&#123;v&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span>;</span></span><br><span class=\"line\"><span class=\"language-xml\">      &#125;)&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">Main</span>: <span class=\"variable constant_\">FC</span> = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [query, setQuery] = <span class=\"title function_\">useState</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      Search:</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">input</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">value</span>=<span class=\"string\">&#123;query&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;(e)</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">          setQuery(e.target.value);</span></span><br><span class=\"line\"><span class=\"language-xml\">        &#125;&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      /&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">SearchResults</span> <span class=\"attr\">query</span>=<span class=\"string\">&#123;query&#125;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>当用户每次输入一个字符，就会触发<code>SearchResults</code>组件的重新渲染，这个渲染包括<code>datas</code>的重新计算，和 dom 结构的重新渲染，这个时间远远超过 16 毫秒，会导致下一个输入值的处理任务一直在等待中，造成卡顿。</p>\n<h2 id=\"useDeferredValue\"><a href=\"#useDeferredValue\" class=\"headerlink\" title=\"useDeferredValue\"></a>useDeferredValue</h2><p>React 提供了<code>时间切片</code>的模式，这里不详细展开了，允许你在调度任务的过程中安排高优先级的任务，而<code>useDeferredValue</code>就是这个模式的一个 hook，它可以<strong>延迟更新部分 UI</strong></p>\n<p>在之前的代码中，我们稍作修改：</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> [query, setQuery] = <span class=\"title function_\">useState</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> defreredQuery = <span class=\"title function_\">useDeferredValue</span>(query);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//...</span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">SearchResults</span> <span class=\"attr\">query</span>=<span class=\"string\">&#123;defreredQuery&#125;</span> /&gt;</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>当用户<strong>快速</strong>输入一个字符时，<code>SearchResults</code>组件的渲染就会被延迟，这样就尽量减少卡顿了。</p>\n<p><code>useDeferredValue</code>通过延迟状态的更新来实现这个目的，它不同于节流或防抖的固定时间控制，而是根据一系列复杂调度算法来决定延迟的时间，这样可以尽量减少卡顿的发生。</p>\n"},{"title":"useTransition在性能优化中的使用","url":"React/useTransition","date":"2022-09-04T16:00:00.000Z","_content":"\n`useTransition` is a React Hook that lets you update the state without blocking the UI.\n\n文档中简单一句话说明`useTransition`的用途：不阻塞 UI 的情况下更新**状态**。\n\n## 解决什么问题？\n\n正常代码下，JavaScript 是单线程的，所以执行一段耗时的代码，会阻塞 UI 的渲染，导致页面卡顿。React 提供了**时间切片**的功能来尽量确保一帧中有充足的时间来渲染 UI，而`useTransition`就是在这个基础上，可以在不阻塞 UI 的情况下使用时间分片特性**更新状态**。\n\n## 一个例子\n\n先看下卡顿是如何形成的，一个简单的代码，每 500ms，更新`name`状态。另外点击按钮的时候，更新一系列状态并渲染到 dom 中。\n\n```tsx\nconst getDatas = () => {\n  const datas = [];\n  for (let i = 1; i <= 2000; i += 1) {\n    const s = Math.random() * Math.random();\n    datas.push(s);\n  }\n  return datas;\n};\n\nconst Main: FC = () => {\n  const [name, setName] = useState(\"world\");\n\n  const [datas1, setDatas1] = useState<number[]>([]);\n  const [datas2, setDatas2] = useState<number[]>([]);\n  const [datas3, setDatas3] = useState<number[]>([]);\n  const [datas4, setDatas4] = useState<number[]>([]);\n  const [datas5, setDatas5] = useState<number[]>([]);\n  const [datas6, setDatas6] = useState<number[]>([]);\n  const [datas7, setDatas7] = useState<number[]>([]);\n  const [datas8, setDatas8] = useState<number[]>([]);\n\n  const onClick1 = useCallback(() => {\n    setDatas1(getDatas());\n    setDatas2(getDatas());\n    setDatas3(getDatas());\n    setDatas4(getDatas());\n    setDatas5(getDatas());\n    setDatas6(getDatas());\n    setDatas7(getDatas());\n    setDatas8(getDatas());\n  }, []);\n\n  useEffect(() => {\n    window.setInterval(() => {\n      setName(`world ${Math.random()}`);\n    }, 500);\n  }, []);\n\n  return (\n    <div>\n      hello {name}\n      <br />\n      <button onClick={onClick1}>click me</button>\n      <br />\n      <div>\n        {datas1.map((v) => {\n          return <div key={v}>{v}</div>;\n        })}\n      </div>\n      <div>\n        {datas2.map((v) => {\n          return <div key={v}>{v}</div>;\n        })}\n      </div>\n      <div>\n        {datas3.map((v) => {\n          return <div key={v}>{v}</div>;\n        })}\n      </div>\n      <div>\n        {datas4.map((v) => {\n          return <div key={v}>{v}</div>;\n        })}\n      </div>\n      <div>\n        {datas5.map((v) => {\n          return <div key={v}>{v}</div>;\n        })}\n      </div>\n      <div>\n        {datas6.map((v) => {\n          return <div key={v}>{v}</div>;\n        })}\n      </div>\n      <div>\n        {datas7.map((v) => {\n          return <div key={v}>{v}</div>;\n        })}\n      </div>\n      <div>\n        {datas8.map((v) => {\n          return <div key={v}>{v}</div>;\n        })}\n      </div>\n    </div>\n  );\n};\n```\n\n**首先不点击按钮，观察 5 秒，没有卡顿现象，性能表现如图：**\n\n![](https://cdn.jsdelivr.net/gh/taoliujun/taoliujun.github.io/assets/202307041609217.png)\n\n可以看到有几个微微凸起的黄色点，对应着每次的`hello`状态更新和渲染，它们的执行时间都在 1ms，没有超过一帧的时间。\n\n![](https://cdn.jsdelivr.net/gh/taoliujun/taoliujun.github.io/assets/202307041610767.png)\n\n选取其中一个黄色的点，查看它的详情。React 的调度器、协调器、渲染器创建了对应的任务，分步执行了任务，具体可阅读 React 架构的相关文章。\n\n**然后连续点几次按钮，`hello`的渲染出现明显的卡顿，性能表现如图：**\n\n![](https://cdn.jsdelivr.net/gh/taoliujun/taoliujun.github.io/assets/202307041608992.png)\n\n在性能图中截取的一段时间中，黄色是脚本执行时间，灰色是 UI 渲染时间，白色是空闲时间（我停止点击了一会儿），在每帧里，要跑完所有的状态变更和 UI 渲染，`datas`系列的状态变更和渲染占据了大量的时间，基本是阻塞了`hello`的状态变更和渲染。\n\n**只点击一次，性能表现如图：**\n\n![](https://cdn.jsdelivr.net/gh/taoliujun/taoliujun.github.io/assets/202307041625903.png)\n\n可以看到几个 Task，第一个 Task 就是在更新`datas`系列状态和渲染，它占据了太多帧的时间，导致`hello`的状态变更和渲染被推迟到后面的帧。\n\n## 优化它\n\n前面说到，React 的架构中实现了**时间切片**，它允许开发者将*不重要*的变更推迟到后面的帧，这样就可以尽量保证优先执行默认任务。使用`useTransition`改下代码：\n\n```tsx\nconst [pending, startTransition] = useTransition();\n\nconst onClick1 = useCallback(() => {\n  startTransition(() => {\n    setDatas1(getDatas());\n    setDatas2(getDatas());\n    setDatas3(getDatas());\n    setDatas4(getDatas());\n    setDatas5(getDatas());\n    setDatas6(getDatas());\n    setDatas7(getDatas());\n    setDatas8(getDatas());\n  });\n}, []);\n```\n\n**再次连续点击按钮，卡顿现象明显减轻很多，性能表现如下：**\n\n![](https://cdn.jsdelivr.net/gh/taoliujun/taoliujun.github.io/assets/202307041629743.png)\n\n一看起来，执行时间还是很长，那么为什么`hello`渲染看起来不卡顿呢？\n\n**只点一次，看看性能表现：**\n\n![](https://cdn.jsdelivr.net/gh/taoliujun/taoliujun.github.io/assets/202307041631650.png)\n\n查看几个 Task 的详情，发现`datas`系列状态的更新，被分配在了多个 Task 中，中间还穿插了`hello`的状态更新的任务。这也印证了`useTransition`的实现背景：将不重要的任务通过时间切片架构，分配到多帧中，优先执行其他任务，从而实现不卡顿的目的。\n\n## 注意事项\n\n- `useTransition`是个 hook，它的返回值还包括了一个 pending 状态，用来表示是否处于时间切片的过程中，可以用来优化 UI，比如显示一个 loading。\n\n- 你也可以使用`startTransition`这个 util 函数代替 hook 的使用。\n\n- 时间切片架构是调度状态变化的，所以`startTransition`的入参函数里，将状态更新标记为可切片，普通的代码段不会被标记。所以简单的说，你还是得将一个状态变更的执行时间控制在 5ms 内。\n","source":"_posts/React/useTransition在性能优化中的使用.md","raw":"---\ntitle: useTransition在性能优化中的使用\nurl: React/useTransition\ndate: 2022-09-05\ntags:\n  - react\ncategories:\n  - [React]\n---\n\n`useTransition` is a React Hook that lets you update the state without blocking the UI.\n\n文档中简单一句话说明`useTransition`的用途：不阻塞 UI 的情况下更新**状态**。\n\n## 解决什么问题？\n\n正常代码下，JavaScript 是单线程的，所以执行一段耗时的代码，会阻塞 UI 的渲染，导致页面卡顿。React 提供了**时间切片**的功能来尽量确保一帧中有充足的时间来渲染 UI，而`useTransition`就是在这个基础上，可以在不阻塞 UI 的情况下使用时间分片特性**更新状态**。\n\n## 一个例子\n\n先看下卡顿是如何形成的，一个简单的代码，每 500ms，更新`name`状态。另外点击按钮的时候，更新一系列状态并渲染到 dom 中。\n\n```tsx\nconst getDatas = () => {\n  const datas = [];\n  for (let i = 1; i <= 2000; i += 1) {\n    const s = Math.random() * Math.random();\n    datas.push(s);\n  }\n  return datas;\n};\n\nconst Main: FC = () => {\n  const [name, setName] = useState(\"world\");\n\n  const [datas1, setDatas1] = useState<number[]>([]);\n  const [datas2, setDatas2] = useState<number[]>([]);\n  const [datas3, setDatas3] = useState<number[]>([]);\n  const [datas4, setDatas4] = useState<number[]>([]);\n  const [datas5, setDatas5] = useState<number[]>([]);\n  const [datas6, setDatas6] = useState<number[]>([]);\n  const [datas7, setDatas7] = useState<number[]>([]);\n  const [datas8, setDatas8] = useState<number[]>([]);\n\n  const onClick1 = useCallback(() => {\n    setDatas1(getDatas());\n    setDatas2(getDatas());\n    setDatas3(getDatas());\n    setDatas4(getDatas());\n    setDatas5(getDatas());\n    setDatas6(getDatas());\n    setDatas7(getDatas());\n    setDatas8(getDatas());\n  }, []);\n\n  useEffect(() => {\n    window.setInterval(() => {\n      setName(`world ${Math.random()}`);\n    }, 500);\n  }, []);\n\n  return (\n    <div>\n      hello {name}\n      <br />\n      <button onClick={onClick1}>click me</button>\n      <br />\n      <div>\n        {datas1.map((v) => {\n          return <div key={v}>{v}</div>;\n        })}\n      </div>\n      <div>\n        {datas2.map((v) => {\n          return <div key={v}>{v}</div>;\n        })}\n      </div>\n      <div>\n        {datas3.map((v) => {\n          return <div key={v}>{v}</div>;\n        })}\n      </div>\n      <div>\n        {datas4.map((v) => {\n          return <div key={v}>{v}</div>;\n        })}\n      </div>\n      <div>\n        {datas5.map((v) => {\n          return <div key={v}>{v}</div>;\n        })}\n      </div>\n      <div>\n        {datas6.map((v) => {\n          return <div key={v}>{v}</div>;\n        })}\n      </div>\n      <div>\n        {datas7.map((v) => {\n          return <div key={v}>{v}</div>;\n        })}\n      </div>\n      <div>\n        {datas8.map((v) => {\n          return <div key={v}>{v}</div>;\n        })}\n      </div>\n    </div>\n  );\n};\n```\n\n**首先不点击按钮，观察 5 秒，没有卡顿现象，性能表现如图：**\n\n![](https://cdn.jsdelivr.net/gh/taoliujun/taoliujun.github.io/assets/202307041609217.png)\n\n可以看到有几个微微凸起的黄色点，对应着每次的`hello`状态更新和渲染，它们的执行时间都在 1ms，没有超过一帧的时间。\n\n![](https://cdn.jsdelivr.net/gh/taoliujun/taoliujun.github.io/assets/202307041610767.png)\n\n选取其中一个黄色的点，查看它的详情。React 的调度器、协调器、渲染器创建了对应的任务，分步执行了任务，具体可阅读 React 架构的相关文章。\n\n**然后连续点几次按钮，`hello`的渲染出现明显的卡顿，性能表现如图：**\n\n![](https://cdn.jsdelivr.net/gh/taoliujun/taoliujun.github.io/assets/202307041608992.png)\n\n在性能图中截取的一段时间中，黄色是脚本执行时间，灰色是 UI 渲染时间，白色是空闲时间（我停止点击了一会儿），在每帧里，要跑完所有的状态变更和 UI 渲染，`datas`系列的状态变更和渲染占据了大量的时间，基本是阻塞了`hello`的状态变更和渲染。\n\n**只点击一次，性能表现如图：**\n\n![](https://cdn.jsdelivr.net/gh/taoliujun/taoliujun.github.io/assets/202307041625903.png)\n\n可以看到几个 Task，第一个 Task 就是在更新`datas`系列状态和渲染，它占据了太多帧的时间，导致`hello`的状态变更和渲染被推迟到后面的帧。\n\n## 优化它\n\n前面说到，React 的架构中实现了**时间切片**，它允许开发者将*不重要*的变更推迟到后面的帧，这样就可以尽量保证优先执行默认任务。使用`useTransition`改下代码：\n\n```tsx\nconst [pending, startTransition] = useTransition();\n\nconst onClick1 = useCallback(() => {\n  startTransition(() => {\n    setDatas1(getDatas());\n    setDatas2(getDatas());\n    setDatas3(getDatas());\n    setDatas4(getDatas());\n    setDatas5(getDatas());\n    setDatas6(getDatas());\n    setDatas7(getDatas());\n    setDatas8(getDatas());\n  });\n}, []);\n```\n\n**再次连续点击按钮，卡顿现象明显减轻很多，性能表现如下：**\n\n![](https://cdn.jsdelivr.net/gh/taoliujun/taoliujun.github.io/assets/202307041629743.png)\n\n一看起来，执行时间还是很长，那么为什么`hello`渲染看起来不卡顿呢？\n\n**只点一次，看看性能表现：**\n\n![](https://cdn.jsdelivr.net/gh/taoliujun/taoliujun.github.io/assets/202307041631650.png)\n\n查看几个 Task 的详情，发现`datas`系列状态的更新，被分配在了多个 Task 中，中间还穿插了`hello`的状态更新的任务。这也印证了`useTransition`的实现背景：将不重要的任务通过时间切片架构，分配到多帧中，优先执行其他任务，从而实现不卡顿的目的。\n\n## 注意事项\n\n- `useTransition`是个 hook，它的返回值还包括了一个 pending 状态，用来表示是否处于时间切片的过程中，可以用来优化 UI，比如显示一个 loading。\n\n- 你也可以使用`startTransition`这个 util 函数代替 hook 的使用。\n\n- 时间切片架构是调度状态变化的，所以`startTransition`的入参函数里，将状态更新标记为可切片，普通的代码段不会被标记。所以简单的说，你还是得将一个状态变更的执行时间控制在 5ms 内。\n","slug":"React/useTransition在性能优化中的使用","published":1,"updated":"2023-07-05T07:42:04.550Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cljpf1ku1000omtrrah87dqcx","content":"<p><code>useTransition</code> is a React Hook that lets you update the state without blocking the UI.</p>\n<p>文档中简单一句话说明<code>useTransition</code>的用途：不阻塞 UI 的情况下更新<strong>状态</strong>。</p>\n<h2 id=\"解决什么问题？\"><a href=\"#解决什么问题？\" class=\"headerlink\" title=\"解决什么问题？\"></a>解决什么问题？</h2><p>正常代码下，JavaScript 是单线程的，所以执行一段耗时的代码，会阻塞 UI 的渲染，导致页面卡顿。React 提供了<strong>时间切片</strong>的功能来尽量确保一帧中有充足的时间来渲染 UI，而<code>useTransition</code>就是在这个基础上，可以在不阻塞 UI 的情况下使用时间分片特性<strong>更新状态</strong>。</p>\n<h2 id=\"一个例子\"><a href=\"#一个例子\" class=\"headerlink\" title=\"一个例子\"></a>一个例子</h2><p>先看下卡顿是如何形成的，一个简单的代码，每 500ms，更新<code>name</code>状态。另外点击按钮的时候，更新一系列状态并渲染到 dom 中。</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">getDatas</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> datas = [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">2000</span>; i += <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> s = <span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() * <span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>();</span><br><span class=\"line\">    datas.<span class=\"title function_\">push</span>(s);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> datas;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Main</span>: <span class=\"variable constant_\">FC</span> = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [name, setName] = <span class=\"title function_\">useState</span>(<span class=\"string\">&quot;world&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> [datas1, setDatas1] = useState&lt;<span class=\"built_in\">number</span>[]&gt;([]);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [datas2, setDatas2] = useState&lt;<span class=\"built_in\">number</span>[]&gt;([]);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [datas3, setDatas3] = useState&lt;<span class=\"built_in\">number</span>[]&gt;([]);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [datas4, setDatas4] = useState&lt;<span class=\"built_in\">number</span>[]&gt;([]);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [datas5, setDatas5] = useState&lt;<span class=\"built_in\">number</span>[]&gt;([]);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [datas6, setDatas6] = useState&lt;<span class=\"built_in\">number</span>[]&gt;([]);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [datas7, setDatas7] = useState&lt;<span class=\"built_in\">number</span>[]&gt;([]);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [datas8, setDatas8] = useState&lt;<span class=\"built_in\">number</span>[]&gt;([]);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> onClick1 = <span class=\"title function_\">useCallback</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">setDatas1</span>(<span class=\"title function_\">getDatas</span>());</span><br><span class=\"line\">    <span class=\"title function_\">setDatas2</span>(<span class=\"title function_\">getDatas</span>());</span><br><span class=\"line\">    <span class=\"title function_\">setDatas3</span>(<span class=\"title function_\">getDatas</span>());</span><br><span class=\"line\">    <span class=\"title function_\">setDatas4</span>(<span class=\"title function_\">getDatas</span>());</span><br><span class=\"line\">    <span class=\"title function_\">setDatas5</span>(<span class=\"title function_\">getDatas</span>());</span><br><span class=\"line\">    <span class=\"title function_\">setDatas6</span>(<span class=\"title function_\">getDatas</span>());</span><br><span class=\"line\">    <span class=\"title function_\">setDatas7</span>(<span class=\"title function_\">getDatas</span>());</span><br><span class=\"line\">    <span class=\"title function_\">setDatas8</span>(<span class=\"title function_\">getDatas</span>());</span><br><span class=\"line\">  &#125;, []);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">window</span>.<span class=\"built_in\">setInterval</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">setName</span>(<span class=\"string\">`world <span class=\"subst\">$&#123;<span class=\"built_in\">Math</span>.random()&#125;</span>`</span>);</span><br><span class=\"line\">    &#125;, <span class=\"number\">500</span>);</span><br><span class=\"line\">  &#125;, []);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      hello &#123;name&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;onClick1&#125;</span>&gt;</span>click me<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        &#123;datas1.map((v) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">          return <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;v&#125;</span>&gt;</span>&#123;v&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>;</span></span><br><span class=\"line\"><span class=\"language-xml\">        &#125;)&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        &#123;datas2.map((v) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">          return <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;v&#125;</span>&gt;</span>&#123;v&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>;</span></span><br><span class=\"line\"><span class=\"language-xml\">        &#125;)&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        &#123;datas3.map((v) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">          return <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;v&#125;</span>&gt;</span>&#123;v&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>;</span></span><br><span class=\"line\"><span class=\"language-xml\">        &#125;)&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        &#123;datas4.map((v) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">          return <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;v&#125;</span>&gt;</span>&#123;v&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>;</span></span><br><span class=\"line\"><span class=\"language-xml\">        &#125;)&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        &#123;datas5.map((v) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">          return <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;v&#125;</span>&gt;</span>&#123;v&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>;</span></span><br><span class=\"line\"><span class=\"language-xml\">        &#125;)&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        &#123;datas6.map((v) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">          return <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;v&#125;</span>&gt;</span>&#123;v&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>;</span></span><br><span class=\"line\"><span class=\"language-xml\">        &#125;)&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        &#123;datas7.map((v) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">          return <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;v&#125;</span>&gt;</span>&#123;v&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>;</span></span><br><span class=\"line\"><span class=\"language-xml\">        &#125;)&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        &#123;datas8.map((v) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">          return <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;v&#125;</span>&gt;</span>&#123;v&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>;</span></span><br><span class=\"line\"><span class=\"language-xml\">        &#125;)&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>首先不点击按钮，观察 5 秒，没有卡顿现象，性能表现如图：</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/taoliujun/taoliujun.github.io/assets/202307041609217.png\"></p>\n<p>可以看到有几个微微凸起的黄色点，对应着每次的<code>hello</code>状态更新和渲染，它们的执行时间都在 1ms，没有超过一帧的时间。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/taoliujun/taoliujun.github.io/assets/202307041610767.png\"></p>\n<p>选取其中一个黄色的点，查看它的详情。React 的调度器、协调器、渲染器创建了对应的任务，分步执行了任务，具体可阅读 React 架构的相关文章。</p>\n<p><strong>然后连续点几次按钮，<code>hello</code>的渲染出现明显的卡顿，性能表现如图：</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/taoliujun/taoliujun.github.io/assets/202307041608992.png\"></p>\n<p>在性能图中截取的一段时间中，黄色是脚本执行时间，灰色是 UI 渲染时间，白色是空闲时间（我停止点击了一会儿），在每帧里，要跑完所有的状态变更和 UI 渲染，<code>datas</code>系列的状态变更和渲染占据了大量的时间，基本是阻塞了<code>hello</code>的状态变更和渲染。</p>\n<p><strong>只点击一次，性能表现如图：</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/taoliujun/taoliujun.github.io/assets/202307041625903.png\"></p>\n<p>可以看到几个 Task，第一个 Task 就是在更新<code>datas</code>系列状态和渲染，它占据了太多帧的时间，导致<code>hello</code>的状态变更和渲染被推迟到后面的帧。</p>\n<h2 id=\"优化它\"><a href=\"#优化它\" class=\"headerlink\" title=\"优化它\"></a>优化它</h2><p>前面说到，React 的架构中实现了<strong>时间切片</strong>，它允许开发者将<em>不重要</em>的变更推迟到后面的帧，这样就可以尽量保证优先执行默认任务。使用<code>useTransition</code>改下代码：</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [pending, startTransition] = <span class=\"title function_\">useTransition</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> onClick1 = <span class=\"title function_\">useCallback</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">startTransition</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">setDatas1</span>(<span class=\"title function_\">getDatas</span>());</span><br><span class=\"line\">    <span class=\"title function_\">setDatas2</span>(<span class=\"title function_\">getDatas</span>());</span><br><span class=\"line\">    <span class=\"title function_\">setDatas3</span>(<span class=\"title function_\">getDatas</span>());</span><br><span class=\"line\">    <span class=\"title function_\">setDatas4</span>(<span class=\"title function_\">getDatas</span>());</span><br><span class=\"line\">    <span class=\"title function_\">setDatas5</span>(<span class=\"title function_\">getDatas</span>());</span><br><span class=\"line\">    <span class=\"title function_\">setDatas6</span>(<span class=\"title function_\">getDatas</span>());</span><br><span class=\"line\">    <span class=\"title function_\">setDatas7</span>(<span class=\"title function_\">getDatas</span>());</span><br><span class=\"line\">    <span class=\"title function_\">setDatas8</span>(<span class=\"title function_\">getDatas</span>());</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;, []);</span><br></pre></td></tr></table></figure>\n\n<p><strong>再次连续点击按钮，卡顿现象明显减轻很多，性能表现如下：</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/taoliujun/taoliujun.github.io/assets/202307041629743.png\"></p>\n<p>一看起来，执行时间还是很长，那么为什么<code>hello</code>渲染看起来不卡顿呢？</p>\n<p><strong>只点一次，看看性能表现：</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/taoliujun/taoliujun.github.io/assets/202307041631650.png\"></p>\n<p>查看几个 Task 的详情，发现<code>datas</code>系列状态的更新，被分配在了多个 Task 中，中间还穿插了<code>hello</code>的状态更新的任务。这也印证了<code>useTransition</code>的实现背景：将不重要的任务通过时间切片架构，分配到多帧中，优先执行其他任务，从而实现不卡顿的目的。</p>\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><ul>\n<li><p><code>useTransition</code>是个 hook，它的返回值还包括了一个 pending 状态，用来表示是否处于时间切片的过程中，可以用来优化 UI，比如显示一个 loading。</p>\n</li>\n<li><p>你也可以使用<code>startTransition</code>这个 util 函数代替 hook 的使用。</p>\n</li>\n<li><p>时间切片架构是调度状态变化的，所以<code>startTransition</code>的入参函数里，将状态更新标记为可切片，普通的代码段不会被标记。所以简单的说，你还是得将一个状态变更的执行时间控制在 5ms 内。</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><code>useTransition</code> is a React Hook that lets you update the state without blocking the UI.</p>\n<p>文档中简单一句话说明<code>useTransition</code>的用途：不阻塞 UI 的情况下更新<strong>状态</strong>。</p>\n<h2 id=\"解决什么问题？\"><a href=\"#解决什么问题？\" class=\"headerlink\" title=\"解决什么问题？\"></a>解决什么问题？</h2><p>正常代码下，JavaScript 是单线程的，所以执行一段耗时的代码，会阻塞 UI 的渲染，导致页面卡顿。React 提供了<strong>时间切片</strong>的功能来尽量确保一帧中有充足的时间来渲染 UI，而<code>useTransition</code>就是在这个基础上，可以在不阻塞 UI 的情况下使用时间分片特性<strong>更新状态</strong>。</p>\n<h2 id=\"一个例子\"><a href=\"#一个例子\" class=\"headerlink\" title=\"一个例子\"></a>一个例子</h2><p>先看下卡顿是如何形成的，一个简单的代码，每 500ms，更新<code>name</code>状态。另外点击按钮的时候，更新一系列状态并渲染到 dom 中。</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">getDatas</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> datas = [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">2000</span>; i += <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> s = <span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() * <span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>();</span><br><span class=\"line\">    datas.<span class=\"title function_\">push</span>(s);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> datas;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Main</span>: <span class=\"variable constant_\">FC</span> = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [name, setName] = <span class=\"title function_\">useState</span>(<span class=\"string\">&quot;world&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> [datas1, setDatas1] = useState&lt;<span class=\"built_in\">number</span>[]&gt;([]);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [datas2, setDatas2] = useState&lt;<span class=\"built_in\">number</span>[]&gt;([]);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [datas3, setDatas3] = useState&lt;<span class=\"built_in\">number</span>[]&gt;([]);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [datas4, setDatas4] = useState&lt;<span class=\"built_in\">number</span>[]&gt;([]);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [datas5, setDatas5] = useState&lt;<span class=\"built_in\">number</span>[]&gt;([]);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [datas6, setDatas6] = useState&lt;<span class=\"built_in\">number</span>[]&gt;([]);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [datas7, setDatas7] = useState&lt;<span class=\"built_in\">number</span>[]&gt;([]);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [datas8, setDatas8] = useState&lt;<span class=\"built_in\">number</span>[]&gt;([]);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> onClick1 = <span class=\"title function_\">useCallback</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">setDatas1</span>(<span class=\"title function_\">getDatas</span>());</span><br><span class=\"line\">    <span class=\"title function_\">setDatas2</span>(<span class=\"title function_\">getDatas</span>());</span><br><span class=\"line\">    <span class=\"title function_\">setDatas3</span>(<span class=\"title function_\">getDatas</span>());</span><br><span class=\"line\">    <span class=\"title function_\">setDatas4</span>(<span class=\"title function_\">getDatas</span>());</span><br><span class=\"line\">    <span class=\"title function_\">setDatas5</span>(<span class=\"title function_\">getDatas</span>());</span><br><span class=\"line\">    <span class=\"title function_\">setDatas6</span>(<span class=\"title function_\">getDatas</span>());</span><br><span class=\"line\">    <span class=\"title function_\">setDatas7</span>(<span class=\"title function_\">getDatas</span>());</span><br><span class=\"line\">    <span class=\"title function_\">setDatas8</span>(<span class=\"title function_\">getDatas</span>());</span><br><span class=\"line\">  &#125;, []);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">window</span>.<span class=\"built_in\">setInterval</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">setName</span>(<span class=\"string\">`world <span class=\"subst\">$&#123;<span class=\"built_in\">Math</span>.random()&#125;</span>`</span>);</span><br><span class=\"line\">    &#125;, <span class=\"number\">500</span>);</span><br><span class=\"line\">  &#125;, []);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      hello &#123;name&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;onClick1&#125;</span>&gt;</span>click me<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        &#123;datas1.map((v) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">          return <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;v&#125;</span>&gt;</span>&#123;v&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>;</span></span><br><span class=\"line\"><span class=\"language-xml\">        &#125;)&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        &#123;datas2.map((v) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">          return <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;v&#125;</span>&gt;</span>&#123;v&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>;</span></span><br><span class=\"line\"><span class=\"language-xml\">        &#125;)&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        &#123;datas3.map((v) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">          return <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;v&#125;</span>&gt;</span>&#123;v&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>;</span></span><br><span class=\"line\"><span class=\"language-xml\">        &#125;)&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        &#123;datas4.map((v) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">          return <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;v&#125;</span>&gt;</span>&#123;v&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>;</span></span><br><span class=\"line\"><span class=\"language-xml\">        &#125;)&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        &#123;datas5.map((v) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">          return <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;v&#125;</span>&gt;</span>&#123;v&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>;</span></span><br><span class=\"line\"><span class=\"language-xml\">        &#125;)&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        &#123;datas6.map((v) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">          return <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;v&#125;</span>&gt;</span>&#123;v&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>;</span></span><br><span class=\"line\"><span class=\"language-xml\">        &#125;)&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        &#123;datas7.map((v) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">          return <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;v&#125;</span>&gt;</span>&#123;v&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>;</span></span><br><span class=\"line\"><span class=\"language-xml\">        &#125;)&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        &#123;datas8.map((v) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">          return <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;v&#125;</span>&gt;</span>&#123;v&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>;</span></span><br><span class=\"line\"><span class=\"language-xml\">        &#125;)&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>首先不点击按钮，观察 5 秒，没有卡顿现象，性能表现如图：</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/taoliujun/taoliujun.github.io/assets/202307041609217.png\"></p>\n<p>可以看到有几个微微凸起的黄色点，对应着每次的<code>hello</code>状态更新和渲染，它们的执行时间都在 1ms，没有超过一帧的时间。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/taoliujun/taoliujun.github.io/assets/202307041610767.png\"></p>\n<p>选取其中一个黄色的点，查看它的详情。React 的调度器、协调器、渲染器创建了对应的任务，分步执行了任务，具体可阅读 React 架构的相关文章。</p>\n<p><strong>然后连续点几次按钮，<code>hello</code>的渲染出现明显的卡顿，性能表现如图：</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/taoliujun/taoliujun.github.io/assets/202307041608992.png\"></p>\n<p>在性能图中截取的一段时间中，黄色是脚本执行时间，灰色是 UI 渲染时间，白色是空闲时间（我停止点击了一会儿），在每帧里，要跑完所有的状态变更和 UI 渲染，<code>datas</code>系列的状态变更和渲染占据了大量的时间，基本是阻塞了<code>hello</code>的状态变更和渲染。</p>\n<p><strong>只点击一次，性能表现如图：</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/taoliujun/taoliujun.github.io/assets/202307041625903.png\"></p>\n<p>可以看到几个 Task，第一个 Task 就是在更新<code>datas</code>系列状态和渲染，它占据了太多帧的时间，导致<code>hello</code>的状态变更和渲染被推迟到后面的帧。</p>\n<h2 id=\"优化它\"><a href=\"#优化它\" class=\"headerlink\" title=\"优化它\"></a>优化它</h2><p>前面说到，React 的架构中实现了<strong>时间切片</strong>，它允许开发者将<em>不重要</em>的变更推迟到后面的帧，这样就可以尽量保证优先执行默认任务。使用<code>useTransition</code>改下代码：</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [pending, startTransition] = <span class=\"title function_\">useTransition</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> onClick1 = <span class=\"title function_\">useCallback</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">startTransition</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">setDatas1</span>(<span class=\"title function_\">getDatas</span>());</span><br><span class=\"line\">    <span class=\"title function_\">setDatas2</span>(<span class=\"title function_\">getDatas</span>());</span><br><span class=\"line\">    <span class=\"title function_\">setDatas3</span>(<span class=\"title function_\">getDatas</span>());</span><br><span class=\"line\">    <span class=\"title function_\">setDatas4</span>(<span class=\"title function_\">getDatas</span>());</span><br><span class=\"line\">    <span class=\"title function_\">setDatas5</span>(<span class=\"title function_\">getDatas</span>());</span><br><span class=\"line\">    <span class=\"title function_\">setDatas6</span>(<span class=\"title function_\">getDatas</span>());</span><br><span class=\"line\">    <span class=\"title function_\">setDatas7</span>(<span class=\"title function_\">getDatas</span>());</span><br><span class=\"line\">    <span class=\"title function_\">setDatas8</span>(<span class=\"title function_\">getDatas</span>());</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;, []);</span><br></pre></td></tr></table></figure>\n\n<p><strong>再次连续点击按钮，卡顿现象明显减轻很多，性能表现如下：</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/taoliujun/taoliujun.github.io/assets/202307041629743.png\"></p>\n<p>一看起来，执行时间还是很长，那么为什么<code>hello</code>渲染看起来不卡顿呢？</p>\n<p><strong>只点一次，看看性能表现：</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/taoliujun/taoliujun.github.io/assets/202307041631650.png\"></p>\n<p>查看几个 Task 的详情，发现<code>datas</code>系列状态的更新，被分配在了多个 Task 中，中间还穿插了<code>hello</code>的状态更新的任务。这也印证了<code>useTransition</code>的实现背景：将不重要的任务通过时间切片架构，分配到多帧中，优先执行其他任务，从而实现不卡顿的目的。</p>\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><ul>\n<li><p><code>useTransition</code>是个 hook，它的返回值还包括了一个 pending 状态，用来表示是否处于时间切片的过程中，可以用来优化 UI，比如显示一个 loading。</p>\n</li>\n<li><p>你也可以使用<code>startTransition</code>这个 util 函数代替 hook 的使用。</p>\n</li>\n<li><p>时间切片架构是调度状态变化的，所以<code>startTransition</code>的入参函数里，将状态更新标记为可切片，普通的代码段不会被标记。所以简单的说，你还是得将一个状态变更的执行时间控制在 5ms 内。</p>\n</li>\n</ul>\n"},{"title":"从Radix看如何优雅的写组件","url":"前端/write_component_with_radix","date":"2023-06-26T16:00:00.000Z","_content":"\n## 组件的困扰\n\n在更早以前，网页应用很简单，开发者自己维护简单的交互组件，通过入参去控制组件有不一样的渲染、样式、交互。后来 React/Vue 等框架的到来，使网页应用变得愈发复杂，于是使用 Element、Ant、Mui 之类的 UI 组件来提高开发效率，但使用后发现一些问题，其中常见的是：\n\n1. 难以改变样式。\n1. 几乎不能改变 dom 结构。\n\n虽然很多组件库提供了 css variables、less/sass 包等方式让人们来定义样式，但离精细定义差些距离。而且固化的组件 dom 结构让开发者难以完成产品、UI 设计师要求的定制化二次开发。\n\n于是部分人开始从 0 或基于更基础的 UI 组件来开发自定义组件以满足自定义样式和 dom 结构的目的，但问题是维护这些基础组件又是一个麻烦，或者说这些组件放到另一个项目中，是否又需要是另一个 dom 结构？\n\n于是，有开源项目在解决这样的事，比较出众的是 Mui-Base、Radix，它们都旨在提供一套 Uncontrolled、Unstyled、Opened 的基础组件以便大家二次封装。我在阅读实践了这两个方案后，选择了使用 Radix 继续深入下去，主要是因为 Radix 将组件拆分的更为精细。\n\n## Radix 的理念\n\n它提出了几个特性，一起看看吧。\n\n### Accessible 可访问性\n\n如果你的应用对可访问性有要求，那 Radix 会有很大帮助，它遵循了一个 `WAI-ARIA` 的设计规范。但我对可访问性的研究不多，在此不表了。\n\n### Unstyled 无样式\n\n顾名思义的是，它提供的组件都是不带任何样式的，你可以使用任意样式方案去开发。这也解决了上文提到的重要问题：自定义样式。\n\n### Opened 开放\n\n我认为 Radix 的开发性做到了优秀的程度，它的每个组件都太颗粒了，你可以精细的自由搭配，组装成想要的。\n\n### Incremental 渐进的\n\n可以只安装我们需要用到的组件库，比如`npm install @radix-ui/react-tooltip`。\n\n## 一个小例子\n\n我们要做一个 tooltip，如果自己写，需要考虑样式、状态控制、可访问性等。但是在 Radix 里，采用简单的封装和自定义样式即可：\n\n```typescript\nimport * as Popover from \"@radix-ui/react-popover\";\nimport { FC } from \"react\";\n\nexport const Main: FC = () => {\n  return (\n    <Popover.Root>\n      <Popover.Trigger>点击我</Popover.Trigger>\n      <Popover.Portal>\n        <Popover.Content sideOffset={5}>\n          要显示的内容\n          <Popover.Arrow />\n        </Popover.Content>\n      </Popover.Portal>\n    </Popover.Root>\n  );\n};\n```\n\n在上面的代码中，组装 Radix 提供的 popover 组件的颗粒，不加任意 className 就得到一个简单的 tooltip，并且\"点击我\"可进行交互。如图：\n\n![](https://cdn.jsdelivr.net/gh/taoliujun/taoliujun.github.io/assets/202306271427990.png)\n\n接着，我随便加了点 tailwindcss。\n\n```typescript\nreturn (\n  <Popover.Root>\n    <Popover.Trigger className=\"text-red\">点击我</Popover.Trigger>\n    <Popover.Portal>\n      <Popover.Content\n        className=\"border border-solid border-black\"\n        sideOffset={5}\n      >\n        要显示的内容\n        <Popover.Arrow />\n      </Popover.Content>\n    </Popover.Portal>\n  </Popover.Root>\n);\n```\n\n就得到如图的效果：\n\n![](https://cdn.jsdelivr.net/gh/taoliujun/taoliujun.github.io/assets/202306271430207.png)\n\nRadix 的组件将几乎所有的 state 变化，反馈到`data-state`上方便你精细的定制样式了。\n\n## 其他\n\nRadix 提供了很多小细节让你可以优雅的封装组件，不限于：\n\n- 提供`forceMount`以方便你的组件能运行完整的动画。\n- 提供`asChild`以方便你更精细的自定义 dom。\n- 支持 SSR。\n- 提供了许多现成组件，并且足够颗粒化，让你更快更优化的定制出自己的组件哟。\n\n相比较使用它，理解它的理念才能消化为自己的知识，个人认为即便是自己开发的基础组件，以精细颗粒控制为目标，也不失为一个很棒的思路。\n\n## 参考\n\n- https://www.radix-ui.com/\n","source":"_posts/前端/从Radix看如何优雅写组件.md","raw":"---\ntitle: 从Radix看如何优雅的写组件\nurl: 前端/write_component_with_radix\ndate: 2023-06-27\ntags:\n  - radix\n  - 组件\ncategories:\n  - [架构]\n  - [React]\n---\n\n## 组件的困扰\n\n在更早以前，网页应用很简单，开发者自己维护简单的交互组件，通过入参去控制组件有不一样的渲染、样式、交互。后来 React/Vue 等框架的到来，使网页应用变得愈发复杂，于是使用 Element、Ant、Mui 之类的 UI 组件来提高开发效率，但使用后发现一些问题，其中常见的是：\n\n1. 难以改变样式。\n1. 几乎不能改变 dom 结构。\n\n虽然很多组件库提供了 css variables、less/sass 包等方式让人们来定义样式，但离精细定义差些距离。而且固化的组件 dom 结构让开发者难以完成产品、UI 设计师要求的定制化二次开发。\n\n于是部分人开始从 0 或基于更基础的 UI 组件来开发自定义组件以满足自定义样式和 dom 结构的目的，但问题是维护这些基础组件又是一个麻烦，或者说这些组件放到另一个项目中，是否又需要是另一个 dom 结构？\n\n于是，有开源项目在解决这样的事，比较出众的是 Mui-Base、Radix，它们都旨在提供一套 Uncontrolled、Unstyled、Opened 的基础组件以便大家二次封装。我在阅读实践了这两个方案后，选择了使用 Radix 继续深入下去，主要是因为 Radix 将组件拆分的更为精细。\n\n## Radix 的理念\n\n它提出了几个特性，一起看看吧。\n\n### Accessible 可访问性\n\n如果你的应用对可访问性有要求，那 Radix 会有很大帮助，它遵循了一个 `WAI-ARIA` 的设计规范。但我对可访问性的研究不多，在此不表了。\n\n### Unstyled 无样式\n\n顾名思义的是，它提供的组件都是不带任何样式的，你可以使用任意样式方案去开发。这也解决了上文提到的重要问题：自定义样式。\n\n### Opened 开放\n\n我认为 Radix 的开发性做到了优秀的程度，它的每个组件都太颗粒了，你可以精细的自由搭配，组装成想要的。\n\n### Incremental 渐进的\n\n可以只安装我们需要用到的组件库，比如`npm install @radix-ui/react-tooltip`。\n\n## 一个小例子\n\n我们要做一个 tooltip，如果自己写，需要考虑样式、状态控制、可访问性等。但是在 Radix 里，采用简单的封装和自定义样式即可：\n\n```typescript\nimport * as Popover from \"@radix-ui/react-popover\";\nimport { FC } from \"react\";\n\nexport const Main: FC = () => {\n  return (\n    <Popover.Root>\n      <Popover.Trigger>点击我</Popover.Trigger>\n      <Popover.Portal>\n        <Popover.Content sideOffset={5}>\n          要显示的内容\n          <Popover.Arrow />\n        </Popover.Content>\n      </Popover.Portal>\n    </Popover.Root>\n  );\n};\n```\n\n在上面的代码中，组装 Radix 提供的 popover 组件的颗粒，不加任意 className 就得到一个简单的 tooltip，并且\"点击我\"可进行交互。如图：\n\n![](https://cdn.jsdelivr.net/gh/taoliujun/taoliujun.github.io/assets/202306271427990.png)\n\n接着，我随便加了点 tailwindcss。\n\n```typescript\nreturn (\n  <Popover.Root>\n    <Popover.Trigger className=\"text-red\">点击我</Popover.Trigger>\n    <Popover.Portal>\n      <Popover.Content\n        className=\"border border-solid border-black\"\n        sideOffset={5}\n      >\n        要显示的内容\n        <Popover.Arrow />\n      </Popover.Content>\n    </Popover.Portal>\n  </Popover.Root>\n);\n```\n\n就得到如图的效果：\n\n![](https://cdn.jsdelivr.net/gh/taoliujun/taoliujun.github.io/assets/202306271430207.png)\n\nRadix 的组件将几乎所有的 state 变化，反馈到`data-state`上方便你精细的定制样式了。\n\n## 其他\n\nRadix 提供了很多小细节让你可以优雅的封装组件，不限于：\n\n- 提供`forceMount`以方便你的组件能运行完整的动画。\n- 提供`asChild`以方便你更精细的自定义 dom。\n- 支持 SSR。\n- 提供了许多现成组件，并且足够颗粒化，让你更快更优化的定制出自己的组件哟。\n\n相比较使用它，理解它的理念才能消化为自己的知识，个人认为即便是自己开发的基础组件，以精细颗粒控制为目标，也不失为一个很棒的思路。\n\n## 参考\n\n- https://www.radix-ui.com/\n","slug":"前端/从Radix看如何优雅写组件","published":1,"updated":"2023-07-05T07:38:59.868Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cljpf1ku2000rmtrrc04f0fp0","content":"<h2 id=\"组件的困扰\"><a href=\"#组件的困扰\" class=\"headerlink\" title=\"组件的困扰\"></a>组件的困扰</h2><p>在更早以前，网页应用很简单，开发者自己维护简单的交互组件，通过入参去控制组件有不一样的渲染、样式、交互。后来 React&#x2F;Vue 等框架的到来，使网页应用变得愈发复杂，于是使用 Element、Ant、Mui 之类的 UI 组件来提高开发效率，但使用后发现一些问题，其中常见的是：</p>\n<ol>\n<li>难以改变样式。</li>\n<li>几乎不能改变 dom 结构。</li>\n</ol>\n<p>虽然很多组件库提供了 css variables、less&#x2F;sass 包等方式让人们来定义样式，但离精细定义差些距离。而且固化的组件 dom 结构让开发者难以完成产品、UI 设计师要求的定制化二次开发。</p>\n<p>于是部分人开始从 0 或基于更基础的 UI 组件来开发自定义组件以满足自定义样式和 dom 结构的目的，但问题是维护这些基础组件又是一个麻烦，或者说这些组件放到另一个项目中，是否又需要是另一个 dom 结构？</p>\n<p>于是，有开源项目在解决这样的事，比较出众的是 Mui-Base、Radix，它们都旨在提供一套 Uncontrolled、Unstyled、Opened 的基础组件以便大家二次封装。我在阅读实践了这两个方案后，选择了使用 Radix 继续深入下去，主要是因为 Radix 将组件拆分的更为精细。</p>\n<h2 id=\"Radix-的理念\"><a href=\"#Radix-的理念\" class=\"headerlink\" title=\"Radix 的理念\"></a>Radix 的理念</h2><p>它提出了几个特性，一起看看吧。</p>\n<h3 id=\"Accessible-可访问性\"><a href=\"#Accessible-可访问性\" class=\"headerlink\" title=\"Accessible 可访问性\"></a>Accessible 可访问性</h3><p>如果你的应用对可访问性有要求，那 Radix 会有很大帮助，它遵循了一个 <code>WAI-ARIA</code> 的设计规范。但我对可访问性的研究不多，在此不表了。</p>\n<h3 id=\"Unstyled-无样式\"><a href=\"#Unstyled-无样式\" class=\"headerlink\" title=\"Unstyled 无样式\"></a>Unstyled 无样式</h3><p>顾名思义的是，它提供的组件都是不带任何样式的，你可以使用任意样式方案去开发。这也解决了上文提到的重要问题：自定义样式。</p>\n<h3 id=\"Opened-开放\"><a href=\"#Opened-开放\" class=\"headerlink\" title=\"Opened 开放\"></a>Opened 开放</h3><p>我认为 Radix 的开发性做到了优秀的程度，它的每个组件都太颗粒了，你可以精细的自由搭配，组装成想要的。</p>\n<h3 id=\"Incremental-渐进的\"><a href=\"#Incremental-渐进的\" class=\"headerlink\" title=\"Incremental 渐进的\"></a>Incremental 渐进的</h3><p>可以只安装我们需要用到的组件库，比如<code>npm install @radix-ui/react-tooltip</code>。</p>\n<h2 id=\"一个小例子\"><a href=\"#一个小例子\" class=\"headerlink\" title=\"一个小例子\"></a>一个小例子</h2><p>我们要做一个 tooltip，如果自己写，需要考虑样式、状态控制、可访问性等。但是在 Radix 里，采用简单的封装和自定义样式即可：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> <span class=\"title class_\">Popover</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;@radix-ui/react-popover&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"variable constant_\">FC</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">Main</span>: <span class=\"variable constant_\">FC</span> = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Popover.Root</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">Popover.Trigger</span>&gt;</span>点击我<span class=\"tag\">&lt;/<span class=\"name\">Popover.Trigger</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">Popover.Portal</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">Popover.Content</span> <span class=\"attr\">sideOffset</span>=<span class=\"string\">&#123;5&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          要显示的内容</span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">Popover.Arrow</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">Popover.Content</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">Popover.Portal</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">Popover.Root</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>在上面的代码中，组装 Radix 提供的 popover 组件的颗粒，不加任意 className 就得到一个简单的 tooltip，并且”点击我”可进行交互。如图：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/taoliujun/taoliujun.github.io/assets/202306271427990.png\"></p>\n<p>接着，我随便加了点 tailwindcss。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> (</span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Popover.Root</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">Popover.Trigger</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;text-red&quot;</span>&gt;</span>点击我<span class=\"tag\">&lt;/<span class=\"name\">Popover.Trigger</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">Popover.Portal</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">Popover.Content</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">className</span>=<span class=\"string\">&quot;border border-solid border-black&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">sideOffset</span>=<span class=\"string\">&#123;5&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">      &gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        要显示的内容</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">Popover.Arrow</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">Popover.Content</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">Popover.Portal</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;/<span class=\"name\">Popover.Root</span>&gt;</span></span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>就得到如图的效果：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/taoliujun/taoliujun.github.io/assets/202306271430207.png\"></p>\n<p>Radix 的组件将几乎所有的 state 变化，反馈到<code>data-state</code>上方便你精细的定制样式了。</p>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><p>Radix 提供了很多小细节让你可以优雅的封装组件，不限于：</p>\n<ul>\n<li>提供<code>forceMount</code>以方便你的组件能运行完整的动画。</li>\n<li>提供<code>asChild</code>以方便你更精细的自定义 dom。</li>\n<li>支持 SSR。</li>\n<li>提供了许多现成组件，并且足够颗粒化，让你更快更优化的定制出自己的组件哟。</li>\n</ul>\n<p>相比较使用它，理解它的理念才能消化为自己的知识，个人认为即便是自己开发的基础组件，以精细颗粒控制为目标，也不失为一个很棒的思路。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://www.radix-ui.com/\">https://www.radix-ui.com/</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"组件的困扰\"><a href=\"#组件的困扰\" class=\"headerlink\" title=\"组件的困扰\"></a>组件的困扰</h2><p>在更早以前，网页应用很简单，开发者自己维护简单的交互组件，通过入参去控制组件有不一样的渲染、样式、交互。后来 React&#x2F;Vue 等框架的到来，使网页应用变得愈发复杂，于是使用 Element、Ant、Mui 之类的 UI 组件来提高开发效率，但使用后发现一些问题，其中常见的是：</p>\n<ol>\n<li>难以改变样式。</li>\n<li>几乎不能改变 dom 结构。</li>\n</ol>\n<p>虽然很多组件库提供了 css variables、less&#x2F;sass 包等方式让人们来定义样式，但离精细定义差些距离。而且固化的组件 dom 结构让开发者难以完成产品、UI 设计师要求的定制化二次开发。</p>\n<p>于是部分人开始从 0 或基于更基础的 UI 组件来开发自定义组件以满足自定义样式和 dom 结构的目的，但问题是维护这些基础组件又是一个麻烦，或者说这些组件放到另一个项目中，是否又需要是另一个 dom 结构？</p>\n<p>于是，有开源项目在解决这样的事，比较出众的是 Mui-Base、Radix，它们都旨在提供一套 Uncontrolled、Unstyled、Opened 的基础组件以便大家二次封装。我在阅读实践了这两个方案后，选择了使用 Radix 继续深入下去，主要是因为 Radix 将组件拆分的更为精细。</p>\n<h2 id=\"Radix-的理念\"><a href=\"#Radix-的理念\" class=\"headerlink\" title=\"Radix 的理念\"></a>Radix 的理念</h2><p>它提出了几个特性，一起看看吧。</p>\n<h3 id=\"Accessible-可访问性\"><a href=\"#Accessible-可访问性\" class=\"headerlink\" title=\"Accessible 可访问性\"></a>Accessible 可访问性</h3><p>如果你的应用对可访问性有要求，那 Radix 会有很大帮助，它遵循了一个 <code>WAI-ARIA</code> 的设计规范。但我对可访问性的研究不多，在此不表了。</p>\n<h3 id=\"Unstyled-无样式\"><a href=\"#Unstyled-无样式\" class=\"headerlink\" title=\"Unstyled 无样式\"></a>Unstyled 无样式</h3><p>顾名思义的是，它提供的组件都是不带任何样式的，你可以使用任意样式方案去开发。这也解决了上文提到的重要问题：自定义样式。</p>\n<h3 id=\"Opened-开放\"><a href=\"#Opened-开放\" class=\"headerlink\" title=\"Opened 开放\"></a>Opened 开放</h3><p>我认为 Radix 的开发性做到了优秀的程度，它的每个组件都太颗粒了，你可以精细的自由搭配，组装成想要的。</p>\n<h3 id=\"Incremental-渐进的\"><a href=\"#Incremental-渐进的\" class=\"headerlink\" title=\"Incremental 渐进的\"></a>Incremental 渐进的</h3><p>可以只安装我们需要用到的组件库，比如<code>npm install @radix-ui/react-tooltip</code>。</p>\n<h2 id=\"一个小例子\"><a href=\"#一个小例子\" class=\"headerlink\" title=\"一个小例子\"></a>一个小例子</h2><p>我们要做一个 tooltip，如果自己写，需要考虑样式、状态控制、可访问性等。但是在 Radix 里，采用简单的封装和自定义样式即可：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> <span class=\"title class_\">Popover</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;@radix-ui/react-popover&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"variable constant_\">FC</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">Main</span>: <span class=\"variable constant_\">FC</span> = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Popover.Root</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">Popover.Trigger</span>&gt;</span>点击我<span class=\"tag\">&lt;/<span class=\"name\">Popover.Trigger</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">Popover.Portal</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">Popover.Content</span> <span class=\"attr\">sideOffset</span>=<span class=\"string\">&#123;5&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          要显示的内容</span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">Popover.Arrow</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">Popover.Content</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">Popover.Portal</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">Popover.Root</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>在上面的代码中，组装 Radix 提供的 popover 组件的颗粒，不加任意 className 就得到一个简单的 tooltip，并且”点击我”可进行交互。如图：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/taoliujun/taoliujun.github.io/assets/202306271427990.png\"></p>\n<p>接着，我随便加了点 tailwindcss。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> (</span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Popover.Root</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">Popover.Trigger</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;text-red&quot;</span>&gt;</span>点击我<span class=\"tag\">&lt;/<span class=\"name\">Popover.Trigger</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">Popover.Portal</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">Popover.Content</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">className</span>=<span class=\"string\">&quot;border border-solid border-black&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">sideOffset</span>=<span class=\"string\">&#123;5&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">      &gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        要显示的内容</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">Popover.Arrow</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">Popover.Content</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">Popover.Portal</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;/<span class=\"name\">Popover.Root</span>&gt;</span></span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>就得到如图的效果：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/taoliujun/taoliujun.github.io/assets/202306271430207.png\"></p>\n<p>Radix 的组件将几乎所有的 state 变化，反馈到<code>data-state</code>上方便你精细的定制样式了。</p>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><p>Radix 提供了很多小细节让你可以优雅的封装组件，不限于：</p>\n<ul>\n<li>提供<code>forceMount</code>以方便你的组件能运行完整的动画。</li>\n<li>提供<code>asChild</code>以方便你更精细的自定义 dom。</li>\n<li>支持 SSR。</li>\n<li>提供了许多现成组件，并且足够颗粒化，让你更快更优化的定制出自己的组件哟。</li>\n</ul>\n<p>相比较使用它，理解它的理念才能消化为自己的知识，个人认为即便是自己开发的基础组件，以精细颗粒控制为目标，也不失为一个很棒的思路。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://www.radix-ui.com/\">https://www.radix-ui.com/</a></li>\n</ul>\n"},{"title":"0. GitHub Actions - Intro","url":"GitHub_Actions/intro","date":"2022-07-02T16:00:00.000Z","_content":"\n官方文档：https://docs.github.com/en/actions\n\n之前依葫芦画瓢使用了 CI，并未对此做系统的了解，近期通读了一遍 Github Actions 文档，本系列文章是个人在 https://docs.github.com/en/actions 学习过程的杂乱记录，它是这样的：\n\n- 本文章系列不同于官方文档的中文翻译，只是加入个人理解的学习日记，内容不会完全覆盖。\n- 时间背景是 2022 年 7 月份。\n- 按照官方文档的顺序做了笔记，但忽略了个人认为不重要的部分。\n- 都是经验主义的理解，并且由于本人英文水平有限，会有理解出错的地方。\n- 部分理解也未基于代码实际运行结果，纯属经验和猜测。\n- 因为文档术语翻译往往词不达意，所以会有很多中英参杂。\n\n## 是什么？\n\n既然你搜索到本文，想必是知道它是干什么的。我概括为：\n\n> GitHub Actions 允许你在某些行为（比如 push master 分支）后，利用特定机器，执行脚本（比如 eslint check），并反馈结果形成一个 job。job 可以串起来，以完成更复杂的自动化操作。\n\n## 和 CI 的关系\n\nCI/CD 是执行自动化工作流的持续发布策略，它存在于 gitlab、github、jekins，甚至你在服务器上写了一个简单的计划任务拉取仓库代码后进行打包的脚本，也可以称之为 CI。\n\n在 github.com 上的 CI 就是 GitHub Actions，它提供了一组特定的环境变量、上下文、宿主机器。\n","source":"_posts/Github Actions/0. Intro.md","raw":"---\ntitle: 0. GitHub Actions - Intro\nurl: GitHub_Actions/intro\ndate: 2022-07-03\ntags:\n  - github actions\n  - ci\ncategories:\n  - [架构]\n---\n\n官方文档：https://docs.github.com/en/actions\n\n之前依葫芦画瓢使用了 CI，并未对此做系统的了解，近期通读了一遍 Github Actions 文档，本系列文章是个人在 https://docs.github.com/en/actions 学习过程的杂乱记录，它是这样的：\n\n- 本文章系列不同于官方文档的中文翻译，只是加入个人理解的学习日记，内容不会完全覆盖。\n- 时间背景是 2022 年 7 月份。\n- 按照官方文档的顺序做了笔记，但忽略了个人认为不重要的部分。\n- 都是经验主义的理解，并且由于本人英文水平有限，会有理解出错的地方。\n- 部分理解也未基于代码实际运行结果，纯属经验和猜测。\n- 因为文档术语翻译往往词不达意，所以会有很多中英参杂。\n\n## 是什么？\n\n既然你搜索到本文，想必是知道它是干什么的。我概括为：\n\n> GitHub Actions 允许你在某些行为（比如 push master 分支）后，利用特定机器，执行脚本（比如 eslint check），并反馈结果形成一个 job。job 可以串起来，以完成更复杂的自动化操作。\n\n## 和 CI 的关系\n\nCI/CD 是执行自动化工作流的持续发布策略，它存在于 gitlab、github、jekins，甚至你在服务器上写了一个简单的计划任务拉取仓库代码后进行打包的脚本，也可以称之为 CI。\n\n在 github.com 上的 CI 就是 GitHub Actions，它提供了一组特定的环境变量、上下文、宿主机器。\n","slug":"Github Actions/0. Intro","published":1,"updated":"2023-07-05T07:42:19.025Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cljpf1ku3000vmtrr08om0g2b","content":"<p>官方文档：<a href=\"https://docs.github.com/en/actions\">https://docs.github.com/en/actions</a></p>\n<p>之前依葫芦画瓢使用了 CI，并未对此做系统的了解，近期通读了一遍 Github Actions 文档，本系列文章是个人在 <a href=\"https://docs.github.com/en/actions\">https://docs.github.com/en/actions</a> 学习过程的杂乱记录，它是这样的：</p>\n<ul>\n<li>本文章系列不同于官方文档的中文翻译，只是加入个人理解的学习日记，内容不会完全覆盖。</li>\n<li>时间背景是 2022 年 7 月份。</li>\n<li>按照官方文档的顺序做了笔记，但忽略了个人认为不重要的部分。</li>\n<li>都是经验主义的理解，并且由于本人英文水平有限，会有理解出错的地方。</li>\n<li>部分理解也未基于代码实际运行结果，纯属经验和猜测。</li>\n<li>因为文档术语翻译往往词不达意，所以会有很多中英参杂。</li>\n</ul>\n<h2 id=\"是什么？\"><a href=\"#是什么？\" class=\"headerlink\" title=\"是什么？\"></a>是什么？</h2><p>既然你搜索到本文，想必是知道它是干什么的。我概括为：</p>\n<blockquote>\n<p>GitHub Actions 允许你在某些行为（比如 push master 分支）后，利用特定机器，执行脚本（比如 eslint check），并反馈结果形成一个 job。job 可以串起来，以完成更复杂的自动化操作。</p>\n</blockquote>\n<h2 id=\"和-CI-的关系\"><a href=\"#和-CI-的关系\" class=\"headerlink\" title=\"和 CI 的关系\"></a>和 CI 的关系</h2><p>CI&#x2F;CD 是执行自动化工作流的持续发布策略，它存在于 gitlab、github、jekins，甚至你在服务器上写了一个简单的计划任务拉取仓库代码后进行打包的脚本，也可以称之为 CI。</p>\n<p>在 github.com 上的 CI 就是 GitHub Actions，它提供了一组特定的环境变量、上下文、宿主机器。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>官方文档：<a href=\"https://docs.github.com/en/actions\">https://docs.github.com/en/actions</a></p>\n<p>之前依葫芦画瓢使用了 CI，并未对此做系统的了解，近期通读了一遍 Github Actions 文档，本系列文章是个人在 <a href=\"https://docs.github.com/en/actions\">https://docs.github.com/en/actions</a> 学习过程的杂乱记录，它是这样的：</p>\n<ul>\n<li>本文章系列不同于官方文档的中文翻译，只是加入个人理解的学习日记，内容不会完全覆盖。</li>\n<li>时间背景是 2022 年 7 月份。</li>\n<li>按照官方文档的顺序做了笔记，但忽略了个人认为不重要的部分。</li>\n<li>都是经验主义的理解，并且由于本人英文水平有限，会有理解出错的地方。</li>\n<li>部分理解也未基于代码实际运行结果，纯属经验和猜测。</li>\n<li>因为文档术语翻译往往词不达意，所以会有很多中英参杂。</li>\n</ul>\n<h2 id=\"是什么？\"><a href=\"#是什么？\" class=\"headerlink\" title=\"是什么？\"></a>是什么？</h2><p>既然你搜索到本文，想必是知道它是干什么的。我概括为：</p>\n<blockquote>\n<p>GitHub Actions 允许你在某些行为（比如 push master 分支）后，利用特定机器，执行脚本（比如 eslint check），并反馈结果形成一个 job。job 可以串起来，以完成更复杂的自动化操作。</p>\n</blockquote>\n<h2 id=\"和-CI-的关系\"><a href=\"#和-CI-的关系\" class=\"headerlink\" title=\"和 CI 的关系\"></a>和 CI 的关系</h2><p>CI&#x2F;CD 是执行自动化工作流的持续发布策略，它存在于 gitlab、github、jekins，甚至你在服务器上写了一个简单的计划任务拉取仓库代码后进行打包的脚本，也可以称之为 CI。</p>\n<p>在 github.com 上的 CI 就是 GitHub Actions，它提供了一组特定的环境变量、上下文、宿主机器。</p>\n"},{"title":"1. GitHub Actions - Quickstart","url":"GitHub_Actions/quickstart","date":"2022-07-03T16:00:00.000Z","_content":"\n官方文档：https://docs.github.com/en/actions/quickstart\n\n本文里，因为还没有讲术语的意思，所以用中文描述了基本的执行过程，后续的文章里会用原术语来表达，以防理解不一。\n\n文档说，只要有仓库，就可以使用 Actions。\n\n依葫芦画瓢，在本地创建 `.github/workflows` 目录，在目录里创建任意文件，以.yml 结尾，我创建了 `lint.yml`：\n\n```yaml\nname: lint\non: [push]\njobs:\n  eslint:\n    runs-on: ubuntu-latest\n    steps:\n      - run: echo \"The job was automatically triggered by a ${{ github.event_name }} event.\"\n      - name: Check out repository code\n        uses: actions/checkout@v3\n      - name: List files in the repository\n        run: ls ${{ github.workspace }}\n      - run: echo \"  This job's status is ${{ job.status }}.\"\n```\n\n配置文件有很多术语在后面的笔记中讲解，对于上面的配置简单的解释下：\n\n```yaml\n# 这个工作流的名字: lint\nname: lint\n# 在分支push的时候触发\non: [push]\n# 工作列表，例子里只做一个eslint工作\njobs:\n  # 这一步工作名叫做eslint\n  eslint:\n    # 代码执行在ubuntu-latest的宿主里，注：ubuntu-latest是github提供的免费的宿主。\n    runs-on: ubuntu-latest\n    # 执行哪些代码\n    steps:\n      # 执行一个普通的shell脚本，就是 echo '巴拉巴拉巴拉巴拉一段话'，这段话里的${{github.event_name}}\n      # 是一个变量，这个变量由actions上下文提供，望文生义，event_name是事件名称的意思\n      - run: echo \"  The job was automatically triggered by a ${{ github.event_name }} event.\"\n      # 为这一步脚本定一个名字，叫做 巴拉巴拉\n      - name: Check out repository code\n        # 我们使用别人提供的封装好的脚本，这里的意思是使用官方提供的 actions/checkout 的脚本的v3版本\n        uses: actions/checkout@v3\n      # 又定义一个名字，叫做 巴拉巴拉\n      - name: List files in the repository\n        # 再一次运行自定义的脚本，列出目录结构，这儿又使用了一个变量\n        run: ls ${{ github.workspace }}\n      # 最后再执行一个自定义脚本，输出一段话，包含了当前工作的执行状态\n      - run: echo \"  This job's status is ${{ job.status }}.\"\n```\n\n而后，将代码推送到 github 仓库，我们进入仓库页面，点击 Actions 面板，看到 workflows 记录，进入详情看到类似面板。\n\n![](https://cdn.jsdelivr.net/gh/taoliujun/taoliujun.github.io/assets/202306281119773.png)\n\n这个面板展示了 lint.yml 这个工作流的执行状态，它列出所有的工作及其状态以及执行时间。\n\n![](https://cdn.jsdelivr.net/gh/taoliujun/taoliujun.github.io/assets/202306281120264.png)\n\n进入工作流的执行详情，可以看到每个工作的每一步脚本的详细执行过程和输出结果，就不一一表述了，后续会讲到。\n","source":"_posts/Github Actions/1. Quickstart.md","raw":"---\ntitle: 1. GitHub Actions - Quickstart\nurl: GitHub_Actions/quickstart\ndate: 2022-07-04\ntags:\n  - github actions\n  - ci\ncategories:\n  - [架构]\n---\n\n官方文档：https://docs.github.com/en/actions/quickstart\n\n本文里，因为还没有讲术语的意思，所以用中文描述了基本的执行过程，后续的文章里会用原术语来表达，以防理解不一。\n\n文档说，只要有仓库，就可以使用 Actions。\n\n依葫芦画瓢，在本地创建 `.github/workflows` 目录，在目录里创建任意文件，以.yml 结尾，我创建了 `lint.yml`：\n\n```yaml\nname: lint\non: [push]\njobs:\n  eslint:\n    runs-on: ubuntu-latest\n    steps:\n      - run: echo \"The job was automatically triggered by a ${{ github.event_name }} event.\"\n      - name: Check out repository code\n        uses: actions/checkout@v3\n      - name: List files in the repository\n        run: ls ${{ github.workspace }}\n      - run: echo \"  This job's status is ${{ job.status }}.\"\n```\n\n配置文件有很多术语在后面的笔记中讲解，对于上面的配置简单的解释下：\n\n```yaml\n# 这个工作流的名字: lint\nname: lint\n# 在分支push的时候触发\non: [push]\n# 工作列表，例子里只做一个eslint工作\njobs:\n  # 这一步工作名叫做eslint\n  eslint:\n    # 代码执行在ubuntu-latest的宿主里，注：ubuntu-latest是github提供的免费的宿主。\n    runs-on: ubuntu-latest\n    # 执行哪些代码\n    steps:\n      # 执行一个普通的shell脚本，就是 echo '巴拉巴拉巴拉巴拉一段话'，这段话里的${{github.event_name}}\n      # 是一个变量，这个变量由actions上下文提供，望文生义，event_name是事件名称的意思\n      - run: echo \"  The job was automatically triggered by a ${{ github.event_name }} event.\"\n      # 为这一步脚本定一个名字，叫做 巴拉巴拉\n      - name: Check out repository code\n        # 我们使用别人提供的封装好的脚本，这里的意思是使用官方提供的 actions/checkout 的脚本的v3版本\n        uses: actions/checkout@v3\n      # 又定义一个名字，叫做 巴拉巴拉\n      - name: List files in the repository\n        # 再一次运行自定义的脚本，列出目录结构，这儿又使用了一个变量\n        run: ls ${{ github.workspace }}\n      # 最后再执行一个自定义脚本，输出一段话，包含了当前工作的执行状态\n      - run: echo \"  This job's status is ${{ job.status }}.\"\n```\n\n而后，将代码推送到 github 仓库，我们进入仓库页面，点击 Actions 面板，看到 workflows 记录，进入详情看到类似面板。\n\n![](https://cdn.jsdelivr.net/gh/taoliujun/taoliujun.github.io/assets/202306281119773.png)\n\n这个面板展示了 lint.yml 这个工作流的执行状态，它列出所有的工作及其状态以及执行时间。\n\n![](https://cdn.jsdelivr.net/gh/taoliujun/taoliujun.github.io/assets/202306281120264.png)\n\n进入工作流的执行详情，可以看到每个工作的每一步脚本的详细执行过程和输出结果，就不一一表述了，后续会讲到。\n","slug":"Github Actions/1. Quickstart","published":1,"updated":"2023-07-05T07:42:41.909Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cljpf1ku4000zmtrrgnii4fww","content":"<p>官方文档：<a href=\"https://docs.github.com/en/actions/quickstart\">https://docs.github.com/en/actions/quickstart</a></p>\n<p>本文里，因为还没有讲术语的意思，所以用中文描述了基本的执行过程，后续的文章里会用原术语来表达，以防理解不一。</p>\n<p>文档说，只要有仓库，就可以使用 Actions。</p>\n<p>依葫芦画瓢，在本地创建 <code>.github/workflows</code> 目录，在目录里创建任意文件，以.yml 结尾，我创建了 <code>lint.yml</code>：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">lint</span></span><br><span class=\"line\"><span class=\"attr\">on:</span> [<span class=\"string\">push</span>]</span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">eslint:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">run:</span> <span class=\"string\">echo</span> <span class=\"string\">&quot;The job was automatically triggered by a $<span class=\"template-variable\">&#123;&#123; github.event_name &#125;&#125;</span> event.&quot;</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Check</span> <span class=\"string\">out</span> <span class=\"string\">repository</span> <span class=\"string\">code</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v3</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">List</span> <span class=\"string\">files</span> <span class=\"string\">in</span> <span class=\"string\">the</span> <span class=\"string\">repository</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">ls</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">github.workspace</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">run:</span> <span class=\"string\">echo</span> <span class=\"string\">&quot;  This job&#x27;s status is $<span class=\"template-variable\">&#123;&#123; job.status &#125;&#125;</span>.&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>配置文件有很多术语在后面的笔记中讲解，对于上面的配置简单的解释下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 这个工作流的名字: lint</span></span><br><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">lint</span></span><br><span class=\"line\"><span class=\"comment\"># 在分支push的时候触发</span></span><br><span class=\"line\"><span class=\"attr\">on:</span> [<span class=\"string\">push</span>]</span><br><span class=\"line\"><span class=\"comment\"># 工作列表，例子里只做一个eslint工作</span></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"comment\"># 这一步工作名叫做eslint</span></span><br><span class=\"line\">  <span class=\"attr\">eslint:</span></span><br><span class=\"line\">    <span class=\"comment\"># 代码执行在ubuntu-latest的宿主里，注：ubuntu-latest是github提供的免费的宿主。</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"comment\"># 执行哪些代码</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"comment\"># 执行一个普通的shell脚本，就是 echo &#x27;巴拉巴拉巴拉巴拉一段话&#x27;，这段话里的$&#123;&#123;github.event_name&#125;&#125;</span></span><br><span class=\"line\">      <span class=\"comment\"># 是一个变量，这个变量由actions上下文提供，望文生义，event_name是事件名称的意思</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">run:</span> <span class=\"string\">echo</span> <span class=\"string\">&quot;  The job was automatically triggered by a $<span class=\"template-variable\">&#123;&#123; github.event_name &#125;&#125;</span> event.&quot;</span></span><br><span class=\"line\">      <span class=\"comment\"># 为这一步脚本定一个名字，叫做 巴拉巴拉</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Check</span> <span class=\"string\">out</span> <span class=\"string\">repository</span> <span class=\"string\">code</span></span><br><span class=\"line\">        <span class=\"comment\"># 我们使用别人提供的封装好的脚本，这里的意思是使用官方提供的 actions/checkout 的脚本的v3版本</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v3</span></span><br><span class=\"line\">      <span class=\"comment\"># 又定义一个名字，叫做 巴拉巴拉</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">List</span> <span class=\"string\">files</span> <span class=\"string\">in</span> <span class=\"string\">the</span> <span class=\"string\">repository</span></span><br><span class=\"line\">        <span class=\"comment\"># 再一次运行自定义的脚本，列出目录结构，这儿又使用了一个变量</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">ls</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">github.workspace</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">      <span class=\"comment\"># 最后再执行一个自定义脚本，输出一段话，包含了当前工作的执行状态</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">run:</span> <span class=\"string\">echo</span> <span class=\"string\">&quot;  This job&#x27;s status is $<span class=\"template-variable\">&#123;&#123; job.status &#125;&#125;</span>.&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>而后，将代码推送到 github 仓库，我们进入仓库页面，点击 Actions 面板，看到 workflows 记录，进入详情看到类似面板。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/taoliujun/taoliujun.github.io/assets/202306281119773.png\"></p>\n<p>这个面板展示了 lint.yml 这个工作流的执行状态，它列出所有的工作及其状态以及执行时间。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/taoliujun/taoliujun.github.io/assets/202306281120264.png\"></p>\n<p>进入工作流的执行详情，可以看到每个工作的每一步脚本的详细执行过程和输出结果，就不一一表述了，后续会讲到。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>官方文档：<a href=\"https://docs.github.com/en/actions/quickstart\">https://docs.github.com/en/actions/quickstart</a></p>\n<p>本文里，因为还没有讲术语的意思，所以用中文描述了基本的执行过程，后续的文章里会用原术语来表达，以防理解不一。</p>\n<p>文档说，只要有仓库，就可以使用 Actions。</p>\n<p>依葫芦画瓢，在本地创建 <code>.github/workflows</code> 目录，在目录里创建任意文件，以.yml 结尾，我创建了 <code>lint.yml</code>：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">lint</span></span><br><span class=\"line\"><span class=\"attr\">on:</span> [<span class=\"string\">push</span>]</span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">eslint:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">run:</span> <span class=\"string\">echo</span> <span class=\"string\">&quot;The job was automatically triggered by a $<span class=\"template-variable\">&#123;&#123; github.event_name &#125;&#125;</span> event.&quot;</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Check</span> <span class=\"string\">out</span> <span class=\"string\">repository</span> <span class=\"string\">code</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v3</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">List</span> <span class=\"string\">files</span> <span class=\"string\">in</span> <span class=\"string\">the</span> <span class=\"string\">repository</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">ls</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">github.workspace</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">run:</span> <span class=\"string\">echo</span> <span class=\"string\">&quot;  This job&#x27;s status is $<span class=\"template-variable\">&#123;&#123; job.status &#125;&#125;</span>.&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>配置文件有很多术语在后面的笔记中讲解，对于上面的配置简单的解释下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 这个工作流的名字: lint</span></span><br><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">lint</span></span><br><span class=\"line\"><span class=\"comment\"># 在分支push的时候触发</span></span><br><span class=\"line\"><span class=\"attr\">on:</span> [<span class=\"string\">push</span>]</span><br><span class=\"line\"><span class=\"comment\"># 工作列表，例子里只做一个eslint工作</span></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"comment\"># 这一步工作名叫做eslint</span></span><br><span class=\"line\">  <span class=\"attr\">eslint:</span></span><br><span class=\"line\">    <span class=\"comment\"># 代码执行在ubuntu-latest的宿主里，注：ubuntu-latest是github提供的免费的宿主。</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"comment\"># 执行哪些代码</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"comment\"># 执行一个普通的shell脚本，就是 echo &#x27;巴拉巴拉巴拉巴拉一段话&#x27;，这段话里的$&#123;&#123;github.event_name&#125;&#125;</span></span><br><span class=\"line\">      <span class=\"comment\"># 是一个变量，这个变量由actions上下文提供，望文生义，event_name是事件名称的意思</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">run:</span> <span class=\"string\">echo</span> <span class=\"string\">&quot;  The job was automatically triggered by a $<span class=\"template-variable\">&#123;&#123; github.event_name &#125;&#125;</span> event.&quot;</span></span><br><span class=\"line\">      <span class=\"comment\"># 为这一步脚本定一个名字，叫做 巴拉巴拉</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Check</span> <span class=\"string\">out</span> <span class=\"string\">repository</span> <span class=\"string\">code</span></span><br><span class=\"line\">        <span class=\"comment\"># 我们使用别人提供的封装好的脚本，这里的意思是使用官方提供的 actions/checkout 的脚本的v3版本</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v3</span></span><br><span class=\"line\">      <span class=\"comment\"># 又定义一个名字，叫做 巴拉巴拉</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">List</span> <span class=\"string\">files</span> <span class=\"string\">in</span> <span class=\"string\">the</span> <span class=\"string\">repository</span></span><br><span class=\"line\">        <span class=\"comment\"># 再一次运行自定义的脚本，列出目录结构，这儿又使用了一个变量</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">ls</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">github.workspace</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">      <span class=\"comment\"># 最后再执行一个自定义脚本，输出一段话，包含了当前工作的执行状态</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">run:</span> <span class=\"string\">echo</span> <span class=\"string\">&quot;  This job&#x27;s status is $<span class=\"template-variable\">&#123;&#123; job.status &#125;&#125;</span>.&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>而后，将代码推送到 github 仓库，我们进入仓库页面，点击 Actions 面板，看到 workflows 记录，进入详情看到类似面板。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/taoliujun/taoliujun.github.io/assets/202306281119773.png\"></p>\n<p>这个面板展示了 lint.yml 这个工作流的执行状态，它列出所有的工作及其状态以及执行时间。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/taoliujun/taoliujun.github.io/assets/202306281120264.png\"></p>\n<p>进入工作流的执行详情，可以看到每个工作的每一步脚本的详细执行过程和输出结果，就不一一表述了，后续会讲到。</p>\n"},{"title":"3. GitHub Actions - Examples","url":"GitHub_Actions/examples","date":"2022-07-05T16:00:00.000Z","_content":"\n官方文档：https://docs.github.com/en/actions/examples/using-scripts-to-test-your-code-on-a-runner\n\n官方描述了 3 个例子，用来检测文件中的 broken，我读书少，就依葫芦画瓢写一个 eslint 检测增量文件的功能，完成以下功能：\n\n- pull_request 触发 workflow。\n- 使用 eslint 检查 pull request 的增量文件。\n- 如果检查失败，回复失败的文件和内容。\n- 如果检查成功，回复\"+LGTM by eslint\"。\n\n例子中一些术语或属性是第一次出现，先不要管，简单查阅下文档先完成功能，后续文章再研究它们。\n\n## 准备工作\n\n- `package.json`中存在`eslint`依赖。\n- 存在配置文件 `.eslintrc.js`。\n\n## 基础的配置\n\n写一个简单的 Job 让它先跑起来：\n\n```yaml\nname: pull_request\non: pull_request\njobs:\n  eslint:\n    runs-on: ubuntu-latest\n    steps:\n      - run: echo \"i am eslint\"\n```\n\n##增量检查\n\n列出 pull request 的修改、新增的 js、ts 文件，先不用管 eslint，只打印出这些文件。\n\nTODO\n\n**等我学习了后续的知识，再来补充这个例子！！！**\n\n**等我学习了后续的知识，再来补充这个例子！！！**\n\n**等我学习了后续的知识，再来补充这个例子！！！**\n","source":"_posts/Github Actions/3. Examples.md","raw":"---\ntitle: 3. GitHub Actions - Examples\nurl: GitHub_Actions/examples\ndate: 2022-07-06\ntags:\n  - github actions\n  - ci\ncategories:\n  - [架构]\n---\n\n官方文档：https://docs.github.com/en/actions/examples/using-scripts-to-test-your-code-on-a-runner\n\n官方描述了 3 个例子，用来检测文件中的 broken，我读书少，就依葫芦画瓢写一个 eslint 检测增量文件的功能，完成以下功能：\n\n- pull_request 触发 workflow。\n- 使用 eslint 检查 pull request 的增量文件。\n- 如果检查失败，回复失败的文件和内容。\n- 如果检查成功，回复\"+LGTM by eslint\"。\n\n例子中一些术语或属性是第一次出现，先不要管，简单查阅下文档先完成功能，后续文章再研究它们。\n\n## 准备工作\n\n- `package.json`中存在`eslint`依赖。\n- 存在配置文件 `.eslintrc.js`。\n\n## 基础的配置\n\n写一个简单的 Job 让它先跑起来：\n\n```yaml\nname: pull_request\non: pull_request\njobs:\n  eslint:\n    runs-on: ubuntu-latest\n    steps:\n      - run: echo \"i am eslint\"\n```\n\n##增量检查\n\n列出 pull request 的修改、新增的 js、ts 文件，先不用管 eslint，只打印出这些文件。\n\nTODO\n\n**等我学习了后续的知识，再来补充这个例子！！！**\n\n**等我学习了后续的知识，再来补充这个例子！！！**\n\n**等我学习了后续的知识，再来补充这个例子！！！**\n","slug":"Github Actions/3. Examples","published":1,"updated":"2023-07-05T07:42:48.645Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cljpf1ku50013mtrrckv6466i","content":"<p>官方文档：<a href=\"https://docs.github.com/en/actions/examples/using-scripts-to-test-your-code-on-a-runner\">https://docs.github.com/en/actions/examples/using-scripts-to-test-your-code-on-a-runner</a></p>\n<p>官方描述了 3 个例子，用来检测文件中的 broken，我读书少，就依葫芦画瓢写一个 eslint 检测增量文件的功能，完成以下功能：</p>\n<ul>\n<li>pull_request 触发 workflow。</li>\n<li>使用 eslint 检查 pull request 的增量文件。</li>\n<li>如果检查失败，回复失败的文件和内容。</li>\n<li>如果检查成功，回复”+LGTM by eslint”。</li>\n</ul>\n<p>例子中一些术语或属性是第一次出现，先不要管，简单查阅下文档先完成功能，后续文章再研究它们。</p>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><ul>\n<li><code>package.json</code>中存在<code>eslint</code>依赖。</li>\n<li>存在配置文件 <code>.eslintrc.js</code>。</li>\n</ul>\n<h2 id=\"基础的配置\"><a href=\"#基础的配置\" class=\"headerlink\" title=\"基础的配置\"></a>基础的配置</h2><p>写一个简单的 Job 让它先跑起来：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">pull_request</span></span><br><span class=\"line\"><span class=\"attr\">on:</span> <span class=\"string\">pull_request</span></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">eslint:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">run:</span> <span class=\"string\">echo</span> <span class=\"string\">&quot;i am eslint&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>##增量检查</p>\n<p>列出 pull request 的修改、新增的 js、ts 文件，先不用管 eslint，只打印出这些文件。</p>\n<p>TODO</p>\n<p><strong>等我学习了后续的知识，再来补充这个例子！！！</strong></p>\n<p><strong>等我学习了后续的知识，再来补充这个例子！！！</strong></p>\n<p><strong>等我学习了后续的知识，再来补充这个例子！！！</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<p>官方文档：<a href=\"https://docs.github.com/en/actions/examples/using-scripts-to-test-your-code-on-a-runner\">https://docs.github.com/en/actions/examples/using-scripts-to-test-your-code-on-a-runner</a></p>\n<p>官方描述了 3 个例子，用来检测文件中的 broken，我读书少，就依葫芦画瓢写一个 eslint 检测增量文件的功能，完成以下功能：</p>\n<ul>\n<li>pull_request 触发 workflow。</li>\n<li>使用 eslint 检查 pull request 的增量文件。</li>\n<li>如果检查失败，回复失败的文件和内容。</li>\n<li>如果检查成功，回复”+LGTM by eslint”。</li>\n</ul>\n<p>例子中一些术语或属性是第一次出现，先不要管，简单查阅下文档先完成功能，后续文章再研究它们。</p>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><ul>\n<li><code>package.json</code>中存在<code>eslint</code>依赖。</li>\n<li>存在配置文件 <code>.eslintrc.js</code>。</li>\n</ul>\n<h2 id=\"基础的配置\"><a href=\"#基础的配置\" class=\"headerlink\" title=\"基础的配置\"></a>基础的配置</h2><p>写一个简单的 Job 让它先跑起来：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">pull_request</span></span><br><span class=\"line\"><span class=\"attr\">on:</span> <span class=\"string\">pull_request</span></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">eslint:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">run:</span> <span class=\"string\">echo</span> <span class=\"string\">&quot;i am eslint&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>##增量检查</p>\n<p>列出 pull request 的修改、新增的 js、ts 文件，先不用管 eslint，只打印出这些文件。</p>\n<p>TODO</p>\n<p><strong>等我学习了后续的知识，再来补充这个例子！！！</strong></p>\n<p><strong>等我学习了后续的知识，再来补充这个例子！！！</strong></p>\n<p><strong>等我学习了后续的知识，再来补充这个例子！！！</strong></p>\n"},{"title":"4. GitHub Actions - Using workflows","url":"GitHub_Actions/using_workflows","date":"2022-07-06T16:00:00.000Z","_content":"\n官方文档：https://docs.github.com/en/actions/using-workflows/about-workflows\n\n原文很长，但随着对 Github Actions 的了解，笔记也会越来越短。\n\n## 介绍\n\n更详细介绍了 workflow 的构成，没啥特别重要点。\n\n## 触发\n\n再次复习下触发的几种情况：github、计划任务、手动。\n\n### Branches 过滤\n\n可以通过 branches 、branches-ignore 过滤或排除分支，支持 glob patterns。还可以在 branches 前面用!修饰为“非”。比如：\n\n```yaml\non:\n  pull_request:\n    branches:\n      - \"releases/**\"\n      - \"!releases/**-alpha\"\n```\n\n### Tags 过滤\n\n对于 tags 的过滤处理和 branches 是一致的，只是修改了名字为 tags、tags-ignore。\n\n### Types 过滤\n\n可以理解为事件的具体行为，比如 issue_commot 事件的 created 行为。\n\n### Paths 过滤\n\n文件路径过滤也是基本功能了，使用 paths、paths-ignore 处理，举例：\n\n```yaml\non:\n  push:\n    paths:\n      - '**.js\n```\n\n注意，一些过滤场景并不允许 a 和 a-ignore 一起使用，需要注意的。\n\n### 其他\n\n- 还可以对 input 进行参数过滤，以满足更丰富的触发条件配置。\n- 对 github 的属性，如 pull request 发起人的名字进行过滤。\n\n## 事件\n\n列举了常见的 30 几种事件，大部分事件包含多种行为。\n\n## 语法\n\n涵盖了 workflow 的大部分配置项。\n\n## 命令行\n\nactions 如何和 bash 交换变量，使用 actions/toolkit 可以简单做到。\n\n## 复用\n\n注意复用的上下文\n\n## 缓存\n\n可以缓存 npm 的依赖以节省 install 的时间，注意缓存的跨分支适用策略。\n","source":"_posts/Github Actions/4. Using workflows.md","raw":"---\ntitle: 4. GitHub Actions - Using workflows\nurl: GitHub_Actions/using_workflows\ndate: 2022-07-07\ntags:\n  - github actions\n  - ci\ncategories:\n  - [架构]\n---\n\n官方文档：https://docs.github.com/en/actions/using-workflows/about-workflows\n\n原文很长，但随着对 Github Actions 的了解，笔记也会越来越短。\n\n## 介绍\n\n更详细介绍了 workflow 的构成，没啥特别重要点。\n\n## 触发\n\n再次复习下触发的几种情况：github、计划任务、手动。\n\n### Branches 过滤\n\n可以通过 branches 、branches-ignore 过滤或排除分支，支持 glob patterns。还可以在 branches 前面用!修饰为“非”。比如：\n\n```yaml\non:\n  pull_request:\n    branches:\n      - \"releases/**\"\n      - \"!releases/**-alpha\"\n```\n\n### Tags 过滤\n\n对于 tags 的过滤处理和 branches 是一致的，只是修改了名字为 tags、tags-ignore。\n\n### Types 过滤\n\n可以理解为事件的具体行为，比如 issue_commot 事件的 created 行为。\n\n### Paths 过滤\n\n文件路径过滤也是基本功能了，使用 paths、paths-ignore 处理，举例：\n\n```yaml\non:\n  push:\n    paths:\n      - '**.js\n```\n\n注意，一些过滤场景并不允许 a 和 a-ignore 一起使用，需要注意的。\n\n### 其他\n\n- 还可以对 input 进行参数过滤，以满足更丰富的触发条件配置。\n- 对 github 的属性，如 pull request 发起人的名字进行过滤。\n\n## 事件\n\n列举了常见的 30 几种事件，大部分事件包含多种行为。\n\n## 语法\n\n涵盖了 workflow 的大部分配置项。\n\n## 命令行\n\nactions 如何和 bash 交换变量，使用 actions/toolkit 可以简单做到。\n\n## 复用\n\n注意复用的上下文\n\n## 缓存\n\n可以缓存 npm 的依赖以节省 install 的时间，注意缓存的跨分支适用策略。\n","slug":"Github Actions/4. Using workflows","published":1,"updated":"2023-07-05T07:42:53.367Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cljpf1ku60017mtrr2hpggdog","content":"<p>官方文档：<a href=\"https://docs.github.com/en/actions/using-workflows/about-workflows\">https://docs.github.com/en/actions/using-workflows/about-workflows</a></p>\n<p>原文很长，但随着对 Github Actions 的了解，笔记也会越来越短。</p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>更详细介绍了 workflow 的构成，没啥特别重要点。</p>\n<h2 id=\"触发\"><a href=\"#触发\" class=\"headerlink\" title=\"触发\"></a>触发</h2><p>再次复习下触发的几种情况：github、计划任务、手动。</p>\n<h3 id=\"Branches-过滤\"><a href=\"#Branches-过滤\" class=\"headerlink\" title=\"Branches 过滤\"></a>Branches 过滤</h3><p>可以通过 branches 、branches-ignore 过滤或排除分支，支持 glob patterns。还可以在 branches 前面用!修饰为“非”。比如：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">pull_request:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;releases/**&quot;</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;!releases/**-alpha&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Tags-过滤\"><a href=\"#Tags-过滤\" class=\"headerlink\" title=\"Tags 过滤\"></a>Tags 过滤</h3><p>对于 tags 的过滤处理和 branches 是一致的，只是修改了名字为 tags、tags-ignore。</p>\n<h3 id=\"Types-过滤\"><a href=\"#Types-过滤\" class=\"headerlink\" title=\"Types 过滤\"></a>Types 过滤</h3><p>可以理解为事件的具体行为，比如 issue_commot 事件的 created 行为。</p>\n<h3 id=\"Paths-过滤\"><a href=\"#Paths-过滤\" class=\"headerlink\" title=\"Paths 过滤\"></a>Paths 过滤</h3><p>文件路径过滤也是基本功能了，使用 paths、paths-ignore 处理，举例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">paths:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&#x27;**.js</span></span><br></pre></td></tr></table></figure>\n\n<p>注意，一些过滤场景并不允许 a 和 a-ignore 一起使用，需要注意的。</p>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><ul>\n<li>还可以对 input 进行参数过滤，以满足更丰富的触发条件配置。</li>\n<li>对 github 的属性，如 pull request 发起人的名字进行过滤。</li>\n</ul>\n<h2 id=\"事件\"><a href=\"#事件\" class=\"headerlink\" title=\"事件\"></a>事件</h2><p>列举了常见的 30 几种事件，大部分事件包含多种行为。</p>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><p>涵盖了 workflow 的大部分配置项。</p>\n<h2 id=\"命令行\"><a href=\"#命令行\" class=\"headerlink\" title=\"命令行\"></a>命令行</h2><p>actions 如何和 bash 交换变量，使用 actions&#x2F;toolkit 可以简单做到。</p>\n<h2 id=\"复用\"><a href=\"#复用\" class=\"headerlink\" title=\"复用\"></a>复用</h2><p>注意复用的上下文</p>\n<h2 id=\"缓存\"><a href=\"#缓存\" class=\"headerlink\" title=\"缓存\"></a>缓存</h2><p>可以缓存 npm 的依赖以节省 install 的时间，注意缓存的跨分支适用策略。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>官方文档：<a href=\"https://docs.github.com/en/actions/using-workflows/about-workflows\">https://docs.github.com/en/actions/using-workflows/about-workflows</a></p>\n<p>原文很长，但随着对 Github Actions 的了解，笔记也会越来越短。</p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>更详细介绍了 workflow 的构成，没啥特别重要点。</p>\n<h2 id=\"触发\"><a href=\"#触发\" class=\"headerlink\" title=\"触发\"></a>触发</h2><p>再次复习下触发的几种情况：github、计划任务、手动。</p>\n<h3 id=\"Branches-过滤\"><a href=\"#Branches-过滤\" class=\"headerlink\" title=\"Branches 过滤\"></a>Branches 过滤</h3><p>可以通过 branches 、branches-ignore 过滤或排除分支，支持 glob patterns。还可以在 branches 前面用!修饰为“非”。比如：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">pull_request:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;releases/**&quot;</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;!releases/**-alpha&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Tags-过滤\"><a href=\"#Tags-过滤\" class=\"headerlink\" title=\"Tags 过滤\"></a>Tags 过滤</h3><p>对于 tags 的过滤处理和 branches 是一致的，只是修改了名字为 tags、tags-ignore。</p>\n<h3 id=\"Types-过滤\"><a href=\"#Types-过滤\" class=\"headerlink\" title=\"Types 过滤\"></a>Types 过滤</h3><p>可以理解为事件的具体行为，比如 issue_commot 事件的 created 行为。</p>\n<h3 id=\"Paths-过滤\"><a href=\"#Paths-过滤\" class=\"headerlink\" title=\"Paths 过滤\"></a>Paths 过滤</h3><p>文件路径过滤也是基本功能了，使用 paths、paths-ignore 处理，举例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">paths:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&#x27;**.js</span></span><br></pre></td></tr></table></figure>\n\n<p>注意，一些过滤场景并不允许 a 和 a-ignore 一起使用，需要注意的。</p>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><ul>\n<li>还可以对 input 进行参数过滤，以满足更丰富的触发条件配置。</li>\n<li>对 github 的属性，如 pull request 发起人的名字进行过滤。</li>\n</ul>\n<h2 id=\"事件\"><a href=\"#事件\" class=\"headerlink\" title=\"事件\"></a>事件</h2><p>列举了常见的 30 几种事件，大部分事件包含多种行为。</p>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><p>涵盖了 workflow 的大部分配置项。</p>\n<h2 id=\"命令行\"><a href=\"#命令行\" class=\"headerlink\" title=\"命令行\"></a>命令行</h2><p>actions 如何和 bash 交换变量，使用 actions&#x2F;toolkit 可以简单做到。</p>\n<h2 id=\"复用\"><a href=\"#复用\" class=\"headerlink\" title=\"复用\"></a>复用</h2><p>注意复用的上下文</p>\n<h2 id=\"缓存\"><a href=\"#缓存\" class=\"headerlink\" title=\"缓存\"></a>缓存</h2><p>可以缓存 npm 的依赖以节省 install 的时间，注意缓存的跨分支适用策略。</p>\n"},{"title":"2. GitHub Actions - Learn","url":"GitHub_Actions/learn","date":"2022-07-04T16:00:00.000Z","_content":"\n官方文档：https://docs.github.com/en/actions/learn-github-actions/understanding-github-actions\n\n官方文档有点长，阅读了两天，容易让人阅读瞌睡，除了要熟知术语部分，其他部分看一遍知道有这些东西就行了，回头使用的时候翻看官方文档即可。\n\n## 理解 GitHub Actions 和术语\n\nGitHub Actions 就是通过事件触发工作流，在特定机器中执行一连串工作，每个工作中执行若干个步骤的脚本。\n\n使用人类行为来举例，我说：“老婆，你去炒个青椒炒肉丝吧。”\n\n- 口头说话（Events）会触发老婆的工作流（Workflows）：炒青椒肉丝。\n- 工作流包含了两个工作（Jobs）：配菜、炒菜。\n- 配菜工作包含多个步骤（Steps）：清洗青椒、切青椒丝、清洗猪肉、切猪肉丝。\n- 老婆有一个绞肉机（Actions），它可以完成切猪肉丝的工作而不需要关注细节。\n\n它包含了下面几个重要的术语。\n\n### Workflows（工作流）\n\n项目有若干个工作流，它们在不同的事件时机触发。比如，口头说话触发炒青椒肉丝。\n\n工作流还可以互相引用。比如，做一顿晚饭工作流，包含了炒青椒肉丝工作流。\n\n### Events（事件）\n\nGithub 提供了一系列触发工作流的事件，比如发起了 pull request，create issue，push commit。\n\n它还包括两种特殊的事件：\n\n- 手动触发，比如你想执行工作流看看全量 eslint 检测结果。\n- 计划任务，比如你想每月 30 号看看全量 eslint 检测结果。\n\n### Jobs（工作）\n\nWorkflows 由多个 Jobs 组成。\n\n每个 Job 运行在**同一机器上**，执行很多步骤的脚本，脚本可以是自定义的 shell（比如自己切肉丝，要关注细节：使用什么刀，每个肉丝有多细），也可以是封装好的 Actions（比如绞肉机）。\n\n**步骤按顺序执行**，可以共享数据，比如切青椒的步骤，可以读取到青椒清洗的农药残留数据。\n\n**工作还可以依赖**，默认情况下，工作并行执行，但有些场景工作是依赖的，比如炒菜工作，要依赖于配菜工作的完成。\n\n### Actions（脚本动作封装）\n\n顾名思义，就是将通用的动作封装起来，方便整个宇宙的程序员去使用。比如绞肉机就是将切肉丝的动作封装了起来。\n\n可以在 Github Marketplace 中找到和分享 Actions.\n\n### Runners（运行的机器）\n\n工作流不能凭空执行，它也是运行在机器上的，它可以是虚拟机、docker 容器。Github 提供了 Ubuntu Linux、Microsoft Windows、MacOS 这几种机器来执行工作流，注意一个限制：**一个机器同时只能执行一个 Job**。\n\n如果官方的机器不能满足你，也可以自动自己的机器来跑工作流，后续会讲到。\n\n## 使用 Actions\n\n上面说到 Actions 是脚本的封装，它可以是社区市场中的 Actions，也可以是自定义 Actions，甚至是一个 Docker 镜像。\n\n### Marketplace 方式\n\nGithub 提供了界面操作，让我们可以方便的在工作流中维护 Actions，只要我们在浏览器中编辑 yml 文件，右侧就出现了 Actions 市场，可以点开某个 Actions，查看它的详细配置。\n\n![](https://cdn.jsdelivr.net/gh/taoliujun/taoliujun.github.io/assets/202306281126235.png)\n​\n![](https://cdn.jsdelivr.net/gh/taoliujun/taoliujun.github.io/assets/202306281127958.png)\n\n对照着 Actions 的文档，我在 Workflow 中插入 node。现在，我的配置文件长这样：\n\n```yaml\nname: lint\non: [push]\njobs:\n  eslint:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check out repository code\n        uses: actions/checkout@v3\n      - name: use node\n        uses: actions/setup-node@v3.3.0\n        with:\n          node-version: latest\n      - run: node -v\n```\n\n然后，查看执行结果。\n​\n![](https://cdn.jsdelivr.net/gh/taoliujun/taoliujun.github.io/assets/202306281127692.png)\n\n### 自己的 Actions\n\n还可以在自己的仓库里添加 Actions，这里就贴官方原例子了。\n\n```shell\n|-- root (repository)\n|   |__ .github\n|       └── workflows\n|           └── my-first-workflow.yml\n|       └── actions\n|           |__ hello-world-action\n|               └── action.yml\n```\n\nExample workflow file:\n\n```yaml\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      # This step checks out a copy of your repository.\n      - uses: actions/checkout@v3\n      # This step references the directory that contains the action.\n      - uses: ./.github/actions/hello-world-action\n```\n\n### 公共的 Actions\n\n```yaml\nuses: actions/setup-node@v3\n```\n\n使用其他 Github 仓库的 Actions 就是如此简单，我们常使用的 actions/\\*\\*\\*，其实也属于公共仓库，它们是由官方维护的一组 Actions，比较稳定。点击此处可以看到官方的 Actions。\n\n### Docker 镜像\n\n如果 Runners 和开源 Actions 都不能满足你，可以搞 docker 来执行 Workflows。\n\n因本人的 docker 水平属于“哇，我能启动 docker，我真厉害”，就不展开讲了。\n\n### 不同版本的 Actions\n\nActions 本质上是仓库里的文件，它会有版本区分，我们有好几种方法使用它：\n\n```yaml\n# 使用tag\nuses: actions/javascript-action@v1.0.1\n# 使用commitID\nuses: actions/javascript-action@172239021f7ba04fe7327647b213799853a9eb89\n# 使用branch\nuses: actions/javascript-action@main\n```\n\n## 基本特性\n\n这部分文档看的云里雾里的，讲了一些如何使用变量，如何在 Jobs 里共享数据，不知道这些内容出现在这里的目的是什么，略过。\n\n## 表达式\n\n支持在配置中使用表达式，我简单的记录了下，实际使用需要参照官方文档，它包含了以下。\n\n### 变量\n\n支持`boolean`，`null`，`number`，`string` 类型。如下：\n\n```yaml\nenv:\n  myNull: ${{ null }}\n  myBoolean: ${{ false }}\n  myIntegerNumber: ${{ 711 }}\n  myString: Mona the Octocat\n  myStringInBraces: ${{ 'It''s open source!' }}\n```\n\n### 操作符\n\n一些如值比较、逻辑与、逻辑或的操作，不一一列举了。\n\n注意不是强类型的比较，有一些值转换的逻辑。\n\n### 内置方法\n\n提供了一些内置方法辅助表达式，比如 `contains` 判断是否包含某个字符，不一一列举了。\n\n### 状态处理\n\nJobs 的每个步骤会按顺序执行，我们可以在某个步骤中加入对“已经执行的步骤”的状态判断，来决定是否要执行当前步骤。比如，只有青椒清洗步骤成功了，才执行青椒切丝步骤。举例：\n\n```yaml\nsteps:\n  ...\n  # 前面的步骤都执行成功了，再执行该步骤\n  - name: The job has succeeded\n    if: ${{ success() }}\n```\n\n它还有以下几种状态结果：\n\n- **always**，只要执行了\n- **success**，执行成功了\n- **cancelled**，执行取消了\n- **failure**，执行失败了\n\n## 上下文（重要）\n\n上下文指工作流运行中可以访问的属性，你可以在**表达式中**访问上下文，比如访问当前仓库的地址`github.repositoryUrl`。它是**job 串起来的重要保障**。\n\n它提供了一组模块的上下文：github、env、job、steps、runner、needs 等等。\n\n如下演示了一个简单的上下文访问：\n\n```yaml\nname: CI\non: push\njobs:\n  prod-check:\n    if: ${{ github.ref == 'refs/heads/main' }}\n    runs-on: ubuntu-latest\n    steps:\n      - run: echo \"hello ${{ github.actor }}, branch is $GITHUB_REF\"\n```\n\n重要点：\n\n- 在不同的节点，上下文的可访问性有所不同，文档贴出了表格，这在使用的时候要注意。\n- env 由内往外覆盖\n\n## 环境变量\n\n还可以在 Workflows、Jobs、Steps 中设置和访问环境变量。\n\n```yaml\nname: lint\non: [push]\nenv:\n  YOUR_NAME: wang\njobs:\n  eslint:\n    runs-on: ubuntu-latest\n    env:\n      YOUR_SEX: boy\n    steps:\n      - name: test\n        env:\n          YOUR_AGE: 18\n        run: echo \"Hello, ${{ env.YOUR_NAME }}, your sex is $YOUR_SEX, your age is $YOUR_AGE\"\n```\n\n也提供一系列系统环境变量供访问，注意避开同名。\n\n## 收费和限制\n\n略\n","source":"_posts/Github Actions/2. Learn GitHub Actions.md","raw":"---\ntitle: 2. GitHub Actions - Learn\nurl: GitHub_Actions/learn\ndate: 2022-07-05\ntags:\n  - github actions\n  - ci\ncategories:\n  - [架构]\n---\n\n官方文档：https://docs.github.com/en/actions/learn-github-actions/understanding-github-actions\n\n官方文档有点长，阅读了两天，容易让人阅读瞌睡，除了要熟知术语部分，其他部分看一遍知道有这些东西就行了，回头使用的时候翻看官方文档即可。\n\n## 理解 GitHub Actions 和术语\n\nGitHub Actions 就是通过事件触发工作流，在特定机器中执行一连串工作，每个工作中执行若干个步骤的脚本。\n\n使用人类行为来举例，我说：“老婆，你去炒个青椒炒肉丝吧。”\n\n- 口头说话（Events）会触发老婆的工作流（Workflows）：炒青椒肉丝。\n- 工作流包含了两个工作（Jobs）：配菜、炒菜。\n- 配菜工作包含多个步骤（Steps）：清洗青椒、切青椒丝、清洗猪肉、切猪肉丝。\n- 老婆有一个绞肉机（Actions），它可以完成切猪肉丝的工作而不需要关注细节。\n\n它包含了下面几个重要的术语。\n\n### Workflows（工作流）\n\n项目有若干个工作流，它们在不同的事件时机触发。比如，口头说话触发炒青椒肉丝。\n\n工作流还可以互相引用。比如，做一顿晚饭工作流，包含了炒青椒肉丝工作流。\n\n### Events（事件）\n\nGithub 提供了一系列触发工作流的事件，比如发起了 pull request，create issue，push commit。\n\n它还包括两种特殊的事件：\n\n- 手动触发，比如你想执行工作流看看全量 eslint 检测结果。\n- 计划任务，比如你想每月 30 号看看全量 eslint 检测结果。\n\n### Jobs（工作）\n\nWorkflows 由多个 Jobs 组成。\n\n每个 Job 运行在**同一机器上**，执行很多步骤的脚本，脚本可以是自定义的 shell（比如自己切肉丝，要关注细节：使用什么刀，每个肉丝有多细），也可以是封装好的 Actions（比如绞肉机）。\n\n**步骤按顺序执行**，可以共享数据，比如切青椒的步骤，可以读取到青椒清洗的农药残留数据。\n\n**工作还可以依赖**，默认情况下，工作并行执行，但有些场景工作是依赖的，比如炒菜工作，要依赖于配菜工作的完成。\n\n### Actions（脚本动作封装）\n\n顾名思义，就是将通用的动作封装起来，方便整个宇宙的程序员去使用。比如绞肉机就是将切肉丝的动作封装了起来。\n\n可以在 Github Marketplace 中找到和分享 Actions.\n\n### Runners（运行的机器）\n\n工作流不能凭空执行，它也是运行在机器上的，它可以是虚拟机、docker 容器。Github 提供了 Ubuntu Linux、Microsoft Windows、MacOS 这几种机器来执行工作流，注意一个限制：**一个机器同时只能执行一个 Job**。\n\n如果官方的机器不能满足你，也可以自动自己的机器来跑工作流，后续会讲到。\n\n## 使用 Actions\n\n上面说到 Actions 是脚本的封装，它可以是社区市场中的 Actions，也可以是自定义 Actions，甚至是一个 Docker 镜像。\n\n### Marketplace 方式\n\nGithub 提供了界面操作，让我们可以方便的在工作流中维护 Actions，只要我们在浏览器中编辑 yml 文件，右侧就出现了 Actions 市场，可以点开某个 Actions，查看它的详细配置。\n\n![](https://cdn.jsdelivr.net/gh/taoliujun/taoliujun.github.io/assets/202306281126235.png)\n​\n![](https://cdn.jsdelivr.net/gh/taoliujun/taoliujun.github.io/assets/202306281127958.png)\n\n对照着 Actions 的文档，我在 Workflow 中插入 node。现在，我的配置文件长这样：\n\n```yaml\nname: lint\non: [push]\njobs:\n  eslint:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check out repository code\n        uses: actions/checkout@v3\n      - name: use node\n        uses: actions/setup-node@v3.3.0\n        with:\n          node-version: latest\n      - run: node -v\n```\n\n然后，查看执行结果。\n​\n![](https://cdn.jsdelivr.net/gh/taoliujun/taoliujun.github.io/assets/202306281127692.png)\n\n### 自己的 Actions\n\n还可以在自己的仓库里添加 Actions，这里就贴官方原例子了。\n\n```shell\n|-- root (repository)\n|   |__ .github\n|       └── workflows\n|           └── my-first-workflow.yml\n|       └── actions\n|           |__ hello-world-action\n|               └── action.yml\n```\n\nExample workflow file:\n\n```yaml\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      # This step checks out a copy of your repository.\n      - uses: actions/checkout@v3\n      # This step references the directory that contains the action.\n      - uses: ./.github/actions/hello-world-action\n```\n\n### 公共的 Actions\n\n```yaml\nuses: actions/setup-node@v3\n```\n\n使用其他 Github 仓库的 Actions 就是如此简单，我们常使用的 actions/\\*\\*\\*，其实也属于公共仓库，它们是由官方维护的一组 Actions，比较稳定。点击此处可以看到官方的 Actions。\n\n### Docker 镜像\n\n如果 Runners 和开源 Actions 都不能满足你，可以搞 docker 来执行 Workflows。\n\n因本人的 docker 水平属于“哇，我能启动 docker，我真厉害”，就不展开讲了。\n\n### 不同版本的 Actions\n\nActions 本质上是仓库里的文件，它会有版本区分，我们有好几种方法使用它：\n\n```yaml\n# 使用tag\nuses: actions/javascript-action@v1.0.1\n# 使用commitID\nuses: actions/javascript-action@172239021f7ba04fe7327647b213799853a9eb89\n# 使用branch\nuses: actions/javascript-action@main\n```\n\n## 基本特性\n\n这部分文档看的云里雾里的，讲了一些如何使用变量，如何在 Jobs 里共享数据，不知道这些内容出现在这里的目的是什么，略过。\n\n## 表达式\n\n支持在配置中使用表达式，我简单的记录了下，实际使用需要参照官方文档，它包含了以下。\n\n### 变量\n\n支持`boolean`，`null`，`number`，`string` 类型。如下：\n\n```yaml\nenv:\n  myNull: ${{ null }}\n  myBoolean: ${{ false }}\n  myIntegerNumber: ${{ 711 }}\n  myString: Mona the Octocat\n  myStringInBraces: ${{ 'It''s open source!' }}\n```\n\n### 操作符\n\n一些如值比较、逻辑与、逻辑或的操作，不一一列举了。\n\n注意不是强类型的比较，有一些值转换的逻辑。\n\n### 内置方法\n\n提供了一些内置方法辅助表达式，比如 `contains` 判断是否包含某个字符，不一一列举了。\n\n### 状态处理\n\nJobs 的每个步骤会按顺序执行，我们可以在某个步骤中加入对“已经执行的步骤”的状态判断，来决定是否要执行当前步骤。比如，只有青椒清洗步骤成功了，才执行青椒切丝步骤。举例：\n\n```yaml\nsteps:\n  ...\n  # 前面的步骤都执行成功了，再执行该步骤\n  - name: The job has succeeded\n    if: ${{ success() }}\n```\n\n它还有以下几种状态结果：\n\n- **always**，只要执行了\n- **success**，执行成功了\n- **cancelled**，执行取消了\n- **failure**，执行失败了\n\n## 上下文（重要）\n\n上下文指工作流运行中可以访问的属性，你可以在**表达式中**访问上下文，比如访问当前仓库的地址`github.repositoryUrl`。它是**job 串起来的重要保障**。\n\n它提供了一组模块的上下文：github、env、job、steps、runner、needs 等等。\n\n如下演示了一个简单的上下文访问：\n\n```yaml\nname: CI\non: push\njobs:\n  prod-check:\n    if: ${{ github.ref == 'refs/heads/main' }}\n    runs-on: ubuntu-latest\n    steps:\n      - run: echo \"hello ${{ github.actor }}, branch is $GITHUB_REF\"\n```\n\n重要点：\n\n- 在不同的节点，上下文的可访问性有所不同，文档贴出了表格，这在使用的时候要注意。\n- env 由内往外覆盖\n\n## 环境变量\n\n还可以在 Workflows、Jobs、Steps 中设置和访问环境变量。\n\n```yaml\nname: lint\non: [push]\nenv:\n  YOUR_NAME: wang\njobs:\n  eslint:\n    runs-on: ubuntu-latest\n    env:\n      YOUR_SEX: boy\n    steps:\n      - name: test\n        env:\n          YOUR_AGE: 18\n        run: echo \"Hello, ${{ env.YOUR_NAME }}, your sex is $YOUR_SEX, your age is $YOUR_AGE\"\n```\n\n也提供一系列系统环境变量供访问，注意避开同名。\n\n## 收费和限制\n\n略\n","slug":"Github Actions/2. Learn GitHub Actions","published":1,"updated":"2023-07-05T07:42:45.991Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cljpf1ku7001bmtrrclmbgbfh","content":"<p>官方文档：<a href=\"https://docs.github.com/en/actions/learn-github-actions/understanding-github-actions\">https://docs.github.com/en/actions/learn-github-actions/understanding-github-actions</a></p>\n<p>官方文档有点长，阅读了两天，容易让人阅读瞌睡，除了要熟知术语部分，其他部分看一遍知道有这些东西就行了，回头使用的时候翻看官方文档即可。</p>\n<h2 id=\"理解-GitHub-Actions-和术语\"><a href=\"#理解-GitHub-Actions-和术语\" class=\"headerlink\" title=\"理解 GitHub Actions 和术语\"></a>理解 GitHub Actions 和术语</h2><p>GitHub Actions 就是通过事件触发工作流，在特定机器中执行一连串工作，每个工作中执行若干个步骤的脚本。</p>\n<p>使用人类行为来举例，我说：“老婆，你去炒个青椒炒肉丝吧。”</p>\n<ul>\n<li>口头说话（Events）会触发老婆的工作流（Workflows）：炒青椒肉丝。</li>\n<li>工作流包含了两个工作（Jobs）：配菜、炒菜。</li>\n<li>配菜工作包含多个步骤（Steps）：清洗青椒、切青椒丝、清洗猪肉、切猪肉丝。</li>\n<li>老婆有一个绞肉机（Actions），它可以完成切猪肉丝的工作而不需要关注细节。</li>\n</ul>\n<p>它包含了下面几个重要的术语。</p>\n<h3 id=\"Workflows（工作流）\"><a href=\"#Workflows（工作流）\" class=\"headerlink\" title=\"Workflows（工作流）\"></a>Workflows（工作流）</h3><p>项目有若干个工作流，它们在不同的事件时机触发。比如，口头说话触发炒青椒肉丝。</p>\n<p>工作流还可以互相引用。比如，做一顿晚饭工作流，包含了炒青椒肉丝工作流。</p>\n<h3 id=\"Events（事件）\"><a href=\"#Events（事件）\" class=\"headerlink\" title=\"Events（事件）\"></a>Events（事件）</h3><p>Github 提供了一系列触发工作流的事件，比如发起了 pull request，create issue，push commit。</p>\n<p>它还包括两种特殊的事件：</p>\n<ul>\n<li>手动触发，比如你想执行工作流看看全量 eslint 检测结果。</li>\n<li>计划任务，比如你想每月 30 号看看全量 eslint 检测结果。</li>\n</ul>\n<h3 id=\"Jobs（工作）\"><a href=\"#Jobs（工作）\" class=\"headerlink\" title=\"Jobs（工作）\"></a>Jobs（工作）</h3><p>Workflows 由多个 Jobs 组成。</p>\n<p>每个 Job 运行在<strong>同一机器上</strong>，执行很多步骤的脚本，脚本可以是自定义的 shell（比如自己切肉丝，要关注细节：使用什么刀，每个肉丝有多细），也可以是封装好的 Actions（比如绞肉机）。</p>\n<p><strong>步骤按顺序执行</strong>，可以共享数据，比如切青椒的步骤，可以读取到青椒清洗的农药残留数据。</p>\n<p><strong>工作还可以依赖</strong>，默认情况下，工作并行执行，但有些场景工作是依赖的，比如炒菜工作，要依赖于配菜工作的完成。</p>\n<h3 id=\"Actions（脚本动作封装）\"><a href=\"#Actions（脚本动作封装）\" class=\"headerlink\" title=\"Actions（脚本动作封装）\"></a>Actions（脚本动作封装）</h3><p>顾名思义，就是将通用的动作封装起来，方便整个宇宙的程序员去使用。比如绞肉机就是将切肉丝的动作封装了起来。</p>\n<p>可以在 Github Marketplace 中找到和分享 Actions.</p>\n<h3 id=\"Runners（运行的机器）\"><a href=\"#Runners（运行的机器）\" class=\"headerlink\" title=\"Runners（运行的机器）\"></a>Runners（运行的机器）</h3><p>工作流不能凭空执行，它也是运行在机器上的，它可以是虚拟机、docker 容器。Github 提供了 Ubuntu Linux、Microsoft Windows、MacOS 这几种机器来执行工作流，注意一个限制：<strong>一个机器同时只能执行一个 Job</strong>。</p>\n<p>如果官方的机器不能满足你，也可以自动自己的机器来跑工作流，后续会讲到。</p>\n<h2 id=\"使用-Actions\"><a href=\"#使用-Actions\" class=\"headerlink\" title=\"使用 Actions\"></a>使用 Actions</h2><p>上面说到 Actions 是脚本的封装，它可以是社区市场中的 Actions，也可以是自定义 Actions，甚至是一个 Docker 镜像。</p>\n<h3 id=\"Marketplace-方式\"><a href=\"#Marketplace-方式\" class=\"headerlink\" title=\"Marketplace 方式\"></a>Marketplace 方式</h3><p>Github 提供了界面操作，让我们可以方便的在工作流中维护 Actions，只要我们在浏览器中编辑 yml 文件，右侧就出现了 Actions 市场，可以点开某个 Actions，查看它的详细配置。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/taoliujun/taoliujun.github.io/assets/202306281126235.png\"><br>​<br><img src=\"https://cdn.jsdelivr.net/gh/taoliujun/taoliujun.github.io/assets/202306281127958.png\"></p>\n<p>对照着 Actions 的文档，我在 Workflow 中插入 node。现在，我的配置文件长这样：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">lint</span></span><br><span class=\"line\"><span class=\"attr\">on:</span> [<span class=\"string\">push</span>]</span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">eslint:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Check</span> <span class=\"string\">out</span> <span class=\"string\">repository</span> <span class=\"string\">code</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v3</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">use</span> <span class=\"string\">node</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v3.3.0</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">node-version:</span> <span class=\"string\">latest</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">run:</span> <span class=\"string\">node</span> <span class=\"string\">-v</span></span><br></pre></td></tr></table></figure>\n\n<p>然后，查看执行结果。<br>​<br><img src=\"https://cdn.jsdelivr.net/gh/taoliujun/taoliujun.github.io/assets/202306281127692.png\"></p>\n<h3 id=\"自己的-Actions\"><a href=\"#自己的-Actions\" class=\"headerlink\" title=\"自己的 Actions\"></a>自己的 Actions</h3><p>还可以在自己的仓库里添加 Actions，这里就贴官方原例子了。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|-- root (repository)</span><br><span class=\"line\">|   |__ .github</span><br><span class=\"line\">|       └── workflows</span><br><span class=\"line\">|           └── my-first-workflow.yml</span><br><span class=\"line\">|       └── actions</span><br><span class=\"line\">|           |__ hello-world-action</span><br><span class=\"line\">|               └── action.yml</span><br></pre></td></tr></table></figure>\n\n<p>Example workflow file:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">build:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"comment\"># This step checks out a copy of your repository.</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v3</span></span><br><span class=\"line\">      <span class=\"comment\"># This step references the directory that contains the action.</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">uses:</span> <span class=\"string\">./.github/actions/hello-world-action</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"公共的-Actions\"><a href=\"#公共的-Actions\" class=\"headerlink\" title=\"公共的 Actions\"></a>公共的 Actions</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v3</span></span><br></pre></td></tr></table></figure>\n\n<p>使用其他 Github 仓库的 Actions 就是如此简单，我们常使用的 actions&#x2F;***，其实也属于公共仓库，它们是由官方维护的一组 Actions，比较稳定。点击此处可以看到官方的 Actions。</p>\n<h3 id=\"Docker-镜像\"><a href=\"#Docker-镜像\" class=\"headerlink\" title=\"Docker 镜像\"></a>Docker 镜像</h3><p>如果 Runners 和开源 Actions 都不能满足你，可以搞 docker 来执行 Workflows。</p>\n<p>因本人的 docker 水平属于“哇，我能启动 docker，我真厉害”，就不展开讲了。</p>\n<h3 id=\"不同版本的-Actions\"><a href=\"#不同版本的-Actions\" class=\"headerlink\" title=\"不同版本的 Actions\"></a>不同版本的 Actions</h3><p>Actions 本质上是仓库里的文件，它会有版本区分，我们有好几种方法使用它：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用tag</span></span><br><span class=\"line\"><span class=\"attr\">uses:</span> <span class=\"string\">actions/javascript-action@v1.0.1</span></span><br><span class=\"line\"><span class=\"comment\"># 使用commitID</span></span><br><span class=\"line\"><span class=\"attr\">uses:</span> <span class=\"string\">actions/javascript-action@172239021f7ba04fe7327647b213799853a9eb89</span></span><br><span class=\"line\"><span class=\"comment\"># 使用branch</span></span><br><span class=\"line\"><span class=\"attr\">uses:</span> <span class=\"string\">actions/javascript-action@main</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"基本特性\"><a href=\"#基本特性\" class=\"headerlink\" title=\"基本特性\"></a>基本特性</h2><p>这部分文档看的云里雾里的，讲了一些如何使用变量，如何在 Jobs 里共享数据，不知道这些内容出现在这里的目的是什么，略过。</p>\n<h2 id=\"表达式\"><a href=\"#表达式\" class=\"headerlink\" title=\"表达式\"></a>表达式</h2><p>支持在配置中使用表达式，我简单的记录了下，实际使用需要参照官方文档，它包含了以下。</p>\n<h3 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h3><p>支持<code>boolean</code>，<code>null</code>，<code>number</code>，<code>string</code> 类型。如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">env:</span></span><br><span class=\"line\">  <span class=\"attr\">myNull:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"literal\">null</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">  <span class=\"attr\">myBoolean:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"literal\">false</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">  <span class=\"attr\">myIntegerNumber:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"number\">711</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">  <span class=\"attr\">myString:</span> <span class=\"string\">Mona</span> <span class=\"string\">the</span> <span class=\"string\">Octocat</span></span><br><span class=\"line\">  <span class=\"attr\">myStringInBraces:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">&#x27;It&#x27;</span><span class=\"string\">&#x27;s open source!&#x27;</span> <span class=\"string\">&#125;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"操作符\"><a href=\"#操作符\" class=\"headerlink\" title=\"操作符\"></a>操作符</h3><p>一些如值比较、逻辑与、逻辑或的操作，不一一列举了。</p>\n<p>注意不是强类型的比较，有一些值转换的逻辑。</p>\n<h3 id=\"内置方法\"><a href=\"#内置方法\" class=\"headerlink\" title=\"内置方法\"></a>内置方法</h3><p>提供了一些内置方法辅助表达式，比如 <code>contains</code> 判断是否包含某个字符，不一一列举了。</p>\n<h3 id=\"状态处理\"><a href=\"#状态处理\" class=\"headerlink\" title=\"状态处理\"></a>状态处理</h3><p>Jobs 的每个步骤会按顺序执行，我们可以在某个步骤中加入对“已经执行的步骤”的状态判断，来决定是否要执行当前步骤。比如，只有青椒清洗步骤成功了，才执行青椒切丝步骤。举例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">steps:</span></span><br><span class=\"line\">  <span class=\"string\">...</span></span><br><span class=\"line\">  <span class=\"comment\"># 前面的步骤都执行成功了，再执行该步骤</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">The</span> <span class=\"string\">job</span> <span class=\"string\">has</span> <span class=\"string\">succeeded</span></span><br><span class=\"line\">    <span class=\"attr\">if:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">success()</span> <span class=\"string\">&#125;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>它还有以下几种状态结果：</p>\n<ul>\n<li><strong>always</strong>，只要执行了</li>\n<li><strong>success</strong>，执行成功了</li>\n<li><strong>cancelled</strong>，执行取消了</li>\n<li><strong>failure</strong>，执行失败了</li>\n</ul>\n<h2 id=\"上下文（重要）\"><a href=\"#上下文（重要）\" class=\"headerlink\" title=\"上下文（重要）\"></a>上下文（重要）</h2><p>上下文指工作流运行中可以访问的属性，你可以在<strong>表达式中</strong>访问上下文，比如访问当前仓库的地址<code>github.repositoryUrl</code>。它是<strong>job 串起来的重要保障</strong>。</p>\n<p>它提供了一组模块的上下文：github、env、job、steps、runner、needs 等等。</p>\n<p>如下演示了一个简单的上下文访问：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">CI</span></span><br><span class=\"line\"><span class=\"attr\">on:</span> <span class=\"string\">push</span></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">prod-check:</span></span><br><span class=\"line\">    <span class=\"attr\">if:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">github.ref</span> <span class=\"string\">==</span> <span class=\"string\">&#x27;refs/heads/main&#x27;</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">run:</span> <span class=\"string\">echo</span> <span class=\"string\">&quot;hello $<span class=\"template-variable\">&#123;&#123; github.actor &#125;&#125;</span>, branch is $GITHUB_REF&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>重要点：</p>\n<ul>\n<li>在不同的节点，上下文的可访问性有所不同，文档贴出了表格，这在使用的时候要注意。</li>\n<li>env 由内往外覆盖</li>\n</ul>\n<h2 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h2><p>还可以在 Workflows、Jobs、Steps 中设置和访问环境变量。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">lint</span></span><br><span class=\"line\"><span class=\"attr\">on:</span> [<span class=\"string\">push</span>]</span><br><span class=\"line\"><span class=\"attr\">env:</span></span><br><span class=\"line\">  <span class=\"attr\">YOUR_NAME:</span> <span class=\"string\">wang</span></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">eslint:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">env:</span></span><br><span class=\"line\">      <span class=\"attr\">YOUR_SEX:</span> <span class=\"string\">boy</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">test</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"attr\">YOUR_AGE:</span> <span class=\"number\">18</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">echo</span> <span class=\"string\">&quot;Hello, $<span class=\"template-variable\">&#123;&#123; env.YOUR_NAME &#125;&#125;</span>, your sex is $YOUR_SEX, your age is $YOUR_AGE&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>也提供一系列系统环境变量供访问，注意避开同名。</p>\n<h2 id=\"收费和限制\"><a href=\"#收费和限制\" class=\"headerlink\" title=\"收费和限制\"></a>收费和限制</h2><p>略</p>\n","site":{"data":{}},"excerpt":"","more":"<p>官方文档：<a href=\"https://docs.github.com/en/actions/learn-github-actions/understanding-github-actions\">https://docs.github.com/en/actions/learn-github-actions/understanding-github-actions</a></p>\n<p>官方文档有点长，阅读了两天，容易让人阅读瞌睡，除了要熟知术语部分，其他部分看一遍知道有这些东西就行了，回头使用的时候翻看官方文档即可。</p>\n<h2 id=\"理解-GitHub-Actions-和术语\"><a href=\"#理解-GitHub-Actions-和术语\" class=\"headerlink\" title=\"理解 GitHub Actions 和术语\"></a>理解 GitHub Actions 和术语</h2><p>GitHub Actions 就是通过事件触发工作流，在特定机器中执行一连串工作，每个工作中执行若干个步骤的脚本。</p>\n<p>使用人类行为来举例，我说：“老婆，你去炒个青椒炒肉丝吧。”</p>\n<ul>\n<li>口头说话（Events）会触发老婆的工作流（Workflows）：炒青椒肉丝。</li>\n<li>工作流包含了两个工作（Jobs）：配菜、炒菜。</li>\n<li>配菜工作包含多个步骤（Steps）：清洗青椒、切青椒丝、清洗猪肉、切猪肉丝。</li>\n<li>老婆有一个绞肉机（Actions），它可以完成切猪肉丝的工作而不需要关注细节。</li>\n</ul>\n<p>它包含了下面几个重要的术语。</p>\n<h3 id=\"Workflows（工作流）\"><a href=\"#Workflows（工作流）\" class=\"headerlink\" title=\"Workflows（工作流）\"></a>Workflows（工作流）</h3><p>项目有若干个工作流，它们在不同的事件时机触发。比如，口头说话触发炒青椒肉丝。</p>\n<p>工作流还可以互相引用。比如，做一顿晚饭工作流，包含了炒青椒肉丝工作流。</p>\n<h3 id=\"Events（事件）\"><a href=\"#Events（事件）\" class=\"headerlink\" title=\"Events（事件）\"></a>Events（事件）</h3><p>Github 提供了一系列触发工作流的事件，比如发起了 pull request，create issue，push commit。</p>\n<p>它还包括两种特殊的事件：</p>\n<ul>\n<li>手动触发，比如你想执行工作流看看全量 eslint 检测结果。</li>\n<li>计划任务，比如你想每月 30 号看看全量 eslint 检测结果。</li>\n</ul>\n<h3 id=\"Jobs（工作）\"><a href=\"#Jobs（工作）\" class=\"headerlink\" title=\"Jobs（工作）\"></a>Jobs（工作）</h3><p>Workflows 由多个 Jobs 组成。</p>\n<p>每个 Job 运行在<strong>同一机器上</strong>，执行很多步骤的脚本，脚本可以是自定义的 shell（比如自己切肉丝，要关注细节：使用什么刀，每个肉丝有多细），也可以是封装好的 Actions（比如绞肉机）。</p>\n<p><strong>步骤按顺序执行</strong>，可以共享数据，比如切青椒的步骤，可以读取到青椒清洗的农药残留数据。</p>\n<p><strong>工作还可以依赖</strong>，默认情况下，工作并行执行，但有些场景工作是依赖的，比如炒菜工作，要依赖于配菜工作的完成。</p>\n<h3 id=\"Actions（脚本动作封装）\"><a href=\"#Actions（脚本动作封装）\" class=\"headerlink\" title=\"Actions（脚本动作封装）\"></a>Actions（脚本动作封装）</h3><p>顾名思义，就是将通用的动作封装起来，方便整个宇宙的程序员去使用。比如绞肉机就是将切肉丝的动作封装了起来。</p>\n<p>可以在 Github Marketplace 中找到和分享 Actions.</p>\n<h3 id=\"Runners（运行的机器）\"><a href=\"#Runners（运行的机器）\" class=\"headerlink\" title=\"Runners（运行的机器）\"></a>Runners（运行的机器）</h3><p>工作流不能凭空执行，它也是运行在机器上的，它可以是虚拟机、docker 容器。Github 提供了 Ubuntu Linux、Microsoft Windows、MacOS 这几种机器来执行工作流，注意一个限制：<strong>一个机器同时只能执行一个 Job</strong>。</p>\n<p>如果官方的机器不能满足你，也可以自动自己的机器来跑工作流，后续会讲到。</p>\n<h2 id=\"使用-Actions\"><a href=\"#使用-Actions\" class=\"headerlink\" title=\"使用 Actions\"></a>使用 Actions</h2><p>上面说到 Actions 是脚本的封装，它可以是社区市场中的 Actions，也可以是自定义 Actions，甚至是一个 Docker 镜像。</p>\n<h3 id=\"Marketplace-方式\"><a href=\"#Marketplace-方式\" class=\"headerlink\" title=\"Marketplace 方式\"></a>Marketplace 方式</h3><p>Github 提供了界面操作，让我们可以方便的在工作流中维护 Actions，只要我们在浏览器中编辑 yml 文件，右侧就出现了 Actions 市场，可以点开某个 Actions，查看它的详细配置。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/taoliujun/taoliujun.github.io/assets/202306281126235.png\"><br>​<br><img src=\"https://cdn.jsdelivr.net/gh/taoliujun/taoliujun.github.io/assets/202306281127958.png\"></p>\n<p>对照着 Actions 的文档，我在 Workflow 中插入 node。现在，我的配置文件长这样：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">lint</span></span><br><span class=\"line\"><span class=\"attr\">on:</span> [<span class=\"string\">push</span>]</span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">eslint:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Check</span> <span class=\"string\">out</span> <span class=\"string\">repository</span> <span class=\"string\">code</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v3</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">use</span> <span class=\"string\">node</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v3.3.0</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">node-version:</span> <span class=\"string\">latest</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">run:</span> <span class=\"string\">node</span> <span class=\"string\">-v</span></span><br></pre></td></tr></table></figure>\n\n<p>然后，查看执行结果。<br>​<br><img src=\"https://cdn.jsdelivr.net/gh/taoliujun/taoliujun.github.io/assets/202306281127692.png\"></p>\n<h3 id=\"自己的-Actions\"><a href=\"#自己的-Actions\" class=\"headerlink\" title=\"自己的 Actions\"></a>自己的 Actions</h3><p>还可以在自己的仓库里添加 Actions，这里就贴官方原例子了。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|-- root (repository)</span><br><span class=\"line\">|   |__ .github</span><br><span class=\"line\">|       └── workflows</span><br><span class=\"line\">|           └── my-first-workflow.yml</span><br><span class=\"line\">|       └── actions</span><br><span class=\"line\">|           |__ hello-world-action</span><br><span class=\"line\">|               └── action.yml</span><br></pre></td></tr></table></figure>\n\n<p>Example workflow file:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">build:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"comment\"># This step checks out a copy of your repository.</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v3</span></span><br><span class=\"line\">      <span class=\"comment\"># This step references the directory that contains the action.</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">uses:</span> <span class=\"string\">./.github/actions/hello-world-action</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"公共的-Actions\"><a href=\"#公共的-Actions\" class=\"headerlink\" title=\"公共的 Actions\"></a>公共的 Actions</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v3</span></span><br></pre></td></tr></table></figure>\n\n<p>使用其他 Github 仓库的 Actions 就是如此简单，我们常使用的 actions&#x2F;***，其实也属于公共仓库，它们是由官方维护的一组 Actions，比较稳定。点击此处可以看到官方的 Actions。</p>\n<h3 id=\"Docker-镜像\"><a href=\"#Docker-镜像\" class=\"headerlink\" title=\"Docker 镜像\"></a>Docker 镜像</h3><p>如果 Runners 和开源 Actions 都不能满足你，可以搞 docker 来执行 Workflows。</p>\n<p>因本人的 docker 水平属于“哇，我能启动 docker，我真厉害”，就不展开讲了。</p>\n<h3 id=\"不同版本的-Actions\"><a href=\"#不同版本的-Actions\" class=\"headerlink\" title=\"不同版本的 Actions\"></a>不同版本的 Actions</h3><p>Actions 本质上是仓库里的文件，它会有版本区分，我们有好几种方法使用它：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用tag</span></span><br><span class=\"line\"><span class=\"attr\">uses:</span> <span class=\"string\">actions/javascript-action@v1.0.1</span></span><br><span class=\"line\"><span class=\"comment\"># 使用commitID</span></span><br><span class=\"line\"><span class=\"attr\">uses:</span> <span class=\"string\">actions/javascript-action@172239021f7ba04fe7327647b213799853a9eb89</span></span><br><span class=\"line\"><span class=\"comment\"># 使用branch</span></span><br><span class=\"line\"><span class=\"attr\">uses:</span> <span class=\"string\">actions/javascript-action@main</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"基本特性\"><a href=\"#基本特性\" class=\"headerlink\" title=\"基本特性\"></a>基本特性</h2><p>这部分文档看的云里雾里的，讲了一些如何使用变量，如何在 Jobs 里共享数据，不知道这些内容出现在这里的目的是什么，略过。</p>\n<h2 id=\"表达式\"><a href=\"#表达式\" class=\"headerlink\" title=\"表达式\"></a>表达式</h2><p>支持在配置中使用表达式，我简单的记录了下，实际使用需要参照官方文档，它包含了以下。</p>\n<h3 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h3><p>支持<code>boolean</code>，<code>null</code>，<code>number</code>，<code>string</code> 类型。如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">env:</span></span><br><span class=\"line\">  <span class=\"attr\">myNull:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"literal\">null</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">  <span class=\"attr\">myBoolean:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"literal\">false</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">  <span class=\"attr\">myIntegerNumber:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"number\">711</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">  <span class=\"attr\">myString:</span> <span class=\"string\">Mona</span> <span class=\"string\">the</span> <span class=\"string\">Octocat</span></span><br><span class=\"line\">  <span class=\"attr\">myStringInBraces:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">&#x27;It&#x27;</span><span class=\"string\">&#x27;s open source!&#x27;</span> <span class=\"string\">&#125;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"操作符\"><a href=\"#操作符\" class=\"headerlink\" title=\"操作符\"></a>操作符</h3><p>一些如值比较、逻辑与、逻辑或的操作，不一一列举了。</p>\n<p>注意不是强类型的比较，有一些值转换的逻辑。</p>\n<h3 id=\"内置方法\"><a href=\"#内置方法\" class=\"headerlink\" title=\"内置方法\"></a>内置方法</h3><p>提供了一些内置方法辅助表达式，比如 <code>contains</code> 判断是否包含某个字符，不一一列举了。</p>\n<h3 id=\"状态处理\"><a href=\"#状态处理\" class=\"headerlink\" title=\"状态处理\"></a>状态处理</h3><p>Jobs 的每个步骤会按顺序执行，我们可以在某个步骤中加入对“已经执行的步骤”的状态判断，来决定是否要执行当前步骤。比如，只有青椒清洗步骤成功了，才执行青椒切丝步骤。举例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">steps:</span></span><br><span class=\"line\">  <span class=\"string\">...</span></span><br><span class=\"line\">  <span class=\"comment\"># 前面的步骤都执行成功了，再执行该步骤</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">The</span> <span class=\"string\">job</span> <span class=\"string\">has</span> <span class=\"string\">succeeded</span></span><br><span class=\"line\">    <span class=\"attr\">if:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">success()</span> <span class=\"string\">&#125;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>它还有以下几种状态结果：</p>\n<ul>\n<li><strong>always</strong>，只要执行了</li>\n<li><strong>success</strong>，执行成功了</li>\n<li><strong>cancelled</strong>，执行取消了</li>\n<li><strong>failure</strong>，执行失败了</li>\n</ul>\n<h2 id=\"上下文（重要）\"><a href=\"#上下文（重要）\" class=\"headerlink\" title=\"上下文（重要）\"></a>上下文（重要）</h2><p>上下文指工作流运行中可以访问的属性，你可以在<strong>表达式中</strong>访问上下文，比如访问当前仓库的地址<code>github.repositoryUrl</code>。它是<strong>job 串起来的重要保障</strong>。</p>\n<p>它提供了一组模块的上下文：github、env、job、steps、runner、needs 等等。</p>\n<p>如下演示了一个简单的上下文访问：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">CI</span></span><br><span class=\"line\"><span class=\"attr\">on:</span> <span class=\"string\">push</span></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">prod-check:</span></span><br><span class=\"line\">    <span class=\"attr\">if:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">github.ref</span> <span class=\"string\">==</span> <span class=\"string\">&#x27;refs/heads/main&#x27;</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">run:</span> <span class=\"string\">echo</span> <span class=\"string\">&quot;hello $<span class=\"template-variable\">&#123;&#123; github.actor &#125;&#125;</span>, branch is $GITHUB_REF&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>重要点：</p>\n<ul>\n<li>在不同的节点，上下文的可访问性有所不同，文档贴出了表格，这在使用的时候要注意。</li>\n<li>env 由内往外覆盖</li>\n</ul>\n<h2 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h2><p>还可以在 Workflows、Jobs、Steps 中设置和访问环境变量。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">lint</span></span><br><span class=\"line\"><span class=\"attr\">on:</span> [<span class=\"string\">push</span>]</span><br><span class=\"line\"><span class=\"attr\">env:</span></span><br><span class=\"line\">  <span class=\"attr\">YOUR_NAME:</span> <span class=\"string\">wang</span></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">eslint:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">env:</span></span><br><span class=\"line\">      <span class=\"attr\">YOUR_SEX:</span> <span class=\"string\">boy</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">test</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"attr\">YOUR_AGE:</span> <span class=\"number\">18</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">echo</span> <span class=\"string\">&quot;Hello, $<span class=\"template-variable\">&#123;&#123; env.YOUR_NAME &#125;&#125;</span>, your sex is $YOUR_SEX, your age is $YOUR_AGE&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>也提供一系列系统环境变量供访问，注意避开同名。</p>\n<h2 id=\"收费和限制\"><a href=\"#收费和限制\" class=\"headerlink\" title=\"收费和限制\"></a>收费和限制</h2><p>略</p>\n"},{"title":"5. GitHub Actions - Using jobs","url":"GitHub_Actions/using_jobs","date":"2022-07-07T16:00:00.000Z","_content":"\n官方文档：https://docs.github.com/en/actions/using-jobs/using-jobs-in-a-workflow\n\n## 使用 jobs\n\n- jobs 组成 workflow，jobs 默认并行执行，使用 needs 管理依赖执行。\n- job id 命名要唯一，由字母、数字、-、\\_组成。\n\n## 使用 runner\n\n可以使用 github 提供的机器，也可以自建机器，没啥其他重要的。\n\n## 执行条件\n\n执行 if 表达式的结果，决定是否执行本 job。举例：\n\n```yaml\nname: example-workflow\non: [push]\njobs:\n  production-deploy:\n    if: github.repository == 'octo-org/octo-repo-prod'\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: \"14\"\n      - run: npm install -g bats\n```\n\n## 矩阵\n\n晦涩的词语，理解为遍历变量创建重复执行的 job，如下，该 job 将执行 6 次，在两个 runner 上分别执行 3 种 node 版本的 job。\n\n```yaml\njobs:\n  example_matrix:\n    strategy:\n      matrix:\n        os: [ubuntu-22.04, ubuntu-20.04]\n        version: [10, 12, 14]\n    runs-on: ${{ matrix.os }}\n    steps:\n      - uses: actions/setup-node@v3\n        with:\n          node-version: ${{ matrix.version }}\n```\n\n也可以使用上下文创建 matrix 变量。\n\nmatrix 还支持自身简单的覆盖扩展，参考文档即可。\n\n## 并发策略\n\n同时只能运行一个符合策略的 job 或 workflow，并决定是否终止同组的 job 或 workflow。\n\n## 环境\n\n无\n\n## 容器\n\n暂时用不到，无\n\n## 默认值\n\n可以在 workflow 和 job 级别分别设置默认值，目前支持设置`shell`、`working-directory`。\n","source":"_posts/Github Actions/5. Using jobs.md","raw":"---\ntitle: 5. GitHub Actions - Using jobs\nurl: GitHub_Actions/using_jobs\ndate: 2022-07-08\ntags:\n  - github actions\n  - ci\ncategories:\n  - [架构]\n---\n\n官方文档：https://docs.github.com/en/actions/using-jobs/using-jobs-in-a-workflow\n\n## 使用 jobs\n\n- jobs 组成 workflow，jobs 默认并行执行，使用 needs 管理依赖执行。\n- job id 命名要唯一，由字母、数字、-、\\_组成。\n\n## 使用 runner\n\n可以使用 github 提供的机器，也可以自建机器，没啥其他重要的。\n\n## 执行条件\n\n执行 if 表达式的结果，决定是否执行本 job。举例：\n\n```yaml\nname: example-workflow\non: [push]\njobs:\n  production-deploy:\n    if: github.repository == 'octo-org/octo-repo-prod'\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: \"14\"\n      - run: npm install -g bats\n```\n\n## 矩阵\n\n晦涩的词语，理解为遍历变量创建重复执行的 job，如下，该 job 将执行 6 次，在两个 runner 上分别执行 3 种 node 版本的 job。\n\n```yaml\njobs:\n  example_matrix:\n    strategy:\n      matrix:\n        os: [ubuntu-22.04, ubuntu-20.04]\n        version: [10, 12, 14]\n    runs-on: ${{ matrix.os }}\n    steps:\n      - uses: actions/setup-node@v3\n        with:\n          node-version: ${{ matrix.version }}\n```\n\n也可以使用上下文创建 matrix 变量。\n\nmatrix 还支持自身简单的覆盖扩展，参考文档即可。\n\n## 并发策略\n\n同时只能运行一个符合策略的 job 或 workflow，并决定是否终止同组的 job 或 workflow。\n\n## 环境\n\n无\n\n## 容器\n\n暂时用不到，无\n\n## 默认值\n\n可以在 workflow 和 job 级别分别设置默认值，目前支持设置`shell`、`working-directory`。\n","slug":"Github Actions/5. Using jobs","published":1,"updated":"2023-07-05T07:42:58.029Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cljpf1ku7001emtrr683xcrnx","content":"<p>官方文档：<a href=\"https://docs.github.com/en/actions/using-jobs/using-jobs-in-a-workflow\">https://docs.github.com/en/actions/using-jobs/using-jobs-in-a-workflow</a></p>\n<h2 id=\"使用-jobs\"><a href=\"#使用-jobs\" class=\"headerlink\" title=\"使用 jobs\"></a>使用 jobs</h2><ul>\n<li>jobs 组成 workflow，jobs 默认并行执行，使用 needs 管理依赖执行。</li>\n<li>job id 命名要唯一，由字母、数字、-、_组成。</li>\n</ul>\n<h2 id=\"使用-runner\"><a href=\"#使用-runner\" class=\"headerlink\" title=\"使用 runner\"></a>使用 runner</h2><p>可以使用 github 提供的机器，也可以自建机器，没啥其他重要的。</p>\n<h2 id=\"执行条件\"><a href=\"#执行条件\" class=\"headerlink\" title=\"执行条件\"></a>执行条件</h2><p>执行 if 表达式的结果，决定是否执行本 job。举例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">example-workflow</span></span><br><span class=\"line\"><span class=\"attr\">on:</span> [<span class=\"string\">push</span>]</span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">production-deploy:</span></span><br><span class=\"line\">    <span class=\"attr\">if:</span> <span class=\"string\">github.repository</span> <span class=\"string\">==</span> <span class=\"string\">&#x27;octo-org/octo-repo-prod&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v3</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v3</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">node-version:</span> <span class=\"string\">&quot;14&quot;</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">run:</span> <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">-g</span> <span class=\"string\">bats</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"矩阵\"><a href=\"#矩阵\" class=\"headerlink\" title=\"矩阵\"></a>矩阵</h2><p>晦涩的词语，理解为遍历变量创建重复执行的 job，如下，该 job 将执行 6 次，在两个 runner 上分别执行 3 种 node 版本的 job。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">example_matrix:</span></span><br><span class=\"line\">    <span class=\"attr\">strategy:</span></span><br><span class=\"line\">      <span class=\"attr\">matrix:</span></span><br><span class=\"line\">        <span class=\"attr\">os:</span> [<span class=\"string\">ubuntu-22.04</span>, <span class=\"string\">ubuntu-20.04</span>]</span><br><span class=\"line\">        <span class=\"attr\">version:</span> [<span class=\"number\">10</span>, <span class=\"number\">12</span>, <span class=\"number\">14</span>]</span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">matrix.os</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v3</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">node-version:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">matrix.version</span> <span class=\"string\">&#125;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>也可以使用上下文创建 matrix 变量。</p>\n<p>matrix 还支持自身简单的覆盖扩展，参考文档即可。</p>\n<h2 id=\"并发策略\"><a href=\"#并发策略\" class=\"headerlink\" title=\"并发策略\"></a>并发策略</h2><p>同时只能运行一个符合策略的 job 或 workflow，并决定是否终止同组的 job 或 workflow。</p>\n<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><p>无</p>\n<h2 id=\"容器\"><a href=\"#容器\" class=\"headerlink\" title=\"容器\"></a>容器</h2><p>暂时用不到，无</p>\n<h2 id=\"默认值\"><a href=\"#默认值\" class=\"headerlink\" title=\"默认值\"></a>默认值</h2><p>可以在 workflow 和 job 级别分别设置默认值，目前支持设置<code>shell</code>、<code>working-directory</code>。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>官方文档：<a href=\"https://docs.github.com/en/actions/using-jobs/using-jobs-in-a-workflow\">https://docs.github.com/en/actions/using-jobs/using-jobs-in-a-workflow</a></p>\n<h2 id=\"使用-jobs\"><a href=\"#使用-jobs\" class=\"headerlink\" title=\"使用 jobs\"></a>使用 jobs</h2><ul>\n<li>jobs 组成 workflow，jobs 默认并行执行，使用 needs 管理依赖执行。</li>\n<li>job id 命名要唯一，由字母、数字、-、_组成。</li>\n</ul>\n<h2 id=\"使用-runner\"><a href=\"#使用-runner\" class=\"headerlink\" title=\"使用 runner\"></a>使用 runner</h2><p>可以使用 github 提供的机器，也可以自建机器，没啥其他重要的。</p>\n<h2 id=\"执行条件\"><a href=\"#执行条件\" class=\"headerlink\" title=\"执行条件\"></a>执行条件</h2><p>执行 if 表达式的结果，决定是否执行本 job。举例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">example-workflow</span></span><br><span class=\"line\"><span class=\"attr\">on:</span> [<span class=\"string\">push</span>]</span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">production-deploy:</span></span><br><span class=\"line\">    <span class=\"attr\">if:</span> <span class=\"string\">github.repository</span> <span class=\"string\">==</span> <span class=\"string\">&#x27;octo-org/octo-repo-prod&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v3</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v3</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">node-version:</span> <span class=\"string\">&quot;14&quot;</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">run:</span> <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">-g</span> <span class=\"string\">bats</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"矩阵\"><a href=\"#矩阵\" class=\"headerlink\" title=\"矩阵\"></a>矩阵</h2><p>晦涩的词语，理解为遍历变量创建重复执行的 job，如下，该 job 将执行 6 次，在两个 runner 上分别执行 3 种 node 版本的 job。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">example_matrix:</span></span><br><span class=\"line\">    <span class=\"attr\">strategy:</span></span><br><span class=\"line\">      <span class=\"attr\">matrix:</span></span><br><span class=\"line\">        <span class=\"attr\">os:</span> [<span class=\"string\">ubuntu-22.04</span>, <span class=\"string\">ubuntu-20.04</span>]</span><br><span class=\"line\">        <span class=\"attr\">version:</span> [<span class=\"number\">10</span>, <span class=\"number\">12</span>, <span class=\"number\">14</span>]</span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">matrix.os</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v3</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">node-version:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">matrix.version</span> <span class=\"string\">&#125;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>也可以使用上下文创建 matrix 变量。</p>\n<p>matrix 还支持自身简单的覆盖扩展，参考文档即可。</p>\n<h2 id=\"并发策略\"><a href=\"#并发策略\" class=\"headerlink\" title=\"并发策略\"></a>并发策略</h2><p>同时只能运行一个符合策略的 job 或 workflow，并决定是否终止同组的 job 或 workflow。</p>\n<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><p>无</p>\n<h2 id=\"容器\"><a href=\"#容器\" class=\"headerlink\" title=\"容器\"></a>容器</h2><p>暂时用不到，无</p>\n<h2 id=\"默认值\"><a href=\"#默认值\" class=\"headerlink\" title=\"默认值\"></a>默认值</h2><p>可以在 workflow 和 job 级别分别设置默认值，目前支持设置<code>shell</code>、<code>working-directory</code>。</p>\n"},{"title":"6. GitHub Actions - Managing workflow runs","url":"GitHub_Actions/managing_workflow_runs","date":"2022-07-08T16:00:00.000Z","_content":"\n官方文档：https://docs.github.com/en/actions/using-workflows/manually-running-a-workflow\n\n## 手动执行\n\n设置`event`包含`workflow_dispatch`，可以手动触发，使用 Github CLI、Browser 都可以，文档中呈现了一个流程图示例。\n\n## 重复执行\n\n无\n\n## 取消执行\n\n无\n\n## 审批执行\n\n对于 pull request，可以设置审批执行以防止浪费 actions 资源。\n\n## 审查部署\n\n无\n\n## 开关 workflow\n\n无\n\n## 跳过 workflow\n\n在 commit message 中加入关键词可以跳过 workflow，只对 push、pull_request 事件有效。关键词有：\n\n- [skip ci]\n- [ci skip]\n- [no ci]\n- [skip actions]\n- [actions skip]\n\n也可以在 message 后空两行，然后加入关键词：\n\n- skip-checks:true\n- skip-checks: true\n\n## 删除 workflow\n\n无\n\n## 下载 workflow 归档\n\n可以下载 90 天内的 workflow 归档，操作参考文档。\n","source":"_posts/Github Actions/6. Managing workflow runs.md","raw":"---\ntitle: 6. GitHub Actions - Managing workflow runs\nurl: GitHub_Actions/managing_workflow_runs\ndate: 2022-07-09\ntags:\n  - github actions\n  - ci\ncategories:\n  - [架构]\n---\n\n官方文档：https://docs.github.com/en/actions/using-workflows/manually-running-a-workflow\n\n## 手动执行\n\n设置`event`包含`workflow_dispatch`，可以手动触发，使用 Github CLI、Browser 都可以，文档中呈现了一个流程图示例。\n\n## 重复执行\n\n无\n\n## 取消执行\n\n无\n\n## 审批执行\n\n对于 pull request，可以设置审批执行以防止浪费 actions 资源。\n\n## 审查部署\n\n无\n\n## 开关 workflow\n\n无\n\n## 跳过 workflow\n\n在 commit message 中加入关键词可以跳过 workflow，只对 push、pull_request 事件有效。关键词有：\n\n- [skip ci]\n- [ci skip]\n- [no ci]\n- [skip actions]\n- [actions skip]\n\n也可以在 message 后空两行，然后加入关键词：\n\n- skip-checks:true\n- skip-checks: true\n\n## 删除 workflow\n\n无\n\n## 下载 workflow 归档\n\n可以下载 90 天内的 workflow 归档，操作参考文档。\n","slug":"Github Actions/6. Managing workflow runs","published":1,"updated":"2023-07-05T07:43:02.877Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cljpf1ku8001imtrrfv5fa5lz","content":"<p>官方文档：<a href=\"https://docs.github.com/en/actions/using-workflows/manually-running-a-workflow\">https://docs.github.com/en/actions/using-workflows/manually-running-a-workflow</a></p>\n<h2 id=\"手动执行\"><a href=\"#手动执行\" class=\"headerlink\" title=\"手动执行\"></a>手动执行</h2><p>设置<code>event</code>包含<code>workflow_dispatch</code>，可以手动触发，使用 Github CLI、Browser 都可以，文档中呈现了一个流程图示例。</p>\n<h2 id=\"重复执行\"><a href=\"#重复执行\" class=\"headerlink\" title=\"重复执行\"></a>重复执行</h2><p>无</p>\n<h2 id=\"取消执行\"><a href=\"#取消执行\" class=\"headerlink\" title=\"取消执行\"></a>取消执行</h2><p>无</p>\n<h2 id=\"审批执行\"><a href=\"#审批执行\" class=\"headerlink\" title=\"审批执行\"></a>审批执行</h2><p>对于 pull request，可以设置审批执行以防止浪费 actions 资源。</p>\n<h2 id=\"审查部署\"><a href=\"#审查部署\" class=\"headerlink\" title=\"审查部署\"></a>审查部署</h2><p>无</p>\n<h2 id=\"开关-workflow\"><a href=\"#开关-workflow\" class=\"headerlink\" title=\"开关 workflow\"></a>开关 workflow</h2><p>无</p>\n<h2 id=\"跳过-workflow\"><a href=\"#跳过-workflow\" class=\"headerlink\" title=\"跳过 workflow\"></a>跳过 workflow</h2><p>在 commit message 中加入关键词可以跳过 workflow，只对 push、pull_request 事件有效。关键词有：</p>\n<ul>\n<li>[skip ci]</li>\n<li>[ci skip]</li>\n<li>[no ci]</li>\n<li>[skip actions]</li>\n<li>[actions skip]</li>\n</ul>\n<p>也可以在 message 后空两行，然后加入关键词：</p>\n<ul>\n<li>skip-checks:true</li>\n<li>skip-checks: true</li>\n</ul>\n<h2 id=\"删除-workflow\"><a href=\"#删除-workflow\" class=\"headerlink\" title=\"删除 workflow\"></a>删除 workflow</h2><p>无</p>\n<h2 id=\"下载-workflow-归档\"><a href=\"#下载-workflow-归档\" class=\"headerlink\" title=\"下载 workflow 归档\"></a>下载 workflow 归档</h2><p>可以下载 90 天内的 workflow 归档，操作参考文档。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>官方文档：<a href=\"https://docs.github.com/en/actions/using-workflows/manually-running-a-workflow\">https://docs.github.com/en/actions/using-workflows/manually-running-a-workflow</a></p>\n<h2 id=\"手动执行\"><a href=\"#手动执行\" class=\"headerlink\" title=\"手动执行\"></a>手动执行</h2><p>设置<code>event</code>包含<code>workflow_dispatch</code>，可以手动触发，使用 Github CLI、Browser 都可以，文档中呈现了一个流程图示例。</p>\n<h2 id=\"重复执行\"><a href=\"#重复执行\" class=\"headerlink\" title=\"重复执行\"></a>重复执行</h2><p>无</p>\n<h2 id=\"取消执行\"><a href=\"#取消执行\" class=\"headerlink\" title=\"取消执行\"></a>取消执行</h2><p>无</p>\n<h2 id=\"审批执行\"><a href=\"#审批执行\" class=\"headerlink\" title=\"审批执行\"></a>审批执行</h2><p>对于 pull request，可以设置审批执行以防止浪费 actions 资源。</p>\n<h2 id=\"审查部署\"><a href=\"#审查部署\" class=\"headerlink\" title=\"审查部署\"></a>审查部署</h2><p>无</p>\n<h2 id=\"开关-workflow\"><a href=\"#开关-workflow\" class=\"headerlink\" title=\"开关 workflow\"></a>开关 workflow</h2><p>无</p>\n<h2 id=\"跳过-workflow\"><a href=\"#跳过-workflow\" class=\"headerlink\" title=\"跳过 workflow\"></a>跳过 workflow</h2><p>在 commit message 中加入关键词可以跳过 workflow，只对 push、pull_request 事件有效。关键词有：</p>\n<ul>\n<li>[skip ci]</li>\n<li>[ci skip]</li>\n<li>[no ci]</li>\n<li>[skip actions]</li>\n<li>[actions skip]</li>\n</ul>\n<p>也可以在 message 后空两行，然后加入关键词：</p>\n<ul>\n<li>skip-checks:true</li>\n<li>skip-checks: true</li>\n</ul>\n<h2 id=\"删除-workflow\"><a href=\"#删除-workflow\" class=\"headerlink\" title=\"删除 workflow\"></a>删除 workflow</h2><p>无</p>\n<h2 id=\"下载-workflow-归档\"><a href=\"#下载-workflow-归档\" class=\"headerlink\" title=\"下载 workflow 归档\"></a>下载 workflow 归档</h2><p>可以下载 90 天内的 workflow 归档，操作参考文档。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cljpf1ktu0005mtrr2t1t22qw","category_id":"cljpf1ktt0004mtrr5noo60up","_id":"cljpf1ktz000hmtrr7d8ed6t8"},{"post_id":"cljpf1ktl0000mtrr4q7fa63p","category_id":"cljpf1ktt0004mtrr5noo60up","_id":"cljpf1ku0000jmtrr9b3keiay"},{"post_id":"cljpf1ktu0006mtrr3w4xcf0j","category_id":"cljpf1ktt0004mtrr5noo60up","_id":"cljpf1ku1000nmtrr460e3eyh"},{"post_id":"cljpf1ktw000amtrr6a1h4aqp","category_id":"cljpf1ktt0004mtrr5noo60up","_id":"cljpf1ku2000pmtrr7n4ea5rg"},{"post_id":"cljpf1ktp0001mtrrg0hp9fsx","category_id":"cljpf1ktt0004mtrr5noo60up","_id":"cljpf1ku3000tmtrr7x04hn7v"},{"post_id":"cljpf1ktx000cmtrr2jm28h0l","category_id":"cljpf1ktt0004mtrr5noo60up","_id":"cljpf1ku4000wmtrr1rpne19l"},{"post_id":"cljpf1kty000gmtrr3cxiedq2","category_id":"cljpf1ktt0004mtrr5noo60up","_id":"cljpf1ku40010mtrr7asid7zq"},{"post_id":"cljpf1kts0003mtrr6eyu56pq","category_id":"cljpf1ktt0004mtrr5noo60up","_id":"cljpf1ku50014mtrr31kh3rlt"},{"post_id":"cljpf1ktz000imtrreh3r1gj5","category_id":"cljpf1ktt0004mtrr5noo60up","_id":"cljpf1ku60018mtrr36n16xqf"},{"post_id":"cljpf1ku0000mmtrr1brv5qqs","category_id":"cljpf1ku3000smtrr7pxtgcbk","_id":"cljpf1ku7001cmtrrd1hh9bys"},{"post_id":"cljpf1ku1000omtrrah87dqcx","category_id":"cljpf1ku3000smtrr7pxtgcbk","_id":"cljpf1ku9001jmtrrffw01d7x"},{"post_id":"cljpf1ku7001bmtrrclmbgbfh","category_id":"cljpf1ku60019mtrrhdnxc1ok","_id":"cljpf1kua001nmtrr122i0t7n"},{"post_id":"cljpf1ku7001emtrr683xcrnx","category_id":"cljpf1ku60019mtrrhdnxc1ok","_id":"cljpf1kua001pmtrrcjjnf1dr"},{"post_id":"cljpf1ku2000rmtrrc04f0fp0","category_id":"cljpf1ku60019mtrrhdnxc1ok","_id":"cljpf1kua001tmtrr71q89xz1"},{"post_id":"cljpf1ku2000rmtrrc04f0fp0","category_id":"cljpf1ku3000smtrr7pxtgcbk","_id":"cljpf1kua001vmtrr32u2dgvy"},{"post_id":"cljpf1ku8001imtrrfv5fa5lz","category_id":"cljpf1ku60019mtrrhdnxc1ok","_id":"cljpf1kub001ymtrrheks9faf"},{"post_id":"cljpf1ku3000vmtrr08om0g2b","category_id":"cljpf1ku60019mtrrhdnxc1ok","_id":"cljpf1kub0020mtrr0pis1t5g"},{"post_id":"cljpf1ku4000zmtrrgnii4fww","category_id":"cljpf1ku60019mtrrhdnxc1ok","_id":"cljpf1kub0022mtrr0wxx0upp"},{"post_id":"cljpf1ku50013mtrrckv6466i","category_id":"cljpf1ku60019mtrrhdnxc1ok","_id":"cljpf1kuc0023mtrr9lrw0fbu"},{"post_id":"cljpf1ku60017mtrr2hpggdog","category_id":"cljpf1ku60019mtrrhdnxc1ok","_id":"cljpf1kuc0025mtrr53w07elj"}],"PostTag":[{"post_id":"cljpf1ktu0005mtrr2t1t22qw","tag_id":"cljpf1ktr0002mtrr86zffkxs","_id":"cljpf1ktw0009mtrre2l4cf7s"},{"post_id":"cljpf1ktl0000mtrr4q7fa63p","tag_id":"cljpf1ktr0002mtrr86zffkxs","_id":"cljpf1ktx000bmtrr91bi8idn"},{"post_id":"cljpf1ktp0001mtrrg0hp9fsx","tag_id":"cljpf1ktr0002mtrr86zffkxs","_id":"cljpf1kty000fmtrr9xc8eqlj"},{"post_id":"cljpf1kts0003mtrr6eyu56pq","tag_id":"cljpf1ktr0002mtrr86zffkxs","_id":"cljpf1ku0000lmtrr327w8upr"},{"post_id":"cljpf1ktu0006mtrr3w4xcf0j","tag_id":"cljpf1ktr0002mtrr86zffkxs","_id":"cljpf1ku3000umtrrcvaies0k"},{"post_id":"cljpf1ktu0006mtrr3w4xcf0j","tag_id":"cljpf1ku0000kmtrr70x699wq","_id":"cljpf1ku4000xmtrrf94f2u8k"},{"post_id":"cljpf1ktw000amtrr6a1h4aqp","tag_id":"cljpf1ktr0002mtrr86zffkxs","_id":"cljpf1ku50012mtrrdgvtfr5k"},{"post_id":"cljpf1ktw000amtrr6a1h4aqp","tag_id":"cljpf1ku2000qmtrrc7qfgek1","_id":"cljpf1ku50015mtrr7ncfcyem"},{"post_id":"cljpf1ktx000cmtrr2jm28h0l","tag_id":"cljpf1ktr0002mtrr86zffkxs","_id":"cljpf1ku7001amtrrbd5b6ql1"},{"post_id":"cljpf1ktx000cmtrr2jm28h0l","tag_id":"cljpf1ku4000ymtrrfkp2b5ox","_id":"cljpf1ku7001dmtrrbmszcpdp"},{"post_id":"cljpf1kty000gmtrr3cxiedq2","tag_id":"cljpf1ktr0002mtrr86zffkxs","_id":"cljpf1ku8001hmtrr6gzl3f71"},{"post_id":"cljpf1kty000gmtrr3cxiedq2","tag_id":"cljpf1ku60016mtrr7lbj10d6","_id":"cljpf1ku9001kmtrrf723azl3"},{"post_id":"cljpf1ktz000imtrreh3r1gj5","tag_id":"cljpf1ktr0002mtrr86zffkxs","_id":"cljpf1kua001omtrr01isghpp"},{"post_id":"cljpf1ktz000imtrreh3r1gj5","tag_id":"cljpf1ku8001fmtrr403mfuq2","_id":"cljpf1kua001qmtrrcbm3gj62"},{"post_id":"cljpf1ku0000mmtrr1brv5qqs","tag_id":"cljpf1ku9001lmtrr40qf8th2","_id":"cljpf1kua001umtrr7bbxdkvr"},{"post_id":"cljpf1ku1000omtrrah87dqcx","tag_id":"cljpf1ku9001lmtrr40qf8th2","_id":"cljpf1kub001zmtrr1a8x850m"},{"post_id":"cljpf1ku2000rmtrrc04f0fp0","tag_id":"cljpf1kub001xmtrr128o0eg1","_id":"cljpf1kuc0026mtrr16ciec18"},{"post_id":"cljpf1ku2000rmtrrc04f0fp0","tag_id":"cljpf1kub0021mtrrgxo18bve","_id":"cljpf1kuc0027mtrrh23f9jiz"},{"post_id":"cljpf1ku3000vmtrr08om0g2b","tag_id":"cljpf1kuc0024mtrr84u8bcjb","_id":"cljpf1kuc002amtrr1ol6fxsf"},{"post_id":"cljpf1ku3000vmtrr08om0g2b","tag_id":"cljpf1kuc0028mtrr1eqbhc3s","_id":"cljpf1kud002bmtrrad1m2aya"},{"post_id":"cljpf1ku4000zmtrrgnii4fww","tag_id":"cljpf1kuc0024mtrr84u8bcjb","_id":"cljpf1kud002emtrr2dh3fqz6"},{"post_id":"cljpf1ku4000zmtrrgnii4fww","tag_id":"cljpf1kuc0028mtrr1eqbhc3s","_id":"cljpf1kud002fmtrrbqq2h1fs"},{"post_id":"cljpf1ku50013mtrrckv6466i","tag_id":"cljpf1kuc0024mtrr84u8bcjb","_id":"cljpf1kue002imtrr5ix8h7s6"},{"post_id":"cljpf1ku50013mtrrckv6466i","tag_id":"cljpf1kuc0028mtrr1eqbhc3s","_id":"cljpf1kue002jmtrrgtjp8eyh"},{"post_id":"cljpf1ku60017mtrr2hpggdog","tag_id":"cljpf1kuc0024mtrr84u8bcjb","_id":"cljpf1kue002mmtrr9bixcm09"},{"post_id":"cljpf1ku60017mtrr2hpggdog","tag_id":"cljpf1kuc0028mtrr1eqbhc3s","_id":"cljpf1kuf002nmtrr2oo6fieb"},{"post_id":"cljpf1ku7001bmtrrclmbgbfh","tag_id":"cljpf1kuc0024mtrr84u8bcjb","_id":"cljpf1kuf002qmtrrafsb2dc0"},{"post_id":"cljpf1ku7001bmtrrclmbgbfh","tag_id":"cljpf1kuc0028mtrr1eqbhc3s","_id":"cljpf1kuf002rmtrraf7gav77"},{"post_id":"cljpf1ku7001emtrr683xcrnx","tag_id":"cljpf1kuc0024mtrr84u8bcjb","_id":"cljpf1kug002umtrrhzd5hyfh"},{"post_id":"cljpf1ku7001emtrr683xcrnx","tag_id":"cljpf1kuc0028mtrr1eqbhc3s","_id":"cljpf1kug002vmtrr7qkoh7r1"},{"post_id":"cljpf1ku8001imtrrfv5fa5lz","tag_id":"cljpf1kuc0024mtrr84u8bcjb","_id":"cljpf1kug002xmtrr9grlbbpz"},{"post_id":"cljpf1ku8001imtrrfv5fa5lz","tag_id":"cljpf1kuc0028mtrr1eqbhc3s","_id":"cljpf1kug002ymtrrbnol4es3"}],"Tag":[{"name":"javascript","_id":"cljpf1ktr0002mtrr86zffkxs"},{"name":"proxy","_id":"cljpf1ku0000kmtrr70x699wq"},{"name":"set","_id":"cljpf1ku2000qmtrrc7qfgek1"},{"name":"reflect","_id":"cljpf1ku4000ymtrrfkp2b5ox"},{"name":"promise","_id":"cljpf1ku60016mtrr7lbj10d6"},{"name":"symbol","_id":"cljpf1ku8001fmtrr403mfuq2"},{"name":"react","_id":"cljpf1ku9001lmtrr40qf8th2"},{"name":"radix","_id":"cljpf1kub001xmtrr128o0eg1"},{"name":"组件","_id":"cljpf1kub0021mtrrgxo18bve"},{"name":"github actions","_id":"cljpf1kuc0024mtrr84u8bcjb"},{"name":"ci","_id":"cljpf1kuc0028mtrr1eqbhc3s"}]}}